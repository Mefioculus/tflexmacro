/* Ссылки
TFlex.Model.Technology.dll
TFlex.Reporting.CAD.dll
TFlex.Reporting.Technology.dll
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.Model.Technology.Macros.ObjectModel;
using TFlex.Reporting.Technology.Macros;
using TFlex.DOCs.Model.References.Files;
using TFlex.DOCs.Model.References;

public class Macro : ReportMacroProvider
{

	public Объект  result2=null;
	
    public Macro(ReportGenerationMacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    }
    
    //Заданный формат вывода времён в карту	
    private string format = "0.##";
    private string format2 = "{0:0.##}";
    
    public void Signature(string Fio,string Sing, string Data, string namesing,Объект техпроцесс)
    	
    	{
    	if (техпроцесс.Подписи[namesing]!=null)
        	{
    	Подпись подпись = техпроцесс.Подписи[namesing];
    	Переменная[Fio]=подпись.Пользователь["Короткое имя"].ToString();
        if (namesing=="Начальник БТК")     	
        	Переменная[Fio+"_PROF"]="Нач. БТК";
        else if (namesing=="Главный метролог")
            {                  // $Экспертиза
                  Переменная[Fio+"_PROF"]="Главный метролог";                                             
                  var файлЭкспертиза=НайтиОбъект("Файлы","[Наименование] = 'Экспертиза.wmf' И [Родительский объект].[Наименование] = 'Signature'");
                  FileObject fileExpert = (ReferenceObject)файлЭкспертиза as FileObject;
                  fileExpert.GetHeadRevision();
                  string filePath1 = fileExpert.LocalPath;
                  //string filePath1 = "C:\\tflexcash\\Служебные файлы\\Другое\\Signature\\Экспертиза.wmf";
                	Переменная["$Экспертиза"]=filePath1;  
            }
                          
        else
    	    Переменная[Fio+"_PROF"]=подпись.Пользователь["Должность"].ToString();
    	                       
    	if (техпроцесс.Подписи[namesing].ДатаПодписи!=null)
    		{
    		        Переменная[Data]=(техпроцесс.Подписи[namesing].ДатаПодписи.ToString().Substring(0,10));
                    	            
    		        var файл=НайтиОбъект("Файлы","[Наименование] = '"+подпись.Пользователь["Логин"].ToString()+".png' И [Родительский объект].[Наименование] = 'Signature'");
    		        if (подпись.Пользователь["Изображение подписи"]!=null && файл!=null)
    		        	{
                            FileObject file = (ReferenceObject)файл as FileObject;
                        	file.GetHeadRevision();
                        	string filePath = file.LocalPath;
                        	Переменная[Sing]=filePath;                                                    	
                	     }
    	   }
    	
        //Сообщение("",filePath);
        
        
    	//System.Windows.Forms.MessageBox.Show(файл.ToString());
        //
    	//
        //Объект подпись = НайтиОбъект("Файлы", "Наименование", наименованиеЛичнойПапки);        
    	
//    		"C:\\001\\sing2.png";
//    		файл["Относительный путь"];
    	//System.Windows.Forms.MessageBox.Show(файл["Относительный путь"].ToString());
//
   // 		"Тест\\sing.png";
    	
//    		подпись.Пользователь["Изображение подписи"].ToString();
//    		"C:\\001\\sing2.png";
    	//Переменная["$R_Sing"];
//    		@"Тест\\sing.png";
//    		@"docs://tflex-docs:21321/OpenFile/?fileId=54773";
//    		"C:\\001\\sing.png";
    		//"Тест\\sing.png";
        //подпись.Пользователь["Изображение подписи"].ToString();
     
        var sing= подпись.Пользователь["Изображение подписи"];
        var sing1= подпись.Пользователь;
        
    	//System.Windows.Forms.MessageBox.Show("ЗаполнитьОсновныеНадписи(Объект техпроцесс)");
    	}
        }
    
    
    
    
    

      
      
      
          
      public void Signatures(string Fio,string Sing, string Data, string namesing,Объект техпроцесс)
    	
    	{
      	int num=1;
      	foreach(Подпись подпись in техпроцесс.Подписи)
      		{
      	     
      		if (подпись.ТипПодписи==namesing)
      	         {
            	if (техпроцесс.Подписи[namesing]!=null)
                	{
                    	//Подпись подпись = техпроцесс.Подписи[namesing];
                    //	System.Windows.Forms.MessageBox.Show(подпись.Пользователь["Короткое имя"].ToString());
                    	//System.Windows.Forms.MessageBox.Show(Fio);
                    //	System.Windows.Forms.MessageBox.Show(Fio+num.ToString());
                    	Переменная[Fio+num.ToString()]=подпись.Пользователь["Короткое имя"].ToString();
                                         	
                    	Переменная["$chief_PROF"+num.ToString()]=подпись.Пользователь["Должность"].ToString();
                    	//{$chief_PROF1}

                    		//подпись.Пользователь["Короткое имя"].ToString()+"12"+"\n 111"+подпись.Пользователь["Должность"].ToString();
            	//подпись.Пользователь["Должность"].ToString()+"-  "
            	
                        	if (техпроцесс.Подписи[namesing].ДатаПодписи!=null)
                        		{
                        		        Переменная[Data+num.ToString()]=(техпроцесс.Подписи[namesing].ДатаПодписи.ToString().Substring(0,10));
                                        	            
                        		        var файл=НайтиОбъект("Файлы","[Наименование] = '"+подпись.Пользователь["Логин"].ToString()+".png' И [Родительский объект].[Наименование] = 'Signature'");
                        		        if (подпись.Пользователь["Изображение подписи"]!=null && файл!=null)
                        		        	{
                                                FileObject file = (ReferenceObject)файл as FileObject;
                                            	file.GetHeadRevision();
                                            	string filePath = file.LocalPath;
                                            	Переменная[Sing+num.ToString()]=filePath;
                                    	     }
                        	    }
            	
        
             
                            var sing= подпись.Пользователь["Изображение подписи"];
                            var sing1= подпись.Пользователь;
                
            	//System.Windows.Forms.MessageBox.Show("ЗаполнитьОсновныеНадписи(Объект техпроцесс)");
            	       }
      		num=num+1;
      			}
      			
        }
    }
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных ОСНОВНЫЕ НАДПИСИ применительно к ТП
    //см. ГОСТ 3.1103-2011 ЕСТД. Основные надписи. Общие положения
    /****************************************************************************************************************************/
    public void ЗаполнитьОсновныеНадписи(Объект техпроцесс,bool sign=false)
    {
    	
    //	System.Windows.Forms.MessageBox.Show("ЗаполнитьОсновныеНадписи(Объект техпроцесс)");
        //Находим все ДСЕ связанные с ТП
  //      System.Windows.Forms.MessageBox.Show("RAZRAB"+Переменная["$Razrab_FIO1"]);
  //      System.Windows.Forms.MessageBox.Show("Sing"+Переменная["$R_Sing"]);
        //Переменная["$Razrab_Sign"]="";
        
        //System.Windows.Forms.MessageBox.Show(техпроцесс.Подписи.Count.ToString());
      //{$Razrab_FIO1}
       //   Signature("$Razrab_FIO1","$Rsing", "$Razrab_Date1", "Разраб.",техпроцесс);
        
      //  System.Windows.Forms.MessageBox.Show("RAZRAB"+Переменная["$Razrab_FIO1"]);
      //  System.Windows.Forms.MessageBox.Show("Sing"+Переменная["$R_Sing"]);
      
      //{$Razrab_Date} {$Prov_Date}
      if (sign)
      	{
          Signature("$Razrab_FIO","$Razrab_Sign", "$Razrab_Date", "Разраб.",техпроцесс);
          Signature("$Prov_FIO","$Prov_Sign", "$Prov_Date", "Пров.",техпроцесс);
          Signature("$NKontr_FIO","$NKontr_Sign", "$NKontr_Date", "Н. контр.",техпроцесс);
          Signature("$main_BTK","$main_BTK_Sing", "$main_BTK_Date", "Начальник БТК",техпроцесс);
         //Signature("$TKontr_FIO","$TKontr_Sign", "$TKontr_Date", "Т. контр.",техпроцесс);
         

    	
         Signature("$Metrolog","$Metrolog_Sing", "$Metrolog_Date", "Главный метролог",техпроцесс);
  
           //C:\tflexcash\Служебные файлы\Другое\Signature\markinaa.png 
           // C:\tflexcash\Отчеты\Отчёты по Технологии\Служебные файлы\Другое\Signature\Администратор.png           
                        	
          
          Signature("$Utv_FIO","$Utv_Sign", "$Utv_Date", "Утв.",техпроцесс);
                
          Signatures("$chief_FIO","$chief_Sign", "$chief_Date", "Начальник цеха",техпроцесс);
         
          Signature("$НАЧ_ОГТ","$chief_technolog_Sing", "$chief_OGT_Date", "Главный технолог",техпроцесс);
   
          Signature("$НАЧ_ОТИЗ","$НАЧ_ОТИЗ_Sing1", "$НАЧ_ОТИЗ_Date", "Начальник ОТиЗ",техпроцесс);
  
          Signature("$НАЧ_ОВКиК","$НАЧ_ОВКиК_Sing", "$НАЧ_ОВКиК_Date", "Начальник ОВКиК",техпроцесс);
  
          Signature("$НАЧ_ПЭО","$НАЧ_ПЭО_Sing", "$НАЧ_ПЭО_Date", "Начальник ПЭО",техпроцесс);
          

    
        }
          /*  
        Подпись подпись_разраб = техпроцесс.Подписи["Разраб."];
        Переменная["$Razrab_FIO"]=подпись_разраб.Пользователь["Короткое имя"].ToString();
        Переменная["$Razrab_Sign"]=подпись_разраб.Пользователь["Изображение подписи"].ToString();
        
        var подпись_пров = техпроцесс.Подписи["Пров."];
        Переменная["$Prov_FIO"]=подпись_пров.Пользователь["Короткое имя"].ToString();
        Переменная["$Prov_Sign"]=подпись_пров.Пользователь["Изображение подписи"].ToString();
     
        var подпись_нконтр = техпроцесс.Подписи["Н. контр."];
        Переменная["$NKontr_FIO"]=подпись_нконтр.Пользователь["Короткое имя"].ToString();
        Переменная["$NKontr_Sign"]=подпись_нконтр.Пользователь["Изображение подписи"].ToString();
     if (техпроцесс.Подписи["Т. контр."]!=null)
     	{
        var подпись_тконтр = техпроцесс.Подписи["Т. контр."];
        Переменная["$TKontr_FIO"]=подпись_тконтр.Пользователь["Короткое имя"].ToString();
        Переменная["$TKontr_Sign"]=подпись_тконтр.Пользователь["Изображение подписи"].ToString();
       }
        var подпись_утв = техпроцесс.Подписи["Утв."];
        Переменная["$Utv_FIO"]=подпись_утв.Пользователь["Короткое имя"].ToString();
        Переменная["$Utv_Sign"]=подпись_утв.Пользователь["Изображение подписи"].ToString();
        
         */
      // {$Utv_Sign}
       
      //  {$Prov_Sign}
        
     //Пров.
     
   // {$TKontr_Sign}
   // {$NKontr_Sign}
   // {$Utv_Sign}
     
        //Переменная["$Razrab_Date"]=подпись.ДатаПодписи.ToString();
        //Переменная["$Proveril_FIO"]="1"+подпись.Пользователь["Короткое имя"].ToString();
        //Переменная["$Sing"]=
        //ImageParameter Sign= подпись.Пользователь["Изображение подписи"];
     //   System.Windows.Forms.MessageBox.Show(подпись.Пользователь["Короткое имя"].ToString());
     //   System.Windows.Forms.MessageBox.Show(подпись.Пользователь["Изображение подписи"].GetType().ToString(),"test");
        //подпись.Пользователь["Изображение подписи"].Тип.ToString();
        
        
        var ДСЕ = техпроцесс.СвязанныйОбъект["Изготавливаемая ДСЕ"];
        if (ДСЕ != null)			//Если список не пустой, т.е. такие объекты найдены
        {
        	 if (ДСЕ.РодительскиеОбъекты!=null)
                Переменная["$graph_28"] = "Изделие   "+Parent(ДСЕ)["Наименование"] +"  Обозначение изделия "+Parent(ДСЕ)["Обозначение"].ToString() ;

            Переменная["$graph_02"] = ДСЕ["Обозначение"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = ДСЕ["Наименование"];
        }
        else	//Получаем данные с техпроцесса
        {
            Переменная["$graph_02"] = техпроцесс["Обозначение"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = техпроцесс["Наименование"];
        }
        
        //Аналогично для материала
        /*Материал[] списокМатериалов = техпроцесс.Материалы;
        if (списокМатериалов.Length > 0)
        {
            var материал = списокМатериалов.First();
            Переменная["$graph_07"] = материал.ЕН.ToString();
        }*/

        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        //Переменная["$graph_02"] = дсе.Параметр["Обозначение"];  				уже заполнена
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = техпроцесс.КомплектСсылочнойТД;
        //Переменная["$graph_05"] = техпроцесс.Литера;
        //Переменная["$graph_06"] = дсе.Параметр["Наименование"];  				уже заполнена
        //Переменная["$graph_07"] = материал.Параметр["Единицы нормирования"];  уже заполнена
        
        /*
        Переменная["$graph_08"] = "";
        Переменная["$graph_09"] = "";
        
        Переменная["$graph_10"] = "";
        Переменная["$graph_11"] = "";
        Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
       
        Переменная["$graph_29"] = "";
        */
   
        //Переменная["$graph_30"] = техпроцесс.КомплектТД;
        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //Переменная["$graph_33"] = "МК";
        Переменная["$graph_34"] = "";
        Переменная["$graph_35"] = "";
       // Переменная["$graph_36"] = техпроцесс.Параметр["Версия"];
        //Переменная["$graph_37"] = "";
        

        var data1 = DateTime.Now;
        Переменная["$Years"]=DateTime.Now.Year.ToString();
      /*
        String user = (НайтиОбъект("Группы и пользователи","[Сокращённое название] = 'ОВКиК'")).СвязанныйОбъект["Руководитель"]["Короткое имя"].ToString();
       
        Переменная["$НАЧ_ОВКиК"] = user!=null?user:"";
        user= НайтиОбъект("Группы и пользователи","[Сокращённое название] = 'ПЭО'").СвязанныйОбъект["Руководитель"]["Короткое имя"].ToString();
        Переменная["$НАЧ_ПЭО"] = user!=null?user:"";
        user= НайтиОбъект("Группы и пользователи","[Сокращённое название] = 'ОТиЗ'").СвязанныйОбъект["Руководитель"]["Короткое имя"].ToString();
        Переменная["$НАЧ_ОТИЗ"] =  user!=null?user:"";
        user= НайтиОбъект("Группы и пользователи","[Сокращённое название] = 'ОГТ'").СвязанныйОбъект["Руководитель"]["Короткое имя"].ToString();
        Переменная["$НАЧ_ОГТ"] = user!=null?user:"";
     */   
    }
    //==========================================================================================================================//
    
    
    
        public void ЗаполнитьОсновныеНадписи(Объект техпроцесс)
    {
   //     System.Diagnostics.Debugger.Launch();
   // 	System.Diagnostics.Debugger.Break();
        	
        	
        	
    //	System.Windows.Forms.MessageBox.Show("ЗаполнитьОсновныеНадписи(Объект техпроцесс)");
        //Находим все ДСЕ связанные с ТП
  //      System.Windows.Forms.MessageBox.Show("RAZRAB"+Переменная["$Razrab_FIO1"]);
  //      System.Windows.Forms.MessageBox.Show("Sing"+Переменная["$R_Sing"]);
        //Переменная["$Razrab_Sign"]="";
        
        //System.Windows.Forms.MessageBox.Show(техпроцесс.Подписи.Count.ToString());
      //{$Razrab_FIO1}
       //   Signature("$Razrab_FIO1","$Rsing", "$Razrab_Date1", "Разраб.",техпроцесс);
        
      //  System.Windows.Forms.MessageBox.Show("RAZRAB"+Переменная["$Razrab_FIO1"]);
      //  System.Windows.Forms.MessageBox.Show("Sing"+Переменная["$R_Sing"]);
      
      //{$Razrab_Date} {$Prov_Date}
     
          /*  
        Подпись подпись_разраб = техпроцесс.Подписи["Разраб."];
        Переменная["$Razrab_FIO"]=подпись_разраб.Пользователь["Короткое имя"].ToString();
        Переменная["$Razrab_Sign"]=подпись_разраб.Пользователь["Изображение подписи"].ToString();
        
        var подпись_пров = техпроцесс.Подписи["Пров."];
        Переменная["$Prov_FIO"]=подпись_пров.Пользователь["Короткое имя"].ToString();
        Переменная["$Prov_Sign"]=подпись_пров.Пользователь["Изображение подписи"].ToString();
     
        var подпись_нконтр = техпроцесс.Подписи["Н. контр."];
        Переменная["$NKontr_FIO"]=подпись_нконтр.Пользователь["Короткое имя"].ToString();
        Переменная["$NKontr_Sign"]=подпись_нконтр.Пользователь["Изображение подписи"].ToString();
     if (техпроцесс.Подписи["Т. контр."]!=null)
     	{
        var подпись_тконтр = техпроцесс.Подписи["Т. контр."];
        Переменная["$TKontr_FIO"]=подпись_тконтр.Пользователь["Короткое имя"].ToString();
        Переменная["$TKontr_Sign"]=подпись_тконтр.Пользователь["Изображение подписи"].ToString();
       }
        var подпись_утв = техпроцесс.Подписи["Утв."];
        Переменная["$Utv_FIO"]=подпись_утв.Пользователь["Короткое имя"].ToString();
        Переменная["$Utv_Sign"]=подпись_утв.Пользователь["Изображение подписи"].ToString();
        
         */
      // {$Utv_Sign}
       
      //  {$Prov_Sign}
        
     //Пров.
     
   // {$TKontr_Sign}
   // {$NKontr_Sign}
   // {$Utv_Sign}
     
        //Переменная["$Razrab_Date"]=подпись.ДатаПодписи.ToString();
        //Переменная["$Proveril_FIO"]="1"+подпись.Пользователь["Короткое имя"].ToString();
        //Переменная["$Sing"]=
        //ImageParameter Sign= подпись.Пользователь["Изображение подписи"];
     //   System.Windows.Forms.MessageBox.Show(подпись.Пользователь["Короткое имя"].ToString());
     //   System.Windows.Forms.MessageBox.Show(подпись.Пользователь["Изображение подписи"].GetType().ToString(),"test");
        //подпись.Пользователь["Изображение подписи"].Тип.ToString();
        
        
        var ДСЕ = техпроцесс.СвязанныйОбъект["Изготавливаемая ДСЕ"];
        if (ДСЕ != null)			//Если список не пустой, т.е. такие объекты найдены
        {
        	 if (ДСЕ.РодительскиеОбъекты!=null)
                Переменная["$graph_28"] = "Изделие   "+Parent(ДСЕ)["Наименование"] +"  Обозначение изделия "+Parent(ДСЕ)["Обозначение"].ToString() ;

            Переменная["$graph_02"] = ДСЕ["Обозначение"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = ДСЕ["Наименование"];
        }
        else	//Получаем данные с техпроцесса
        {
            Переменная["$graph_02"] = техпроцесс["Обозначение"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = техпроцесс["Наименование"];
        }
        
        //Аналогично для материала
        /*Материал[] списокМатериалов = техпроцесс.Материалы;
        if (списокМатериалов.Length > 0)
        {
            var материал = списокМатериалов.First();
            Переменная["$graph_07"] = материал.ЕН.ToString();
        }*/

        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        //Переменная["$graph_02"] = дсе.Параметр["Обозначение"];  				уже заполнена
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = техпроцесс.КомплектСсылочнойТД;
        //Переменная["$graph_05"] = техпроцесс.Литера;
        //Переменная["$graph_06"] = дсе.Параметр["Наименование"];  				уже заполнена
        //Переменная["$graph_07"] = материал.Параметр["Единицы нормирования"];  уже заполнена
        
        /*
        Переменная["$graph_08"] = "";
        Переменная["$graph_09"] = "";
        
        Переменная["$graph_10"] = "";
        Переменная["$graph_11"] = "";
        Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
       
        Переменная["$graph_29"] = "";
        */
   
        //Переменная["$graph_30"] = техпроцесс.КомплектТД;
        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //Переменная["$graph_33"] = "МК";
        Переменная["$graph_34"] = "";
        Переменная["$graph_35"] = "";
       // Переменная["$graph_36"] = техпроцесс.Параметр["Версия"];
        //Переменная["$graph_37"] = "";
    }
    //==========================================================================================================================//
    
    
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных ОСНОВНЫЕ НАДПИСИ применительно к Операции
    //см. ГОСТ 3.1103-2011 ЕСТД. Основные надписи. Общие положения
    /****************************************************************************************************************************/
    public void ЗаполнитьОсновныеНадписи(Операция операция,bool sign=false)
    {
    	
  //  	System.Diagnostics.Debugger.Launch();
  //  	System.Diagnostics.Debugger.Break();
   // 	Message("","");
        //Находим все ДСЕ связанные с ТП
        //ТехнологическийПроцесс техпроцесс = операция.ТехнологическийПроцесс; 
        Объект техпроцесс = операция.РодительскийОбъект.РодительскийОбъект;
        var ДСЕ = техпроцесс.СвязанныйОбъект["Изготавливаемая ДСЕ"];
        
        if (ДСЕ != null)
        {
        	Переменная["$graph_02"] = ДСЕ["Обозначение"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = ДСЕ["Наименование"];
        }
        else	//Получаем данные с техпроцесса
        {
            Переменная["$graph_02"] = техпроцесс["3c226ef8-b729-42ac-bbbe-5347f4861b79"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = техпроцесс["Наименование"];
        }
        
       //*
        
        
         if (sign)
      	{
          Signature("$Razrab_FIO","$Razrab_Sign", "$Razrab_Date", "Разраб.",техпроцесс);
          Signature("$Prov_FIO","$Prov_Sign", "$Prov_Date", "Пров.",техпроцесс);
          Signature("$NKontr_FIO","$NKontr_Sign", "$NKontr_Date", "Н. контр.",техпроцесс);
          Signature("$TKontr_FIO","$TKontr_Sign", "$TKontr_Date", "Т. контр.",техпроцесс);
          Signature("$Utv_FIO","$Utv_Sign", "$Utv_Date", "Утв.",техпроцесс);
          Signatures("$chief_FIO","$chief_Sign", "$chief_Date", "Начальник цеха",техпроцесс);
          Signature("$main_BTK","$main_BTK_Sing", "$main_BTK_Date", "Начальник БТК",техпроцесс);
        //  Signature("$НАЧ_ОГТ","$chief_technolog_Sing", "$chief_OGT_Date", "Главный технолог",техпроцесс);
    
        }
        
       // */
       
       
        //Аналогично для материала
        /*Материал[] списокМатериалов = техпроцесс.Материалы;
        if (списокМатериалов.Length > 0)
        {
            var материал = списокМатериалов.First();
            Переменная["$graph_07"] = материал.ЕН.ToString();
        }*/
        
        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        //Переменная["$graph_02"] = дсе.Параметр["Обозначение"];  				уже заполнена
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = техпроцесс.КомплектСсылочнойТД;
        //Переменная["$graph_05"] = техпроцесс.Литера;
        //Переменная["$graph_06"] = дсе.Параметр["Наименование"];  				уже заполнена
        //Переменная["$graph_07"] = материал.Параметр["Единицы нормирования"];  уже заполнена
        
      //  Переменная["$graph_08"] = операция.Номер + операция.Индекс;
        
        //Производственные подразделения
        Объекты ЦехУчастокРМ = ВыполнитьМакрос(Макрос_Теги, "ПолучитьПроизводственныеПодразделения", операция);
        string tip;
        foreach (Объект подразделение in ЦехУчастокРМ)
        {
            tip = подразделение.Тип;
            switch (tip)
            {
                case "Цех":
                    Переменная["$graph_11"] = подразделение.Параметр["Номер"];
                    break;
                case "Участок":
                    Переменная["$graph_10"] = подразделение.Параметр["Номер"];
                    break;
                case "Рабочее место":	
                    Переменная["$graph_09"] = подразделение.Параметр["Номер"];
                    break;
            }
        }
        
        /* Для случая, когда в карту выводится только код рабочего места (в списке подразделений указываем всего 1 объект)
        if (списокПроизводственныхПодразделений.Count > 0)
        {
            Объект рабочееМесто = списокПроизводственныхПодразделений.First();
            Переменная["$graph_09_kod"] = рабочееМесто.Параметр["Код"];
        }
        */
    
        //Переменная["$graph_09"] = "";		уже заполнена
        
        //Переменная["$graph_10"] = "";		уже заполнена
        //Переменная["$graph_11"] = "";		уже заполнена
        
        /*
        Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
        Переменная["$graph_28"] = "";
        Переменная["$graph_29"] = "";
        */

        //Переменная["$graph_30"] = техпроцесс.КомплектТД;
        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //P.S. Возможно к указанным выражениям нужно будет добавить единичку
        //Переменная["$graph_33"] = "ОК";
        //Переменная["$graph_34"] = "";
        //Переменная["$graph_35"] = "";
        Переменная["$graph_36"] = операция.Параметр["Версия"]; //версия Операции
        //Переменная["$graph_36"] = Параметр["[Владелец].[Версия]"]; //версия ТП
        //Переменная["$graph_37"] = "";
    }
    //==========================================================================================================================//
    
    public void ЗаполнитьОсновныеНадписи1(Операция операция)
    {
        //Находим все ДСЕ связанные с ТП
        //ТехнологическийПроцесс техпроцесс = операция.ТехнологическийПроцесс; 
        Объект техпроцесс = операция.РодительскийОбъект.РодительскийОбъект;
        var ДСЕ = техпроцесс.СвязанныйОбъект["Изготавливаемая ДСЕ"];
        
        if (ДСЕ != null)
        {
        	Переменная["$graph_02"] = ДСЕ["Обозначение"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = ДСЕ["Наименование"];
        }
        else	//Получаем данные с техпроцесса
        {
            Переменная["$graph_02"] = техпроцесс["3c226ef8-b729-42ac-bbbe-5347f4861b79"];		//и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = техпроцесс["Наименование"];
        }
        
        //Аналогично для материала
        /*Материал[] списокМатериалов = техпроцесс.Материалы;
        if (списокМатериалов.Length > 0)
        {
            var материал = списокМатериалов.First();
            Переменная["$graph_07"] = материал.ЕН.ToString();
        }*/
        
        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        //Переменная["$graph_02"] = дсе.Параметр["Обозначение"];  				уже заполнена
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = техпроцесс.КомплектСсылочнойТД;
        //Переменная["$graph_05"] = техпроцесс.Литера;
        //Переменная["$graph_06"] = дсе.Параметр["Наименование"];  				уже заполнена
        //Переменная["$graph_07"] = материал.Параметр["Единицы нормирования"];  уже заполнена
        
     //   Переменная["$graph_08"] = операция.Номер + операция.Индекс;
        
        //Производственные подразделения
        Объекты ЦехУчастокРМ = ВыполнитьМакрос(Макрос_Теги, "ПолучитьПроизводственныеПодразделения", операция);
        string tip;
        foreach (Объект подразделение in ЦехУчастокРМ)
        {
            tip = подразделение.Тип;
            switch (tip)
            {
                case "Цех":
                    Переменная["$graph_11"] = подразделение.Параметр["Номер"];
                    break;
                case "Участок":
                    Переменная["$graph_10"] = подразделение.Параметр["Номер"];
                    break;
                case "Рабочее место":	
                    Переменная["$graph_09"] = подразделение.Параметр["Номер"];
                    break;
            }
        }
        
        /* Для случая, когда в карту выводится только код рабочего места (в списке подразделений указываем всего 1 объект)
        if (списокПроизводственныхПодразделений.Count > 0)
        {
            Объект рабочееМесто = списокПроизводственныхПодразделений.First();
            Переменная["$graph_09_kod"] = рабочееМесто.Параметр["Код"];
        }
        */
    
        //Переменная["$graph_09"] = "";		уже заполнена
        
        //Переменная["$graph_10"] = "";		уже заполнена
        //Переменная["$graph_11"] = "";		уже заполнена
        
        /*
        Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
        Переменная["$graph_28"] = "";
        Переменная["$graph_29"] = "";
        */

        //Переменная["$graph_30"] = техпроцесс.КомплектТД;
        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //P.S. Возможно к указанным выражениям нужно будет добавить единичку
        //Переменная["$graph_33"] = "ОК";
        //Переменная["$graph_34"] = "";
        //Переменная["$graph_35"] = "";
        Переменная["$graph_36"] = операция.Параметр["Версия"]; //версия Операции
        //Переменная["$graph_36"] = Параметр["[Владелец].[Версия]"]; //версия ТП
        //Переменная["$graph_37"] = "";
    }
    //==========================================================================================================================//
    

    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных ОСНОВНЫЕ НАДПИСИ применительно к Объекту номенклатуры
    //см. ГОСТ 3.1103-2011 ЕСТД. Основные надписи. Общие положения
    /****************************************************************************************************************************/
    public void ЗаполнитьОсновныеНадписиНаИзделие()
    {
        //Находим все ДСЕ связанные с ТП
        Объект изделие = ТекущийОбъект;
        
        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        Переменная["$graph_02"] = изделие.Параметр["Обозначение"];
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = обозначение документа по ГОСТ 3.1201;
        //Переменная["$graph_05"] = литера, присвоенная документу;
        Переменная["$graph_06"] = изделие.Параметр["Наименование"];
        //Переменная["$graph_07"] = общая единица нормирования для всего техпроцесса (устанавливается требованием организации);
        
		/*
        Переменная["$graph_08"] = "";
        Переменная["$graph_09"] = "";
        
        Переменная["$graph_10"] = "";
        Переменная["$graph_11"] = "";
		Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
        Переменная["$graph_28"] = "";
        Переменная["$graph_29"] = "";
        */

        //Переменная["$graph_30"] = КомплектТД;
        
        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //Переменная["$graph_33"] = "ОК";
        //Переменная["$graph_34"] = "";
        //Переменная["$graph_35"] = "";
        Переменная["$graph_36"] = изделие.Параметр["Версия"]; //версия изделия
        //Переменная["$graph_37"] = "";
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных уникальные данные применительно к Операции
    //Список используемых переменных зависит от формируемой карты
    /****************************************************************************************************************************/
    public void Переменные(Операция операция)
    {
    	System.Diagnostics.Debugger.Launch();
              	System.Diagnostics.Debugger.Break();
        /* Список доступных переменных
        $Операция				Наименование операции
        $Материал				Код / обозначение материала
        $МД						Масса детали по КД
        $ИОТ					Обозначения всех инструкций на операцию
        $Тшт					Штучное время
        $Тпз					Подготовительно-заключительное время
        $Оборудование			Список оборудования операции
        $ЕВ						ЕИ для нормы расхода
        $КОИД					Количество одновременно изготавливаемых деталей
        $МЗ						Норма расхода
        $ОбозначениеПрограммы	Программа ЧПУ
        $ПрофильИРазмеры		Профиль и размеры заготовки
        $СОЖ					Наименование используемой в операции СОЖ
        $Твердость				Твёрдость материала
        $То						Сумма основных времён по переходам операции
        $Тв						Сумма вспомогательных времён по переходам операции
        */
		string[] names = {"$Операция", "$Материал", "$МД", "$ИОТ", "$Тшт", "$Тпз", "$Оборудование", "$ЕВ", "$КОИД", 
					       	"$МЗ", "$ОбозначениеПрограммы", "$ПрофильИРазмеры",	"$СОЖ", "$Твердость", "$То", "$Тв"};
		
		ТехнологическийПроцесс техпроцесс = операция.ТехнологическийПроцесс;
        
        Объект материалОперации = null;
        Материал материал = null;
        Материал[] материалы = операция.Материалы;
        if (материалы.Length > 0)
        	материал = материалы[0];
        if (материал != null)
        	материалОперации = материал.СвязанныйОбъект["Материал"];
        
        Объект дсеТП = техпроцесс.ИзготавливаемыеДСЕ.FirstOrDefault();
        
        string result = ""; //вспомогательная переменная - в ней формируется значение, которое запишется в переменную
        string temp = "";   //вспомогательная переменная для расчётов

        foreach (string name in names)
        {
            //MessageBox.Show(name);
            switch (name)
            {
                //Наименование операции
                case "$Операция": 
                {
                    Переменная["$Операция"] = операция.Наименование;
                    break;
                }
                //Код / обозначение материала
                case "$Материал":
                {
                    Переменная["$Материал"] = материалОперации != null ? материалОперации.Параметр["Код / обозначение"].ToString() : "";
                    break;
                }
                //Масса детали по КД
                case "$МД":
                {
                    if (дсеТП != null)
                    {
                        string md = дсеТП.Параметр["Масса"].ToString();
                        if (md != "0")
                            Переменная["$МД"] = дсеТП != null ? дсеТП.Параметр["Масса"].ToString() : "";
                    }
                    break;
                }
                //Обозначения всех инструкций на операцию	
                case "$ИОТ":
                {
                    result = "";
                    ObjectAccessor[] arr = операция.Инструкции.ToArray<ObjectAccessor>();
                	Объекты списокИнструкций = ПолучитьОбъектыПоСвязи(arr, "Инструкция из справочника");
                    //Объекты списокИнструкций = ТекущийОбъект.СвязанныеОбъекты["[Инструкции для операции].[Инструкция из справочника]"];
                    foreach (var инструкция in списокИнструкций)
                        if (инструкция.Параметр["Шифр / обозначение"].ToString() != "")
                            result = result + инструкция.Параметр["Шифр / обозначение"].ToString() + "; ";
                    if (result != "")
                        Переменная["$ИОТ"] = result.Substring(0, result.Length - 2);
                    break;
                }
                //Штучное время
				case "$Тшт":
                {
                	if (операция.Тшт != 0)
                		Переменная["$Тшт"] = string.Format(format2, операция.Тшт);
                	break;
                }
                //Подготовительно-заключительное время
                case "$Тпз":
                {
                	if (операция.Тпз != 0)
                    	Переменная["$Тпз"] = string.Format(format2, операция.Тпз);
                    break;
                }
                //Список оборудования операции
                case "$Оборудование":
                {
                	ObjectAccessor[] arr = операция.Оснащение.ToArray<ObjectAccessor>();
                	Объекты списокОснащения = ПолучитьОбъектыПоСвязи(arr, "Оснащение из справочника СТО");
                	
                    result = "";
                    //Объекты списокОснащения = ТекущийОбъект.СвязанныеОбъекты["[Оснащение операции].[Оснащение из справочника СТО]"];
                    foreach(var оснащение in списокОснащения)
                        if (оснащение.Тип.ПорожденОт("Оборудование"))
                            result = result + оснащение.Параметр["Обозначение"].ToString() + " " + оснащение.Параметр["Наименование"].ToString() + "; ";	
                    if (result != "")
                        Переменная["$Оборудование"] = result.Substring(0,result.Length - 2);
                    break;
                }
                //ЕИ для нормы расхода
                case "$ЕВ":
                {
                	if (материал != null)
                	{
                		Объект еиНрасх = материал.ЕиНормыРасхода;
                		if (еиНрасх != null)
                    		Переменная["$ЕВ"] = еиНрасх.Параметр["Сокращённое наименование"];
                	}
                    break;
                }
                //Количество одновременно изготавливаемых деталей
                case "$КОИД":
                {
                    Переменная["$КОИД"] = операция.КОИД.ToString();
                    //Переменная["$КОИД"] = Параметр["Количество одновременно изготавливаемых деталей"];
                    break;
                }
                //Норма расхода
                case "$МЗ":
                {
                	double нормаРасхода = материал != null ? материал.НормаРасхода : 0;
                    Переменная["$МЗ"] = нормаРасхода > 0 ? нормаРасхода.ToString() : "";
                    break;
                }
                //Программа ЧПУ
                case "$ОбозначениеПрограммы":
                {
                    Переменная["$ОбозначениеПрограммы"] = операция.ПрограммаЧПУ;
                    //Переменная["$ОбозначениеПрограммы"] = Параметр["Программа ЧПУ"];
                    break;
                }
                //Профиль и размеры заготовки
                case "$ПрофильИРазмеры":
                {
                    Переменная["$ПрофильИРазмеры"] = материалОперации != null ? материалОперации.Параметр["[Сортамент]->[Наименование]"].ToString() + " " + материалОперации.Параметр["[Сортамент]->[Обозначение]"].ToString() : "";
                    break;
                }
                //Наименование используемой в операции СОЖ
                case "$СОЖ":
                {
                    result = "";
                    ObjectAccessor[] arr = операция.Оснащение.ToArray<ObjectAccessor>();
                	Объекты списокОснащения = ПолучитьОбъектыПоСвязи(arr, "Оснащение из справочника СТО");
                    //Объекты списокОснащения = ТекущийОбъект.СвязанныеОбъекты["[Оснащение операции].[Оснащение из справочника СТО]"];
                    foreach (var оснащениеСТО in списокОснащения)
                    {
                    	//Оснащение 14
                    	if (оснащениеСТО.Тип.ПорожденОт("bb4a1b1a-9ec6-431e-ae09-fb8f52120c9e"))
                        {
                    		//Оснащение из каталога
                    		Объект оснащениеИзКаталога = оснащениеСТО.СвязанныйОбъект["1d11f626-ee27-4759-9c63-8e948daea49a"];
                    		if (оснащениеИзКаталога.Тип.ПорожденОт("Смазочно-охлаждающая жидкость"))
                    	    {
                    			result = оснащениеСТО.Параметр["Наименование"];
                    			break;
                    		}
                    	}
                    	//Оснащение 2012 и ранее
                    	else if (оснащениеСТО.Тип.ПорожденОт("96f5e5b9-e2ab-4979-954e-6db616199fa4"))
                    	{
                            if (оснащениеСТО.Тип == "Смазывающие и охлаждающие жидкости (СОЖ)")
                            {
                                result = оснащениеСТО.Параметр["Наименование"];
                                break;
                            }
                        }
                    }
                    
                    if (result != "")
                        Переменная["$СОЖ"] = result;
                    else
                        Переменная["$СОЖ"] = "--";
                    break;
                }
                //Твёрдость материала
                case "$Твердость":
                {
                    double hardness = 0;
                    result = "--";	//если твёрдость не указана, вернётся прочерк
                    if (материалОперации != null)
                    {
                        //по Бринеллю
                        hardness = материалОперации.Параметр["Твёрдость по Бринеллю"];
                        if (hardness != 0)
                            result = hardness.ToString() + " HB";
                        else
                        {
                            //по Роквеллу
                            hardness = материалОперации.Параметр["Твёрдость по Роквеллу"];
                            if (hardness != 0)
                                result = hardness.ToString() + " HR";
                            //по Виккерсу
                            else
                            {
                                hardness = материалОперации.Параметр["Твёрдость по Виккерсу"];
                                if (hardness != 0)
                                    result = hardness.ToString() + " HV";
                            }
                        }
                    }
                    Переменная["$Твердость"] = result;
                    break;
                }
                //Сумма основных времён по переходам операции
                case "$То":
                {
                    double sumTo = 0;
                    temp = "";
                    foreach (var переход in операция.Переходы)
                    {
                        temp = переход.То.ToString();
                        if (temp == "")
                            temp = "0";
                        sumTo = sumTo + Convert.ToDouble(temp);
                    }
                    if (sumTo != 0)
                        Переменная["$То"] = sumTo.ToString(format);
                    break;
                }
                //Сумма вспомогательных времён по переходам операции
                case "$Тв":
                {
                    double sumTv = 0;
                    temp = "";
                    foreach (var переход in операция.Переходы)
                    {
                        temp = переход.Тв.ToString();
                        if (temp == "")
                            temp = "0";
                        sumTv = sumTv + Convert.ToDouble(temp);
                    }
                    if (sumTv != 0)
                        Переменная["$Тв"] = sumTv.ToString(format);
                    break;
                }
                //Если ошиблись в имени переменной
                default:
                {
                    System.Windows.Forms.MessageBox.Show("Не найдена функция обработки переменной '" + name + "'\nУбедитесь в корректности её написания");
                    break;
                }
            }
        }     
    }
    //==========================================================================================================================//
    


    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных уникальные данные применительно к Операции
    //Список используемых переменных зависит от формируемой карты
    /****************************************************************************************************************************/
    public void Переменные(Объект техпроцесс)
    	
    {
    	 //   	System.Diagnostics.Debugger.Launch();
         //     	System.Diagnostics.Debugger.Break();
    //	System.Windows.Forms.MessageBox.Show("Переменные(ТехнологическийПроцесс техпроцесс) __");
    	
    	/* Список доступных переменных
        $M01					Сводное наименование материала
        $КодМатериала			Код / обозначение материала
        $ЕВ						ЕИ для нормы расхода
        $МД						Масса детали по КД
        $ЕН						Единица нормирования
        $Нрасх					Норма расхода
        $КИМ					Коэффициент использования материала
        $КодЗагот				Код заготовки / вид заготовки (отливки, прокат, поковки)
        $ПрофильИРазмеры		Профиль и размеры заготовки		
        $КД						Количество деталей, изготавливаемых из одной заготовки			
        $МЗ						Масса заготовки
        */
       
        Объект дсеТП = техпроцесс.СвязанныйОбъект["Изготавливаемая ДСЕ"];
        //string tpinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", техпроцесс);	
        var материалы = техпроцесс.СвязанныеОбъекты["8f505469-c1b4-4caf-a7c1-3bc7ea8c2bbe"];
        
        double МД = техпроцесс["Масса"];
        
        int количествоМатериалов = материалы.Count;
     //   System.Windows.Forms.MessageBox.Show(материалы.Count.ToString());
        if (количествоМатериалов > 0)
        {     
        	
            string M01 = "";
            string ЕВ = "";
            string ЕН = "";
            string Нрасх = "";
            string КИМ = "";
            string КД = "";
            string КодМатериала = "";
            string ПрофильИРазмеры = "";
            string МЗ = "";
            
            Объект материал = материалы.FirstOrDefault(t => t["Основной"]);
            if (материал!=null)
            	{
            string M011 = "";
            string ЕВ1 = "";
            string ЕН1= "";
            string Нрасх1 = "";
            string КИМ1 = "";
            string КД1 = "";
            string КодМатериала1 = "";
            string ПрофильИРазмеры1 = "";
            string МЗ1 = "";
                                        
            //Формирование данных
            M011 = материал["Наименование"].ToString();
            Объект еиНрасх = материал.СвязанныйОбъект["ЕИ количества"];
            if (еиНрасх != null)
            	ЕВ1 = еиНрасх["Сокращённое наименование"].ToString();
            else
            	ЕВ1 = "кг";
			
                                                            //ЕН1 = материал.ЕН.ToString();
            Нрасх1 = материал["Норма расхода"].ToString();					
            КИМ1 = материал["КИМ"].ToString();				
            //Переменная["$КодЗагот"] = материалИзСправочника.Параметр["Сводное наименование"];							
            КД1 = материал["КОИД"].ToString();							
            МЗ1 = материал["Масса заготовки"].ToString();
            
            КодМатериала1 = материал["Тип заготовки"].ToString();
            ПрофильИРазмеры1 = материал["Размеры"].ToString();
            //MessageBox.Show(материал["Наименование"].ToString());
            //Вывод данных в отчёт через переменные
            Переменная["$M01"] = M011.ToString();
            Переменная["$ЕВ"] = ЕВ1.ToString();						
            Переменная["$ЕН"] = ЕН1.ToString();				
            Переменная["$Нрасх"] = Нрасх1.ToString();					
            Переменная["$КИМ"] = КИМ1.ToString();	
            Переменная["$КодЗагот"] = КодМатериала1.ToString();							
            Переменная["$КД"] = КД1.ToString();							
            Переменная["$МЗ"] = МЗ1.ToString();					
            //Переменная["$КодМатериала"] = КодМатериала1.ToString();							
            Переменная["$ПрофильИРазмеры"] = ПрофильИРазмеры1.ToString();
                }
        }
        if (МД > 0)
            Переменная["$МД"] = МД.ToString();	
    }
    	
    public void Переменные(ТехнологическийПроцесс техпроцесс)	
    {
    	
        /* Список доступных переменных
        $M01					Сводное наименование материала
        $КодМатериала			Код / обозначение материала
        $ЕВ						ЕИ для нормы расхода
        $МД						Масса детали по КД
        $ЕН						Единица нормирования
        $Нрасх					Норма расхода
        $КИМ					Коэффициент использования материала
        $КодЗагот				Код заготовки / вид заготовки (отливки, прокат, поковки)
        $ПрофильИРазмеры		Профиль и размеры заготовки		
        $КД						Количество деталей, изготавливаемых из одной заготовки			
        $МЗ						Масса заготовки
        */
        
        Объект дсеТП = техпроцесс.ИзготавливаемыеДСЕ.FirstOrDefault();
        string tpinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", техпроцесс);	
        Материал[] материалы = техпроцесс.Материалы;
        string errors = "";
        
        double МД = техпроцесс["Масса изготавливаемой детали"];
        
        int количествоМатериалов = материалы.Length;
        if (количествоМатериалов > 0)
        {
            //Проверка на количество материалов
            if (количествоМатериалов > 1)
            {
                ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Для техпроцесса '" + tpinfo + "' указано " 
                            + количествоМатериалов.ToString() + " материала(ов).");				
            }
            
            string M01 = "";
            string ЕВ = "";
            string ЕН = "";
            string Нрасх = "";
            string КИМ = "";
            string КД = "";
            string КодМатериала = "";
            string ПрофильИРазмеры = "";
            string МЗ = "";
            
            bool естьЗамечания;
            
            Материал материал = материалы[0];
            //foreach (var материал in материалы) - остальные материалы вынесены в содержание карты
            {
                string M011 = "";
                string ЕВ1 = "";
                string ЕН1= "";
                string Нрасх1 = "";
                string КИМ1 = "";
                string КД1 = "";
                string КодМатериала1 = "";
                string ПрофильИРазмеры1 = "";
                string МЗ1 = "";
                
                естьЗамечания = false;
                
                Объект материалИзСправочника = материал.СвязанныйОбъект["Материал"];
                
                //Формирование данных
                M011 = материал.Наименование;
                Объект еиНрасх = материал.ЕиНормыРасхода;
                if (еиНрасх != null)
                	ЕВ1 = еиНрасх.Параметр["Сокращённое наименование"];
                else
                	ЕВ1 = "";
				
                ЕН1 = материал.ЕН.ToString();				
                Нрасх1 = материал.НормаРасхода.ToString();					
                КИМ1 = материал.КИМ.ToString();				
                //Переменная["$КодЗагот"] = материалИзСправочника.Параметр["Сводное наименование"];							
                КД1 = материал.КД.ToString();							
                МЗ1 = материал.МассаЗаготовки.ToString();
                if (материалИзСправочника != null) //Данные по материалу из справочника материалов
                {
                    КодМатериала1 = материалИзСправочника.Параметр["Код / обозначение"];							
                    ПрофильИРазмеры1 = материалИзСправочника.Параметр["[Сортамент]->[Наименование]"]
                                                     + " " + материалИзСправочника.Параметр["[Сортамент]->[Обозначение]"];							
                }
                else	//Данные из списка объектов Материалы (техпроцесса)
                {
                    ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Для техпроцесса '" + tpinfo + "' не указана связь между материалом техпроцесса '"
                            + M011 + "' и материалом из справочника материалов."); 
                    string r1 = материал.ДлинаЗаготовки.ToString();
                    string r2 = материал.ШиринаЗаготовки.ToString();
                    if ((r1 != "") && (r1 != "0"))
                    {
                        if ((r2 != "") && (r2 != "0"))
                            ПрофильИРазмеры1 = r1 + "x" + r2;
                        else
                            ПрофильИРазмеры1 = r1;
                    }
                    else
                        if ((r2 != "") && (r2 != "0"))
                            ПрофильИРазмеры1 = r2;
                }
                
                //Добавление данных 
                ДополнитьДанные(ref M01, M011, "; ", ref естьЗамечания);
                ДополнитьДанные(ref ЕВ, ЕВ1, "; ", ref естьЗамечания);
                
                ДополнитьДанные(ref ЕН, ЕН1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref Нрасх, Нрасх1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref КИМ, КИМ1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref КД, КД1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref МЗ, МЗ1, "; ", ref естьЗамечания);
                
                if (естьЗамечания)	
                    ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Для техпроцесса '" + tpinfo + "' по материалу '" + M011 + "' есть замечания в заполнении данных.");
                
                //не проверяем замечания, т.к. они связаны не только с материалом
                
                ДополнитьДанные(ref КодМатериала, КодМатериала1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref ПрофильИРазмеры, ПрофильИРазмеры1, "; ", ref естьЗамечания);				
            }
            
            //Вывод данных в отчёт через переменные
            if (M01 != "")
                Переменная["$M01"] = M01.Substring(0,M01.Length - 2);
            if (ЕВ != "")							
                Переменная["$ЕВ"] = ЕВ.Substring(0,ЕВ.Length - 2);						
            if (ЕН != "")							
                Переменная["$ЕН"] = ЕН.Substring(0,ЕН.Length - 2);				
            if (Нрасх != "")							
                Переменная["$Нрасх"] = Нрасх.Substring(0,Нрасх.Length - 2);					
            if (КИМ != "")							
                Переменная["$КИМ"] = КИМ.Substring(0,КИМ.Length - 2);				
            //Переменная["$КодЗагот"] = материалИзСправочника.Параметр["Сводное наименование"];							
            if (КД != "")							
                Переменная["$КД"] = КД.Substring(0,КД.Length - 2);							
            if (МЗ != "")							
                Переменная["$МЗ"] = МЗ.Substring(0,МЗ.Length - 2);					
            if (КодМатериала != "")							
                Переменная["$КодМатериала"] = КодМатериала.Substring(0,КодМатериала.Length - 2);							
            if (ПрофильИРазмеры != "")							
                Переменная["$ПрофильИРазмеры"] = ПрофильИРазмеры.Substring(0,ПрофильИРазмеры.Length - 2);
        }
        if (МД > 0)
        {
            Переменная["$МД"] = МД.ToString();	
        }	
    }
    
    
    
    
    /****************************************************************************************************************************/
    //Процедура дополнения данных
    /****************************************************************************************************************************/
    public void ДополнитьДанные (ref string целеваяСтрока, string текущаяПодстрока, string разделитель, ref bool естьЗамечания)
    {
        if ((текущаяПодстрока != "") && (текущаяПодстрока != "0"))
            целеваяСтрока = целеваяСтрока + текущаяПодстрока + разделитель;
        else
            естьЗамечания = true;
    }
    //==========================================================================================================================//	
    
    
    
    /****************************************************************************************************************************/
    //Функция, возвращающая список объектов связанного справочника
    /****************************************************************************************************************************/
    public Объекты ПолучитьОбъектыПоСвязи (ObjectAccessor[] arr, string наименованиеСвязи)
    {	
		Объекты списокОбъектов = new Объекты();                	
    	foreach(var obj in arr)
    	{
    		Объект объект = obj.СвязанныйОбъект[наименованиеСвязи];
    		if(объект != null)
    			списокОбъектов.Add(объект);
    	}
    	return списокОбъектов;
    }
    //==========================================================================================================================//
    
                public Объект Parent(Объект объект)
        	{
            
        	if (объект.РодительскиеОбъекты.Count>0)
                      	{
                    	foreach (var подкл in объект.РодительскиеОбъекты)
                                {
                                	                                                  	
                              	       Parent(подкл);
                                 }       
                        }
                    	
    
   
        
    
            if (объект.РодительскиеОбъекты.Count==0)
                    result2 = объект;
            
            return result2;
            }
    
    
}




