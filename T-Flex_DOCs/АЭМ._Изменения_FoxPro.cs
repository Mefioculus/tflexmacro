using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;

public class Macro : MacroProvider
{
    public Macro(MacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    
    }
    
    public void СоздатьКонструкторскиеИзменения()
    {
    	List<Объект> всеОбъекты = new List<Объект>();
    	foreach (var объект in ВыбранныеОбъекты)
    	{
    		всеОбъекты.Add(объект);
    		всеОбъекты.AddRange(объект.ВсеДочерниеОбъекты);
    	}
    	foreach (var объект in всеОбъекты)
    		СоздатьКонструкторскоеИзменение(объект);
    }
    
    public void СоздатьКонструкторскоеИзменение(Объект ЭСИ)
    {
    	var связанныйОбъект = ЭСИ.СвязанныйОбъект["Связанный объект"];
    	if (связанныйОбъект == null)
    		return;
    	
    	string справочник = связанныйОбъект.Справочник.Имя;
    	string справочникАналог = "KAT_IZV";
    	if (справочник == "Электронные компоненты")
    		справочникАналог = "KAT_IZVP";
    	
    	string шифрБезТочек = ЭСИ["Обозначение"].ToString().Replace(".", "");
    	var аналог = НайтиОбъект(справочникАналог, string.Format("[SHIFR] = '{0}'", шифрБезТочек));
    	if (аналог == null)
    		return;
    	
    	var извещение = НайтиОбъект("Извещения об изменениях", string.Format("[Обозначение] = '{0}'", аналог["SH_IZM"]));
    	var изменения = НайтиОбъекты("Изменения", string.Format("[Документ]->[Обозначение] = '{0}' И [№ изменения] = '{1}'", 
    	                                                            ЭСИ["Обозначение"].ToString(), 
    	                                                            аналог["N_IZV"]));
    	
    	if (!изменения.Any())
    	{
    		var изменение = СоздатьОбъект("Изменения", "Изменение");
    		изменение["№ изменения"] = аналог["N_IZV"];
    		if (справочникАналог == "KAT_IZVP")
    			изменение["Литера"] = аналог["LITERA"];
    		изменение.СвязанныйОбъект["Документ"] = ЭСИ;
    		
    		if (извещение == null)
    			извещение = СоздатьИзвещение(аналог);
    		
    		изменение.СвязанныйОбъект["Извещение об изменении"] = извещение;
    		
    		изменение.Сохранить();
    	}
    }
    
    public void СоздатьТехнологическиеИзменения()
    {
    	//System.Diagnostics.Debugger.Launch();
    	//System.Diagnostics.Debugger.Break();
    	
    	List<Объект> всеДочерние = new List<Объект>();
    	всеДочерние.Add(ТекущийОбъект);
    	всеДочерние.AddRange(ТекущийОбъект.ВсеДочерниеОбъекты);
    	foreach (var ДСЕ in всеДочерние)
    	{
    		var документ = ДСЕ.СвязанныйОбъект["Связанный объект"];
    		if (документ == null)
    			continue;
    		
    		string шифрБезТочек = ДСЕ["Обозначение"].ToString().Replace(".", "");
    		var измененияАналоги = НайтиОбъекты("KAT_IZVT", string.Format("[SHIFR] = '{0}'", шифрБезТочек));
    		foreach (var изменениеАналог in измененияАналоги)
    		{
        		var технологическиеДокументы = документ.СвязанныеОбъекты["~[Связанные документы]"];
        		int видДокумента = -1;
        		if (изменениеАналог["SH_IZM"].ToString().StartsWith("ВТМ"))
        			видДокумента = 1;
        		else if (изменениеАналог["SH_IZM"].ToString().StartsWith("ВТО"))
        			видДокумента = 2;
        		else if (изменениеАналог["SH_IZM"].ToString().StartsWith("БНМ"))
        			видДокумента = 3;
        		
        		if (видДокумента == -1)
        			continue;
        		
        		var технологическийДокумент = технологическиеДокументы.FirstOrDefault(t => (int)t["[Дополнительные параметры].[Вид документа]"] == видДокумента);
        		if (технологическийДокумент == null)
        			continue;
        		
        		var извещение = НайтиОбъект("Извещения об изменениях", string.Format("[Обозначение] = '{0}'", изменениеАналог["SH_IZM"]));
        		if (извещение == null)
        		{
        			извещение = СоздатьИзвещение(изменениеАналог, технологическийДокумент);
        			
        			var изменение = СоздатьОбъект("Изменения", "Технологическое изменение");
            		изменение["№ изменения"] = изменениеАналог["N_IZV"];
            		изменение["Содержание изменения"] = изменениеАналог["SODER"];
            		изменение.СвязанныйОбъект["Извещение об изменении"] = извещение;
            		
            		изменение.Сохранить();
        		}
        		else
        		{
        			var изменения = извещение.СвязанныеОбъекты["Изменения"];
        			if (изменения.Any())
        			{
        				var изменение = изменения.FirstOrDefault(t => t["№ изменения"].ToString() == изменениеАналог["N_IZV"].ToString());
        				if (изменение == null)
        				{
        					изменение = СоздатьОбъект("Изменения", "Технологическое изменение");
                    		изменение["№ изменения"] = изменениеАналог["N_IZV"];
                    		изменение["Содержание изменения"] = изменениеАналог["SODER"];
                    		изменение.СвязанныйОбъект["Извещение об изменении"] = извещение;
                    		
                    		изменение.Сохранить();
        				}
        			}
        		}
    		}
    	}
    }
    
    private Объект СоздатьИзвещение(Объект аналог, Объект технологическийДокумент = null)
    {
    	var извещение = СоздатьОбъект("Извещения об изменениях", "Извещение об изменении");
		извещение["Обозначение"] = аналог["SH_IZM"].ToString().Replace("/", "_").Replace("?", "_");         // Делаем из-за того, что потом не получается создать папку в Файлах
		извещение["Дата выпуска"] = аналог["DATA_IZ"];
		извещение["Код изменения"] = аналог["K_PIZM"];
		извещение["Указание о заделе"] = аналог["ZADEL"];
		извещение["Указание о внедрении"] = аналог["VNEDR"];
		извещение["Срок изменения"] = аналог["DATA_VV"];
		извещение["Выпущено на"] = аналог["SHIFR"];
		
		if (технологическийДокумент != null)
			извещение.Подключить("Документы", технологическийДокумент);
		
		извещение.Сохранить();
		
		return извещение;
    }
}
