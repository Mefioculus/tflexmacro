using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.References;
using TFlex.DOCs.Model.References.Files;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.Reporting.Technology.Macros;
using TFlex.Reporting.CAD.MacroGenerator.ObjectModel;
using TFlex.DOCs.Model.References.Reporting;
using TFlex.DOCs.Model.FilePreview.CADService;
using TFlex.DOCs.UI.Objects.References.Files.Commands;
using Newtonsoft.Json;

public class Macro : MacroProvider
{
    public Macro(MacroContext context) 
        : base(context)
    {
    }

    public override void Run()
    {
        Объект тп = ТекущийОбъект;

        //ПользовательскийДиалог диалог = ПолучитьПользовательскийДиалог("Создание сопроводительной карты");
        // Этот вариант был отброшен, было принято решение сделать стандартный диалог


        // Диалог выбора объектов для выбора изделия 
        // Сюда можно будет в дальнейшем дописать код, который получает список изделий, которые относятся к данной ДСЕ,
        // и после на основании этого списка составить строку фильтра, которая будет отображать только соответствующие записи

        
        /* 
        Переменные, которые нужно реализовать в интерфейсе ввода данных:
        - Номер сопроводительной карты
        - Номер производственного заказа 1С
        - Номер заказа
        - Дата запуска
        - Свительство ЦЗЛ
        */
        
        
        
        
        
        
        
        
        // Объявляем переменные, которые будут хранить обозначение и название изделия
        string наименованиеИзделия = "";
        string обозначениеИзделия = "";
        string номерСопроводительнойКарты = "";
        string номерПроизводственногоЗаказа1С = "";
        string номерЗаказа = "";
        string датаЗапуска = "";
        string свидетельствоЦЗЛ = "";
         
        

        // Дальше нужно создать диалог, в котором будут отображаться остальные поля для заполнения

        ДиалогВвода диалогПараметры = СоздатьДиалогВвода("Введите параметры для формирования сопроводительной карты");
        
        диалогПараметры.ДобавитьГруппу("Параметры сопроводительной карты");
        диалогПараметры.ДобавитьСтроковое("Номер сопроводительной карты");

        диалогПараметры.ДобавитьГруппу("Параметры заказа");
        диалогПараметры.ДобавитьСтроковое("Номер производственного заказа 1С");
        диалогПараметры.ДобавитьСтроковое("Номер заказа");
        диалогПараметры.ДобавитьДату("Дата запуска");

        диалогПараметры.ДобавитьГруппу("Параметры изделия");
        диалогПараметры.ДобавитьСтроковое("Наименование", наименованиеИзделия);
        диалогПараметры.ДобавитьСтроковое("Обозначение", обозначениеИзделия);
        диалогПараметры.ДобавитьКнопку("Выбрать изделие", new Action<string>((выборИзделия) => 
        {
            ДиалогВыбораОбъектов диалог = СоздатьДиалогВыбораОбъектов("Электронная структура изделий");
            диалог.Заголовок = "Выберите изделие, к которому относится технологический процесс";
            диалог.Вид = "Основной";
            диалог.Фильтр = "([Тип] Входит в список 'Изделие, Папка')";

            if (диалог.Показать())
            {
                foreach(Объект выбранныйОбъект in диалог.ВыбранныеОбъекты)
                {
                    диалогПараметры["Наименование"] = выбранныйОбъект.Параметр["Наименование"];
                    диалогПараметры["Обозначение"] = выбранныйОбъект.Параметр["Обозначение"];
                }
            }


        }));

        диалогПараметры.ДобавитьГруппу("");
        диалогПараметры.ДобавитьСтроковое("Номер свидетельства ЦЗЛ");

        if (диалогПараметры.Показать())
        {
            наименованиеИзделия = диалогПараметры["Наименование"];
            обозначениеИзделия = диалогПараметры["Обозначение"];
            номерСопроводительнойКарты = диалогПараметры["Номер сопроводительной карты"];
            номерПроизводственногоЗаказа1С = диалогПараметры["Номер производственного заказа 1С"];
            номерЗаказа = диалогПараметры["Номер заказа"];
            датаЗапуска = диалогПараметры["Дата запуска"].ToString("dd.MM.yyyy");
            свидетельствоЦЗЛ = диалогПараметры["Номер свидетельства ЦЗЛ"];


            
        

            Data data = new Data();
            data.обозначение = обозначениеИзделия;
            data.наименование = наименованиеИзделия;
            data.номерКарты = номерСопроводительнойКарты;
            data.заказ1С = номерПроизводственногоЗаказа1С;
            data.заказ = номерЗаказа;
            data.датаЗап = датаЗапуска;
            data.свидетельство = свидетельствоЦЗЛ;


            // код, отвечающий за передачу данных из макроса в отчет
            string serialized = JsonConvert.SerializeObject(data);
            Clipboard.SetText(serialized);

            // Инициализируем объект отчет
            Объект отчет = null;
            отчет = НайтиОбъект("Отчёты", "[Наименование] = '(Гуков) Сопроводительная карта'");

            // Код, отвечающий за генерацию отчета
            ReportGenerationContext reportContext = new ReportGenerationContext((ReferenceObject)тп, null);
            
            // Требуется ли открывать отчет после создания
            reportContext.OpenFile = true;

            // Приведение отчета к классу ReferenceObject
            ReferenceObject rep = (ReferenceObject)отчет;

            // Приведение отчета к классу Report
            Report report = (Report)отчет; //Не смотря что в образце кода есть эта строчка, я не нашел ее применения дальше в коде, поэтому задокументировал строку

            // Генерация отчета
            report.Generate(reportContext);


            // Последующий код необходим для того, чтобы привязать файл, сгенерированный отчетом к изделию
            
            /* 
            var generatedFile = reportContext.ReportFileObject as FileObject; //ReportFileObject - Возвращает или задает файл в справочнике файлов для сохранения отчета
            //FileObject - объект файлового справочника (или проще говоря файл)
            Объект файл = Объект.CreateInstance(generatedFile, Context);   // Context - как я понимаю, это объект из используемой библиотеки 
            // В строке выше, как я понимаю, происходит генерация файла исходя из заданного контекста
            файл.Изменить(); // Переводит объект в состояние редактирования
            файл.Подключить("Документы", документ); // Подключает объект по связи "Документы" к объекту
            
            файл.Сохранить(); // Сохранение изменений и перевод из состояния редактирования.
            */
        }
        else
        {
            return; // Кода для прекращения работы макроса, если не было подтверждения ввода параметров для формирования сопроводительной карты
        }
    
    
    }
    public class Data
    {
    	public string обозначение { get; set; }
    	public string наименование { get; set; }
        public string заказ { get; set; }
        public string заказ1С { get; set; }
        public string датаЗап { get; set; }
        public string номерКарты { get; set; }
        public string свидетельство { get; set; }

    }


    
}
