using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.DOCs.Model.Desktop;
using TFlex.DOCs.Model.References;
using TFlex.DOCs.Model.References.Files;
using TFlex.DOCs.Model.Classes;
using TFlex.DOCs.Model;

public class MacroSpe : MacroProvider
{
    public MacroSpe(MacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    }
    private ПользовательскийДиалог диалог;
    
    public void Лист_спецификации()
    {
    	диалог = ПолучитьПользовательскийДиалог("Импорт спецификации");
    	диалог["Наименование"] = ТекущийОбъект["Объект"];//["Обозначение"] + " - " + ТекущийОбъект["Наименование"];
    	//очистить записи
    	Объекты записи = диалог.СвязанныеОбъекты["Спецификация"]; 	
		foreach (Объект запись in записи)
    		запись.Удалить();
		foreach(var подключение in ТекущийОбъект.ДочерниеПодключения)
            {
                Объект сч = подключение.ДочернийОбъект;         
			    Объект запись = диалог.СоздатьОбъектСписка("Спецификация", "Строка спецификации");
                запись["Обозначение"] = сч["Обозначение"]; 
                запись["Наименование"] = сч["Наименование"];
                запись["Формат"] = сч["Формат"];
                запись["Зона"] = подключение["Зона"];
                запись["Позиция"] = подключение["Позиция"] == null ? string.Empty : подключение["Позиция"].ToString();
                запись["Количество"] = подключение["Количество"];
                запись["Раздел"] = подключение["Раздел спецификации"];
                запись["Примечание"] = подключение["Примечания"];
                запись["Новый"] = false;
                запись["Проверено"] = true;
                запись["Получен"] = true;
                запись["Тип документа"] = сч.Тип.Guid.ToString();
                запись.СвязанныйОбъект["Номенклатура"] = сч;
                запись.Сохранить();	 
            }

    	
    	if (диалог.ПоказатьДиалог())
		{
    		записи = диалог.СвязанныеОбъекты["Спецификация"];
      		foreach (Объект запись in записи)
		    {
      			if (запись["Проверено"] == false)
                      Проверить(запись);
    			Объект сч = запись.СвязанныйОбъект["Номенклатура"];

    			if (сч == null)
             	{
            	    Reference reference = ReferenceCatalog.FindReference(new Guid("853d0f07-9632-42dd-bc7a-d91eae4b8e83")).CreateReference();
                    ClassObject clas = reference.Classes.Find(new Guid(запись["Тип документа"].ToString()));
                    string тип = clas.Name;
                    switch (тип)
                    {
                    	case "Материал":
                        Объект материал = СоздатьОбъект("Материалы", тип);
                        материал["Сводное наименование"] = запись["Наименование"];
                		материал.Сохранить();
                		сч = Номенклатура.Подключить(материал);
                		break;
                		
                    	case "Электронный компонент":
            			Объект эри = СоздатьОбъект("Электронные компоненты", тип);
            			эри["Наименование"] = запись["Наименование"];
            			эри.Сохранить();
            			сч = Номенклатура.Подключить(эри);    	
                		break;
                		
                		default:
        				Объект папка = НайтиОбъект("Документы", "Наименование", "Импорт спецификаций");
        				if (папка == null) 
    					{
        					папка = СоздатьОбъект("Документы", "Папка");
        					папка["Наименование"] = "Импорт спецификаций";
        					папка.Сохранить();
        					Desktop.CheckIn((ReferenceObject)папка, "Создана макросом - Импорт спецификации", false);
    					}  
                    	Объект док = СоздатьОбъект("Документы", тип, папка);
                		док["Наименование"] = запись["Наименование"];
                		док["Обозначение"] = запись["Обозначение"];
                		док["Формат чертежа"] = запись["Формат"];
                		
                		if (тип == "Спецификация" || тип == "Сборочный чертёж")
                		{
                			try
                			{
                				foreach (var файл in ТекущийОбъект.СвязанныйОбъект["Связанный объект"].СвязанныеОбъекты["Файлы"])
                				{
                					if (файл.Тип.ПорожденОт("Документ системы T-FLEX CAD"))
                						док.Подключить("Файлы", файл);
                				}
                			}
                			catch
                			{}
                		}
                		
                		док.Сохранить();
                		сч = Номенклатура.Подключить(док);
                		break;
                    }
                    Desktop.CheckIn((ReferenceObject)сч, "Создан макросом - Импорт спецификации", false);
            	}
    			//если объект ЭСИ есть, и его можно редактировать, и формат в строке спецификации и в объекте ЭСИ не совпадают, то изменять формат в объекте ЭСИ
    			else
    			{
    				string формат = запись["Формат"];
					ReferenceObject doc = (ReferenceObject)сч;
					if(формат != "" && doc.CanCheckOut && сч["Формат"].ToString() != формат)
    					{
        					сч.Изменить();
        					сч["Формат"] = запись["Формат"];
        					сч.Сохранить();
        					Desktop.CheckIn(doc, "Изменён макросом - Импорт спецификации", false);
    					}
    			}
    				
    			ТекущийОбъект.Изменить();
    			
    			Подключение подключение = null;
    			if (запись["Получен"] != true)
    				подключение = СоздатьПодключение(ТекущийОбъект, сч);
    			else if (запись["Получен"] == true)
    				подключение = ТекущийОбъект.ДочерниеПодключения.FirstOrDefault(объект => объект.ДочернийОбъект["ID"] == сч["ID"]);

    			string зона = запись["Зона"];
    			if(зона != "")
        			подключение["Зона"] = запись["Зона"];
    			
    			string  поз = запись["Позиция"];
    			if(поз != "")
    			    подключение["Позиция"] = Convert.ToInt32(поз); //преобразовать
    			
    			string кол = запись["Количество"];
    			if(кол != "")
    			    подключение["Количество"] = Convert.ToDouble(кол); //преобразовать
    			
    			string примечания = запись["Примечание"];
    			if(примечания != "")
        			подключение["Примечания"] = запись["Примечание"];

    			string раздел = запись["Раздел"];
    			if(раздел != "")
        			подключение["Раздел спецификации"] = запись["Раздел"];
    			
    			подключение.Сохранить();
    			ТекущийОбъект.Сохранить();
    			
    			Desktop.CheckIn((ReferenceObject)ТекущийОбъект, "Изменен макросом - Импорт спецификации", false);
    			}
    	}
    	ОбновитьОкноСправочника();
    }
    
    public void Проверка()
	{
    	if (ТекущийОбъект["Проверено"] == false)
    		Проверить(ТекущийОбъект);
	}
    
    public void Детали()
	{
    	ТекущийОбъект.Изменить();
		ТекущийОбъект["Тип документа"] = "08309a17-4bee-47a5-b3c7-57a1850d55ea";
    	ТекущийОбъект["Раздел"] = "Детали";
    	ТекущийОбъект.Сохранить();
	}
    
    public void Документация()
	{
    	ТекущийОбъект.Изменить();
        ТекущийОбъект["Тип документа"] = "00542618-0248-435b-b308-928cb7131655";
    	ТекущийОбъект["Раздел"] = "Документация";
    	ТекущийОбъект.Сохранить();
	}
    
    public void Комплекты()
	{
    	ТекущийОбъект.Изменить();
        ТекущийОбъект["Тип документа"] = "3ac93dc0-8551-43a9-8f20-202d0967a340";
        ТекущийОбъект["Раздел"] = "Комплекты";
        ТекущийОбъект.Сохранить();
	} 
    public void Сборочные()
	{
    	ТекущийОбъект.Изменить();
        ТекущийОбъект["Тип документа"] = "1cee5551-3a68-45de-9f33-2b4afdbf4a5c";
        ТекущийОбъект["Раздел"] = "Сборочные единицы";
        ТекущийОбъект.Сохранить();
	}
    
    public void Стандартные()
	{
    	ТекущийОбъект.Изменить();
        ТекущийОбъект["Тип документа"] = "87078af0-d5a1-433a-afba-0aaeab7271b5";
        ТекущийОбъект["Раздел"] = "Стандартные изделия";
        ТекущийОбъект.Сохранить();
	}
    
    public void Прочие()
	{
    	ТекущийОбъект.Изменить();
    	ТекущийОбъект["Тип документа"] = "f50df957-b532-480f-8777-f5cb00d541b5";
    	ТекущийОбъект["Раздел"] = "Прочие изделия";
    	ТекущийОбъект.Сохранить();
	} 
    public void Материалы()
	{
    	ТекущийОбъект.Изменить();
		ТекущийОбъект["Тип документа"] = "f7f45e16-ceba-4d26-a9af-f099a2e2fca6";
    	ТекущийОбъект["Раздел"] = "Материалы";
    	ТекущийОбъект.Сохранить();
	} 
      
    private void Проверить(Объект запись)
	{
    	string filter = "";
    	if (запись["Обозначение"] != "")
    		filter = "[Обозначение] = '" + запись["Обозначение"] + "' И [Название варианта] = ''";
    	
    	else 
    		filter = "[Наименование] = '" + запись["Наименование"] + "' И [Название варианта] = ''";
    	
    	Объект ном = НайтиОбъект("853d0f07-9632-42dd-bc7a-d91eae4b8e83", filter); //Справочник "Электронная структура изделий", бывш. "Номенклатура и изделия"
    	
    	if (диалог != null)
    		диалог.Изменить();
    	    	
    	запись.Изменить();
    	if (ном != null )
		{
            запись.СвязанныйОбъект["Номенклатура"] = ном;
            запись["Наименование"] = ном["Наименование"];
            if(ном["Формат"] != "")
               	запись["Формат"] = ном["Формат"];
            запись["Тип документа"] = ном.Тип.УникальныйИдентификатор;
	       	if (запись["Раздел"] == "")	
        	{
        		if(ном.Тип.ПорожденОт("Документ"))
        			запись["Раздел"] = "Документация";
        		else
        		{
            		switch (ном.Тип)
            		{
            			case "Деталь":
            				запись["Раздел"] = "Детали";
            				break;
            			case "Комплект":
            				запись["Раздел"] = "Комплекты";
            				break;
            			case "Сборочная единица":
            				запись["Раздел"] = "Сборочные единицы";
            				break;
            			case "Стандартное изделие":
            				запись["Раздел"] = "Стандартные изделия";
            				break;
            			case "Прочее изделие":
            				запись["Раздел"] = "Прочие изделия";
            				break;
            			case "Материал":
            				запись["Раздел"] = "Материалы";
            				break;
        
        				default:
            				Сообщение("Назначить тип", "Необходимо назначить тип для нового объекта {0} {1}", запись["Обозначение"], запись["Наименование"]);
            				break;
            		}
        		}
        	}
    	}
    	else 
            запись["Новый"] = true;
    	if (запись["Раздел"] != "")
    	    запись["Проверено"] = true;
    	запись.Сохранить();
    }
}
