using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
//Библиотека для работы с excel
using Excel = Microsoft.Office.Interop.Excel;
using TFlex.DOCs.Model.References.Files;

public class Macro : MacroProvider
{
    public Macro(MacroContext context)
        : base(context)
    {
    }
    
    private string pathToReport = @"C:\tflexcash\Состав работ.xlsx";

    bool debug = false;
    
    public override void Run()
    {
    	Объекты объекты = НайтиОбъекты("Учёт отработки ТД", "[Примечания] != 'До перевода технологов'");
           /*    	
    	foreach (var объект in объекты)
    		{
    	        //if(объект.Параметр["Примечания"] != "До перевода технологов")
    	       	Сообщение("Заголовок1", объект.Параметр["Примечания"] + "\n");
                    	       	
    	    }
    	    */
    	List<Data> таблицаДанных = new List<Data>();   
    	//Message($"Полученные объекты (кол {объекты.Count})", string.Join("\n", объекты.Select(obj => $"{obj.ToString()}:\n- {obj.Параметр["Металлургический отдел"].ToString()}\n-{obj.Параметр["Отдел подготовки производства"]}\n-{obj.Параметр["Отдел технологий"]}\n")));
    	
    	var filteredObjects = объекты.Where(obj => !string.IsNullOrWhiteSpace(obj.Параметр["Металлургический отдел"].ToString()));
    	//Message($"Выполненные по металлургическому отделу (кол {filteredObjects.Count()})", string.Join("\n", filteredObjects.Select(obj => $"{obj.ToString()}:\n- {obj.Параметр["Металлургический отдел"].ToString()}\n-{obj.Параметр["Отдел подготовки производства"]}\n-{obj.Параметр["Отдел технологий"]}\n")));
    	
    	
        Data строка = СформироватьСтрокуТаблицыДанных(
    		ПолучениеДанных("Металлургический отдел", объекты),
    		ПолучениеДанных("Отдел подготовки производства", объекты),
    		ПолучениеДанных("Отдел технологий", объекты), 
    		объекты.Count,
    		ПолучитьВсеВыполненные(объекты)
    	);
       if(СформироватьФайлОтчетаВФорматеExcel(new List<Data>() { строка })) {
    	   Сообщение("Информация", "Отчет был успешно сформирован");
        }

    }
    
     private Data СформироватьСтрокуТаблицыДанных(int МО, int ОПП,int ОТ, int ОбщееКоличество, int ПолностьюВыполненныеИИ)
    {
        Data строка = new Data();
                        
        строка.МеталлургическийОтделКолвоОтработанныхИИвшт = МО.ToString();
        строка.МеталлургическийОтделОтработанныеИИотобщегоколичествав = (((double)МО/(double)ОбщееКоличество)*100).ToString();
        строка.ОтделПодготовкиПроизводстваКолвоОтработанныхИИвшт = ОПП.ToString();
        строка.ОтделПодготовкиПроизводстваОтработанныеИИотобщегоколичествав = (((double)ОПП/ОбщееКоличество)*100).ToString();
        строка.ОтделТехнологийКолвоОтработанныхИИвшт = ОТ.ToString();
        строка.ОтделТехнологийОтработанныеИИотобщегоколичествав = (((double)ОТ/ОбщееКоличество)*100).ToString();
        строка.ПолностьюОтработанныеИзвещения = ПолностьюВыполненныеИИ.ToString();
        строка.ОбщееКолвоИзвещений = ОбщееКоличество.ToString();
       
        return строка;
    }
     
     
     private bool СформироватьФайлОтчетаВФорматеExcel(List<Data> табличныеДанные)
    {
        // Генерируем файл, в который будет сохраняться отчет (если создать его не получилось, завершаем работу)
        ДиалогОжидания.Показать("Подождите, идет формирование отчета", true);
        ДиалогОжидания.СледующийШаг("Создание отчета из шаблона");
        if (!СоздатьФайлОтчета(pathToReport)) return false;
    
        // Работа с приложением Excel
        // Указываем имя явно, так как класс Application так же есть в другой библиотеке, которую я тут использую
        ДиалогОжидания.СледующийШаг("Запуск приложения Excel");
        Excel.Application excel = new Microsoft.Office.Interop.Excel.Application();

        // Дальше нужно произвести открытие файла
        excel.Workbooks.Open(pathToReport);

        // Получаем первый лист, с которым будем производить работу
        Excel.Worksheet sheet = (Excel.Worksheet)excel.Worksheets.get_Item(1);

        // Можно присвоить листу свое имя
        sheet.Name = "Состав работ";
        ДиалогОжидания.СледующийШаг("Заполнение ячеек данными");
        // Заполнение ячеек

        // Инициализация переменных, в которых будут храниться индексы ячеек
        int i = 2;
        foreach (Data строка in табличныеДанные)
        {
            sheet.Cells[i, 1] = строка.МеталлургическийОтделКолвоОтработанныхИИвшт;
            sheet.Cells[i, 2] = строка.МеталлургическийОтделОтработанныеИИотобщегоколичествав;
            sheet.Cells[i, 3] = строка.ОтделПодготовкиПроизводстваКолвоОтработанныхИИвшт;
            sheet.Cells[i, 4] = строка.ОтделПодготовкиПроизводстваОтработанныеИИотобщегоколичествав;
            sheet.Cells[i, 5] = строка.ОтделТехнологийКолвоОтработанныхИИвшт;
            sheet.Cells[i, 6] = строка.ОтделТехнологийОтработанныеИИотобщегоколичествав;
            sheet.Cells[i, 7] = строка.ПолностьюОтработанныеИзвещения;
            sheet.Cells[i, 8] = строка.ОбщееКолвоИзвещений;
            
          //  ДиалогОжидания.СледующийШаг("Заполнение строки " + (i - 1));
            

         //   i++;
         
        }

        // Делаем приложение видимым после того, как все данные в него будут внесены
        ДиалогОжидания.Скрыть();
        excel.Visible = true;

        return true;

    }

    private bool СоздатьФайлОтчета(string pathToSaveReport)
    {
        // Получаем доступ к файлу шаблона отчета для получения пути его расположения на локальном компьютере
        FileObject шаблон = (FileObject)НайтиОбъект("Файлы", "[Наименование] = 'Шаблон отчёта - Статистика отработанных ИИ.xlsx'"); 
        
        // Если шаблон не найден, выдаем сообщение об ошибке, после чего прекращаем выполнение программы
        if (шаблон == null)
        {
            Сообщение("Ошибка","Файл шаблона отчета не был найден");
            return false;
        }

        // Выгружаем файл шаблона для последующего его заполнения данными
        шаблон.Export(pathToSaveReport, true);

        return true;
    }

    
    public int ПолучениеДанных(string parameter, Объекты объекты) {
        var filteredObjects = объекты.Where(obj => !string.IsNullOrWhiteSpace(obj.Параметр[parameter].ToString()));
        
      //  Message($"Выполненные по {parameter} (кол {filteredObjects.Count()})", string.Join("\n", filteredObjects.Select(obj => $"{obj.ToString()}:\n- {obj.Параметр["Металлургический отдел"].ToString()}\n-{obj.Параметр["Отдел подготовки производства"]}\n-{obj.Параметр["Отдел технологий"]}\n")));
        return filteredObjects.Count();    
    }
    
    public int ПолучитьВсеВыполненные(Объекты объекты) {
    	var filteredObjects = объекты.Where(obj => (
    		!string.IsNullOrWhiteSpace(obj.Параметр["Металлургический отдел"].ToString())) && 
    		(!string.IsNullOrWhiteSpace(obj.Параметр["Отдел подготовки производства"].ToString())) && 
    		(!string.IsNullOrWhiteSpace(obj.Параметр["Отдел технологий"].ToString())
    		));
    	return filteredObjects.Count();
    }
    
    // Класс для хранения данных
    public class Data
    {
        public string МеталлургическийОтделКолвоОтработанныхИИвшт {get; set;}
        public string МеталлургическийОтделОтработанныеИИотобщегоколичествав {get; set;}
        public string ОтделПодготовкиПроизводстваКолвоОтработанныхИИвшт {get; set;}
        public string ОтделПодготовкиПроизводстваОтработанныеИИотобщегоколичествав {get; set;}
        public string ОтделТехнологийКолвоОтработанныхИИвшт {get; set;}
        public string ОтделТехнологийОтработанныеИИотобщегоколичествав {get; set;}
        public string ПолностьюОтработанныеИзвещения {get; set;}
        public string ОбщееКолвоИзвещений {get; set;}
    }
    
    }
    
    

