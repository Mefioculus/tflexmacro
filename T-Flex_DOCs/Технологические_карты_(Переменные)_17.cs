/* Ссылки
TFlex.Model.Technology.dll
TFlex.Reporting.CAD.dll
TFlex.Reporting.Technology.dll
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.Model.Technology.Macros.ObjectModel;
using TFlex.Reporting.Technology.Macros;

public class Macro : ReportMacroProvider
{
    public Macro(ReportGenerationMacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    }

    //Заданный формат вывода времён в карту    
    private string format = "0.##";
    private string format2 = "{0:0.##}";



    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных ОСНОВНЫЕ НАДПИСИ применительно к ТП
    //см. ГОСТ 3.1103-2011 ЕСТД. Основные надписи. Общие положения
    /****************************************************************************************************************************/
    public void ЗаполнитьОсновныеНадписи(ТехнологическийПроцесс техпроцесс)
    {
        //Находим все ДСЕ связанные с ТП
        Объекты списокДСЕ = техпроцесс.ИзготавливаемыеДСЕ;
        if (списокДСЕ.Count > 0)            //Если список не пустой, т.е. такие объекты найдены
        {
            var дсе = списокДСЕ.First();    //В качестве объекта берём первый в списке (в большинстве случаев он же и единственный)
            Переменная["$graph_02"] = дсе.Параметр["Обозначение"];        //и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = дсе.Параметр["Наименование"];
        }
        else    //Получаем данные с техпроцесса
        {
            Переменная["$graph_02"] = техпроцесс.Обозначение;        //и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = техпроцесс.Наименование;
        }

        //Аналогично для материала
        var списокМатериалов = техпроцесс.СвязанныеОбъекты["Материалы ТП"];
        if (списокМатериалов.Any())
        {
            var материал = списокМатериалов.First();
            Переменная["$graph_07"] = материал["Единица нормирования"].ToString();
        }

        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        //Переменная["$graph_02"] = дсе.Параметр["Обозначение"];                  уже заполнена
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = техпроцесс.КомплектСсылочнойТД;
        //Переменная["$graph_05"] = техпроцесс.Литера;
        //Переменная["$graph_06"] = дсе.Параметр["Наименование"];                  уже заполнена
        //Переменная["$graph_07"] = материал.Параметр["Единицы нормирования"];  уже заполнена

        /*
        Переменная["$graph_08"] = "";
        Переменная["$graph_09"] = "";
        
        Переменная["$graph_10"] = "";
        Переменная["$graph_11"] = "";
        Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
        Переменная["$graph_28"] = "";
        Переменная["$graph_29"] = "";
        */

        //Переменная["$graph_30"] = техпроцесс.КомплектТД;
        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //Переменная["$graph_33"] = "МК";
        //Переменная["$graph_34"] = "";
        //Переменная["$graph_35"] = "";
        Переменная["$graph_36"] = техпроцесс.Параметр["Версия"];
        //Переменная["$graph_37"] = "";
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных ОСНОВНЫЕ НАДПИСИ применительно к Операции
    //см. ГОСТ 3.1103-2011 ЕСТД. Основные надписи. Общие положения
    /****************************************************************************************************************************/
    public void ЗаполнитьОсновныеНадписи(Операция операция)
    {
        //Находим все ДСЕ связанные с ТП
        ТехнологическийПроцесс техпроцесс = операция.ТехнологическийПроцесс;
        Объекты списокДСЕ = техпроцесс.ИзготавливаемыеДСЕ;
        if (списокДСЕ.Count > 0)            //Если список не пустой, т.е. такие объекты найдены
        {
            var дсе = списокДСЕ.First();    //В качестве объекта берём первый в списке (в большинстве случаев он же и единственный)
            Переменная["$graph_02"] = дсе.Параметр["Обозначение"];        //и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = дсе.Параметр["Наименование"];
        }
        else    //Получаем данные с техпроцесса
        {
            Переменная["$graph_02"] = техпроцесс.Обозначение;        //и в переменные записываем необходимые параметры
            Переменная["$graph_06"] = техпроцесс.Наименование;
        }

        //Аналогично для материала
        var списокМатериалов = техпроцесс.СвязанныеОбъекты["Материалы ТП"];
        if (списокМатериалов.Any())
        {
            var материал = списокМатериалов.First();
            Переменная["$graph_07"] = материал["Единица нормирования"].ToString();
        }

        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        //Переменная["$graph_02"] = дсе.Параметр["Обозначение"];                  уже заполнена
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = техпроцесс.КомплектСсылочнойТД;
        //Переменная["$graph_05"] = техпроцесс.Литера;
        //Переменная["$graph_06"] = дсе.Параметр["Наименование"];                  уже заполнена
        //Переменная["$graph_07"] = материал.Параметр["Единицы нормирования"];  уже заполнена

        Переменная["$graph_08"] = операция.Номер + операция.Индекс;

        //Производственные подразделения
        Объекты ЦехУчастокРМ = ВыполнитьМакрос(Макрос_Теги_17, "ПолучитьПроизводственныеПодразделения", операция);
        string tip;
        foreach (Объект подразделение in ЦехУчастокРМ)
        {
            tip = подразделение.Тип;
            switch (tip)
            {
                case "Цех":
                    Переменная["$graph_11"] = подразделение.Параметр["Номер"];
                    break;
                case "Участок":
                    Переменная["$graph_10"] = подразделение.Параметр["Номер"];
                    break;
                case "Рабочее место":
                    Переменная["$graph_09"] = подразделение.Параметр["Номер"];
                    break;
            }
        }

        /* Для случая, когда в карту выводится только код рабочего места (в списке подразделений указываем всего 1 объект)
        if (списокПроизводственныхПодразделений.Count > 0)
        {
            Объект рабочееМесто = списокПроизводственныхПодразделений.First();
            Переменная["$graph_09_kod"] = рабочееМесто.Параметр["Код"];
        }
        */

        //Переменная["$graph_09"] = "";        уже заполнена

        //Переменная["$graph_10"] = "";        уже заполнена
        //Переменная["$graph_11"] = "";        уже заполнена

        /*
        Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
        Переменная["$graph_28"] = "";
        Переменная["$graph_29"] = "";
        */

        //Переменная["$graph_30"] = техпроцесс.КомплектТД;
        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //P.S. Возможно к указанным выражениям нужно будет добавить единичку
        //Переменная["$graph_33"] = "ОК";
        //Переменная["$graph_34"] = "";
        //Переменная["$graph_35"] = "";
        Переменная["$graph_36"] = операция.Параметр["Версия"]; //версия Операции
        //Переменная["$graph_36"] = Параметр["[Владелец].[Версия]"]; //версия ТП
        //Переменная["$graph_37"] = "";
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных ОСНОВНЫЕ НАДПИСИ применительно к Объекту номенклатуры
    //см. ГОСТ 3.1103-2011 ЕСТД. Основные надписи. Общие положения
    /****************************************************************************************************************************/
    public void ЗаполнитьОсновныеНадписиНаИзделие()
    {
        //Находим все ДСЕ связанные с ТП
        Объект изделие = ТекущийОбъект;

        //Заполнение значений переменных
        Переменная["$graph_01"] = ГлобальныйПараметр["Название предприятия"];
        Переменная["$graph_02"] = изделие.Параметр["Обозначение"];
        //Переменная["$graph_03"] = "";
        //Переменная["$graph_04"] = обозначение документа по ГОСТ 3.1201;
        //Переменная["$graph_05"] = литера, присвоенная документу;
        Переменная["$graph_06"] = изделие.Параметр["Наименование"];
        //Переменная["$graph_07"] = общая единица нормирования для всего техпроцесса (устанавливается требованием организации);

        /*
        Переменная["$graph_08"] = "";
        Переменная["$graph_09"] = "";
        
        Переменная["$graph_10"] = "";
        Переменная["$graph_11"] = "";
        Переменная["$graph_12"] = "";
        Переменная["$graph_13"] = "";
        Переменная["$graph_14"] = "";
        Переменная["$graph_15"] = "";
        Переменная["$graph_16"] = "";
        Переменная["$graph_17"] = "";
        Переменная["$graph_18"] = "";
        Переменная["$graph_19"] = "";

        Переменная["$graph_20"] = "";
        Переменная["$graph_21"] = "";
        Переменная["$graph_22"] = "";
        Переменная["$graph_23"] = "";
        Переменная["$graph_24"] = "";
        Переменная["$graph_25"] = "";
        Переменная["$graph_26"] = "";
        Переменная["$graph_27"] = "";
        Переменная["$graph_28"] = "";
        Переменная["$graph_29"] = "";
        */

        //Переменная["$graph_30"] = КомплектТД;

        //Номер и количество страниц заполняются самим CAD'ом
        //Переменная["$graph_31"] = ""; - общее количество getv("PAGES",0) в сборке или getv("APAGES",0) во фрагменте
        //Переменная["$graph_32"] = ""; - номер страницы   getv("APAGE",0)
        //Переменная["$graph_33"] = "ОК";
        //Переменная["$graph_34"] = "";
        //Переменная["$graph_35"] = "";
        Переменная["$graph_36"] = изделие.Параметр["Версия"]; //версия изделия
        //Переменная["$graph_37"] = "";
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных уникальные данные применительно к Операции
    //Список используемых переменных зависит от формируемой карты
    /****************************************************************************************************************************/
    public void Переменные(Операция операция)
    {
        /* Список доступных переменных
        $Операция                Наименование операции
        $Материал                Код / обозначение материала
        $МД                        Масса детали по КД
        $ИОТ                    Обозначения всех инструкций на операцию
        $Тшт                    Штучное время
        $Тпз                    Подготовительно-заключительное время
        $Оборудование            Список оборудования операции
        $ЕВ                        ЕИ для нормы расхода
        $КОИД                    Количество одновременно изготавливаемых деталей
        $МЗ                        Норма расхода
        $ОбозначениеПрограммы    Программа ЧПУ
        $ПрофильИРазмеры        Профиль и размеры заготовки
        $СОЖ                    Наименование используемой в операции СОЖ
        $Твердость                Твёрдость материала
        $То                        Сумма основных времён по переходам операции
        $Тв                        Сумма вспомогательных времён по переходам операции
        */
        string[] names = {"$Операция", "$Материал", "$МД", "$ИОТ", "$Тшт", "$Тпз", "$Оборудование", "$ЕВ", "$КОИД",
                               "$МЗ", "$ОбозначениеПрограммы", "$ПрофильИРазмеры", "$СОЖ", "$Твердость", "$То", "$Тв"};

        ТехнологическийПроцесс техпроцесс = операция.ТехнологическийПроцесс;

        Объект материалОперации = null;
        Объект материал = null;
        var материалы = операция.СвязанныеОбъекты["Материалы операции"];
        if (материалы.Any())
            материал = материалы.FirstOrDefault();
        if (материал != null)
            материалОперации = материал.СвязанныйОбъект["Материалы"];

        Объект дсеТП = техпроцесс.ИзготавливаемыеДСЕ.FirstOrDefault();

        string result = ""; //вспомогательная переменная - в ней формируется значение, которое запишется в переменную
        string temp = "";   //вспомогательная переменная для расчётов

        foreach (string name in names)
        {
            //MessageBox.Show(name);
            switch (name)
            {
                //Наименование операции
                case "$Операция":
                    {
                        Переменная["$Операция"] = операция.Наименование;
                        break;
                    }
                //Код / обозначение материала
                case "$Материал":
                    {
                        Переменная["$Материал"] = материалОперации != null ? материалОперации.Параметр["Код / обозначение"].ToString() : "";
                        break;
                    }
                //Масса детали по КД
                case "$МД":
                    {
                        if (дсеТП != null)
                        {
                            string md = дсеТП.Параметр["Масса"].ToString();
                            if (md != "0")
                                Переменная["$МД"] = дсеТП != null ? дсеТП.Параметр["Масса"].ToString() : "";
                        }
                        break;
                    }
                //Обозначения всех инструкций на операцию    
                case "$ИОТ":
                    {
                        result = "";
                        ObjectAccessor[] arr = операция.Инструкции.ToArray<ObjectAccessor>();
                        Объекты списокИнструкций = ПолучитьОбъектыПоСвязи(arr, "Инструкция из справочника");
                        //Объекты списокИнструкций = ТекущийОбъект.СвязанныеОбъекты["[Инструкции для операции].[Инструкция из справочника]"];
                        foreach (var инструкция in списокИнструкций)
                            if (инструкция.Параметр["Шифр / обозначение"].ToString() != "")
                                result = result + инструкция.Параметр["Шифр / обозначение"].ToString() + "; ";
                        if (result != "")
                            Переменная["$ИОТ"] = result.Substring(0, result.Length - 2);
                        break;
                    }
                //Штучное время
                case "$Тшт":
                    {
                        if (операция.Тшт != 0)
                            Переменная["$Тшт"] = string.Format(format2, операция.Тшт);
                        break;
                    }
                //Подготовительно-заключительное время
                case "$Тпз":
                    {
                        if (операция.Тпз != 0)
                            Переменная["$Тпз"] = string.Format(format2, операция.Тпз);
                        break;
                    }
                //Список оборудования операции
                case "$Оборудование":
                    {

                        result = "";
                        //Объекты списокОснащения = ТекущийОбъект.СвязанныеОбъекты["[Оснащение операции].[Оснащение из справочника СТО]"];
                        foreach (var оснащение in операция.СвязанныеОбъекты["Оборудование"])
                        {
                            result = result + оснащение.Параметр["Обозначение"].ToString() + " " + оснащение.Параметр["Наименование"].ToString() + "; ";
                        }
                        if (result != "")
                            Переменная["$Оборудование"] = result.Substring(0, result.Length - 2);
                        break;
                    }
                //ЕИ для нормы расхода
                case "$ЕВ":
                    {
                        if (материал != null)
                        {
                            Объект еиНрасх = материал.СвязанныйОбъект["ЕИ нормы расхода"];
                            if (еиНрасх != null)
                                Переменная["$ЕВ"] = еиНрасх.Параметр["Сокращённое наименование"];
                        }
                        break;
                    }
                //Количество одновременно изготавливаемых деталей
                case "$КОИД":
                    {
                        Переменная["$КОИД"] = операция.КОИД.ToString();
                        //Переменная["$КОИД"] = Параметр["Количество одновременно изготавливаемых деталей"];
                        break;
                    }
                //Норма расхода
                case "$МЗ":
                    {
                        double нормаРасхода = материал != null ? (double)материал["Норма расхода"] : 0;
                        Переменная["$МЗ"] = нормаРасхода > 0 ? нормаРасхода.ToString() : "";
                        break;
                    }
                //Программа ЧПУ
                case "$ОбозначениеПрограммы":
                    {
                        Переменная["$ОбозначениеПрограммы"] = операция.ПрограммаЧПУ;
                        //Переменная["$ОбозначениеПрограммы"] = Параметр["Программа ЧПУ"];
                        break;
                    }
                //Профиль и размеры заготовки
                case "$ПрофильИРазмеры":
                    {
                        Переменная["$ПрофильИРазмеры"] = материалОперации != null ? материалОперации.Параметр["[Сортамент]->[Наименование]"].ToString() + " " + материалОперации.Параметр["[Сортамент]->[Обозначение]"].ToString() : "";
                        break;
                    }
                //Наименование используемой в операции СОЖ
                case "$СОЖ":
                    {
                        result = "";
                        foreach (var оснащениеТП in операция.СвязанныеОбъекты["Оснащение ТП"])
                        {
                            var оснащениеИзКаталога = оснащениеТП.СвязанныйОбъект["b1fcc48e-9660-420c-88b3-e1d66649c2c0"];                  // Оснащение из каталога оснащения
                            if (оснащениеИзКаталога.Тип.ПорожденОт("Смазочно-охлаждающая жидкость"))
                            {
                                result = оснащениеИзКаталога.Параметр["Наименование"];
                                break;
                            }
                        }

                        if (result != "")
                            Переменная["$СОЖ"] = result;
                        else
                            Переменная["$СОЖ"] = "--";
                        break;
                    }
                //Твёрдость материала
                case "$Твердость":
                    {
                        double hardness = 0;
                        result = "--";  //если твёрдость не указана, вернётся прочерк
                        if (материалОперации != null)
                        {
                            //по Бринеллю
                            hardness = материалОперации.Параметр["Твёрдость по Бринеллю"];
                            if (hardness != 0)
                                result = hardness.ToString() + " HB";
                            else
                            {
                                //по Роквеллу
                                hardness = материалОперации.Параметр["Твёрдость по Роквеллу"];
                                if (hardness != 0)
                                    result = hardness.ToString() + " HR";
                                //по Виккерсу
                                else
                                {
                                    hardness = материалОперации.Параметр["Твёрдость по Виккерсу"];
                                    if (hardness != 0)
                                        result = hardness.ToString() + " HV";
                                }
                            }
                        }
                        Переменная["$Твердость"] = result;
                        break;
                    }
                //Сумма основных времён по переходам операции
                case "$То":
                    {
                        double sumTo = 0;
                        temp = "";
                        foreach (var переход in операция.Переходы)
                        {
                            temp = переход.То.ToString();
                            if (temp == "")
                                temp = "0";
                            sumTo = sumTo + Convert.ToDouble(temp);
                        }
                        if (sumTo != 0)
                            Переменная["$То"] = sumTo.ToString(format);
                        break;
                    }
                //Сумма вспомогательных времён по переходам операции
                case "$Тв":
                    {
                        double sumTv = 0;
                        temp = "";
                        foreach (var переход in операция.Переходы)
                        {
                            temp = переход.Тв.ToString();
                            if (temp == "")
                                temp = "0";
                            sumTv = sumTv + Convert.ToDouble(temp);
                        }
                        if (sumTv != 0)
                            Переменная["$Тв"] = sumTv.ToString(format);
                        break;
                    }
                //Если ошиблись в имени переменной
                default:
                    {
                        System.Windows.Forms.MessageBox.Show("Не найдена функция обработки переменной '" + name + "'\nУбедитесь в корректности её написания");
                        break;
                    }
            }
        }
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством переменных уникальные данные применительно к Операции
    //Список используемых переменных зависит от формируемой карты
    /****************************************************************************************************************************/
    public void Переменные(ТехнологическийПроцесс техпроцесс)
    {
        /* Список доступных переменных
        $M01                    Сводное наименование материала
        $КодМатериала            Код / обозначение материала
        $ЕВ                        ЕИ для нормы расхода
        $МД                        Масса детали по КД
        $ЕН                        Единица нормирования
        $Нрасх                    Норма расхода
        $КИМ                    Коэффициент использования материала
        $КодЗагот                Код заготовки / вид заготовки (отливки, прокат, поковки)
        $ПрофильИРазмеры        Профиль и размеры заготовки        
        $КД                        Количество деталей, изготавливаемых из одной заготовки            
        $МЗ                        Масса заготовки
        */

        Объект дсеТП = техпроцесс.ИзготавливаемыеДСЕ.FirstOrDefault();
        string tpinfo = ВыполнитьМакрос(Макрос_Теги_17, "СводноеНаименование", техпроцесс);
        var материалы = техпроцесс.СвязанныеОбъекты["Материалы ТП"];
        string errors = "";

        double МД = техпроцесс["Масса изготавливаемой детали"];

        int количествоМатериалов = материалы.Count;
        if (количествоМатериалов > 0)
        {
            //Проверка на количество материалов
            if (количествоМатериалов > 1)
            {
                ВыполнитьМакрос(Макрос_Теги_17, "ДобавитьЗамечания", "Для техпроцесса '" + tpinfo + "' указано "
                            + количествоМатериалов.ToString() + " материала(ов).");
            }

            string M01 = "";
            string ЕВ = "";
            string ЕН = "";
            string Нрасх = "";
            string КИМ = "";
            string КД = "";
            string КодМатериала = "";
            string ПрофильИРазмеры = "";
            string МЗ = "";

            bool естьЗамечания;

            var материал = материалы.FirstOrDefault();
            //foreach (var материал in материалы) - остальные материалы вынесены в содержание карты
            {
                string M011 = "";
                string ЕВ1 = "";
                string ЕН1 = "";
                string Нрасх1 = "";
                string КИМ1 = "";
                string КД1 = "";
                string КодМатериала1 = "";
                string ПрофильИРазмеры1 = "";
                string МЗ1 = "";

                естьЗамечания = false;

                Объект материалИзСправочника = материал.СвязанныйОбъект["Материал"];

                //Формирование данных
                M011 = материал["Наименование"];
                Объект еиНрасх = материал.СвязанныйОбъект["ЕИ нормы расхода"];
                if (еиНрасх != null)
                    ЕВ1 = еиНрасх.Параметр["Сокращённое наименование"];
                else
                    ЕВ1 = "";

                ЕН1 = материал["Единица нормирования"].ToString();
                Нрасх1 = материал["Норма расхода"].ToString();
                КИМ1 = материал["КИМ"].ToString();
                //Переменная["$КодЗагот"] = материалИзСправочника.Параметр["Сводное наименование"];                            
                КД1 = материал["КОИД"].ToString();
                МЗ1 = материал["Масса заготовки на деталь"].ToString();
                if (материалИзСправочника != null) //Данные по материалу из справочника материалов
                {
                    КодМатериала1 = материалИзСправочника.Параметр["Код / обозначение"];
                    ПрофильИРазмеры1 = материалИзСправочника.Параметр["[Сортамент]->[Наименование]"]
                                                     + " " + материалИзСправочника.Параметр["[Сортамент]->[Обозначение]"];
                }
                else    //Данные из списка объектов Материалы (техпроцесса)
                {
                    ВыполнитьМакрос(Макрос_Теги_17, "ДобавитьЗамечания", "Для техпроцесса '" + tpinfo + "' не указана связь между материалом техпроцесса '"
                            + M011 + "' и материалом из справочника материалов.");
                    string r1 = материал["Длина заготовки"].ToString();
                    string r2 = материал["Диаметр/ширина заготовки"].ToString();
                    if ((r1 != "") && (r1 != "0"))
                    {
                        if ((r2 != "") && (r2 != "0"))
                            ПрофильИРазмеры1 = r1 + "x" + r2;
                        else
                            ПрофильИРазмеры1 = r1;
                    }
                    else
                        if ((r2 != "") && (r2 != "0"))
                        ПрофильИРазмеры1 = r2;
                }

                //Добавление данных 
                ДополнитьДанные(ref M01, M011, "; ", ref естьЗамечания);
                ДополнитьДанные(ref ЕВ, ЕВ1, "; ", ref естьЗамечания);

                ДополнитьДанные(ref ЕН, ЕН1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref Нрасх, Нрасх1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref КИМ, КИМ1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref КД, КД1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref МЗ, МЗ1, "; ", ref естьЗамечания);

                if (естьЗамечания)
                    ВыполнитьМакрос(Макрос_Теги_17, "ДобавитьЗамечания", "Для техпроцесса '" + tpinfo + "' по материалу '" + M011 + "' есть замечания в заполнении данных.");

                //не проверяем замечания, т.к. они связаны не только с материалом

                ДополнитьДанные(ref КодМатериала, КодМатериала1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref ПрофильИРазмеры, ПрофильИРазмеры1, "; ", ref естьЗамечания);
            }

            //Вывод данных в отчёт через переменные
            if (M01 != "")
                Переменная["$M01"] = M01.Substring(0, M01.Length - 2);
            if (ЕВ != "")
                Переменная["$ЕВ"] = ЕВ.Substring(0, ЕВ.Length - 2);
            if (ЕН != "")
                Переменная["$ЕН"] = ЕН.Substring(0, ЕН.Length - 2);
            if (Нрасх != "")
                Переменная["$Нрасх"] = Нрасх.Substring(0, Нрасх.Length - 2);
            if (КИМ != "")
                Переменная["$КИМ"] = КИМ.Substring(0, КИМ.Length - 2);
            //Переменная["$КодЗагот"] = материалИзСправочника.Параметр["Сводное наименование"];                            
            if (КД != "")
                Переменная["$КД"] = КД.Substring(0, КД.Length - 2);
            if (МЗ != "")
                Переменная["$МЗ"] = МЗ.Substring(0, МЗ.Length - 2);
            if (КодМатериала != "")
                Переменная["$КодМатериала"] = КодМатериала.Substring(0, КодМатериала.Length - 2);
            if (ПрофильИРазмеры != "")
                Переменная["$ПрофильИРазмеры"] = ПрофильИРазмеры.Substring(0, ПрофильИРазмеры.Length - 2);
        }
        if (МД > 0)
        {
            Переменная["$МД"] = МД.ToString();
        }
    }




    /****************************************************************************************************************************/
    //Процедура дополнения данных
    /****************************************************************************************************************************/
    public void ДополнитьДанные(ref string целеваяСтрока, string текущаяПодстрока, string разделитель, ref bool естьЗамечания)
    {
        if ((текущаяПодстрока != "") && (текущаяПодстрока != "0"))
            целеваяСтрока = целеваяСтрока + текущаяПодстрока + разделитель;
        else
            естьЗамечания = true;
    }
    //==========================================================================================================================//    



    /****************************************************************************************************************************/
    //Функция, возвращающая список объектов связанного справочника
    /****************************************************************************************************************************/
    public Объекты ПолучитьОбъектыПоСвязи(ObjectAccessor[] arr, string наименованиеСвязи)
    {
        Объекты списокОбъектов = new Объекты();
        foreach (var obj in arr)
        {
            Объект объект = obj.СвязанныйОбъект[наименованиеСвязи];
            if (объект != null)
                списокОбъектов.Add(объект);
        }
        return списокОбъектов;
    }
    //==========================================================================================================================//
}
