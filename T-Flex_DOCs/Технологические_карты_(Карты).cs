/* Ссылки
TFlex.Model.Technology.dll
TFlex.Reporting.CAD.dll
TFlex.Reporting.Technology.dll */

using System;
using System.Collections.Generic;
using System.Linq;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.Model.Technology.Macros.ObjectModel;
using TFlex.Reporting.CAD.MacroGenerator.ObjectModel;
using TFlex.Reporting.Technology.Macros;

namespace TechnologicalMaps
{
    public class Macro : ReportMacroProvider
    {
        public Macro(ReportGenerationMacroContext context)
            : base(context)
        {
        }

        public override void Run()
        {
        }

        /*----------------------------------------------------- Доступные отчёты ----------------------------------------------------
        //ВыполнитьМакрос("Технологические карты (Карты)", "");
        ВыполнитьМакрос("Технологические карты (Карты)", "Карта_эскизов");
        ВыполнитьМакрос("Технологические карты (Карты)", "Операционная_карта_с_эскизами");
        ВыполнитьМакрос("Технологические карты (Карты)", "Операционная_карта_контроля");
        ВыполнитьМакрос("Технологические карты (Карты)", "Операционная_карта_форма_3");
        ВыполнитьМакрос("Технологические карты (Карты)", "Титульный_лист");
        ВыполнитьМакрос("Технологические карты (Карты)", "Ведомость_оснастки_или_оборудования", ведомость, выводитьОперацию);
            ведомость:			ВО_ф2, ВО_ф3, ВОБ_ф2		- доступные ведомости для формирования
            выводитьОперацию:	true/false					- нужно ли выводить операцию перед оснасткой/оборудованием
        ВыполнитьМакрос("Технологические карты (Карты)", "Карта", карта);
            карта:				КТП, МОК_ф1, МОК_ф3, МК_ф1, МК_ф3            - доступные карты для формирования
                                МОК_ф1_сб, МОК_ф3_сб, МК_ф1_сб, МК_ф3_сб     - аналоги для техпроцессов со сборочными операциями
        ВыполнитьМакрос("Технологические карты (Карты)", "Комплектовочная_карта", горизонтальная);
            горизонтальная:     true/false                  - форма 6 (false) или форма 7 (true)
        ----------------------------------------------------------------------------------------------------------------------------*/

        private const string format3 = "{0:0.##}";
        private const bool разбиватьТекстПерехода = true;        //Необходимо ли разбивать текст перехода в таблице отчёта
        private const int ширинаДляГоризонтальнойФормы = 125;    //Ширина ячейки таблицы (в символах) для текста перехода в карте
        private const int ширинаДляГоризонтальнойФормыСВременем = 105;    //Ширина ячейки таблицы (в символах) для текста перехода в карте, где указывается время
        private const int ширинаДляВертикальнойФормы = 65;

        private const string константаИнструкций = "<$Инструкции>"; // для вывода инструкций операций в тексте инструкции ТП

        /****************************************************************************************************************************/
        //Карты эскизов (формы 6, 7 и 8)
        /****************************************************************************************************************************/
        public void Карта_эскизов()
        {
            //Получение объекта отчёта
            Операция операция = (Операция)ТекущийОбъект;
            if (операция == null)
                Ошибка("\r\nНевозможно сформировать карту эскизов: объект '{0}' не является операцией", ТекущийОбъект);

            //Заполнение переменных CAD'а
            Переменная["$graph_33"] = "КЭ";

            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", операция);

            //Инициализация шаблона
            Текст текст = Текст["Текст1"];
            ШаблонСтроки Стр_шаблон = текст["Страница"];

            //Обработка графической части
            Объект эскиз = операция.Эскиз;
            if (эскиз != null)
            {
                //*В зависимости от типа файла необходимо выполнять разные действия. 
                //- Эскиз CAD может вставляться как многостраничный, так и масштабированный в ячейку. 
                //- Изображение (jpg, bmp, png...) вставляется только в ячейку.*/
                if (эскиз.Тип.ПорожденОт("Документ системы T-FLEX CAD"))
                {
                    //Получение количества страниц эскиза
                    int количествоСтраниц = Эскиз.ПолучитьКоличествоСтраниц(эскиз);
                    if (количествоСтраниц > 1)
                    {
                        //Создание необходимого количества страниц для отображения многостраничного эскиза
                        for (int i = 1; i <= количествоСтраниц; i++)
                        {
                            Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                            страницаОтчёта["Страница"].ВставитьЭскиз(эскиз, i);
                        }

                        //Вставка внешнего многостраничного эскиза в отчёт
                        //ВставитьЭскиз("$Image", эскиз);

                        //Вставка вложенного многостраничного эскиза
                        //см. выше: страницаОтчёта["Страница"].ВставитьЭскиз(эскиз, i);
                        //ВставитьВложенныйЭскиз(эскиз);
                    }
                    else
                    {
                        //Вставка эскиза CAD в ячейку (масштабирование)
                        Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                        страницаОтчёта["Страница"].ВставитьЭскиз(эскиз);
                    }
                }
                else
                {
                    //Вставка изображения в ячейку
                    Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                    страницаОтчёта["Страница"].ВставитьЭскиз(эскиз);
                }
            }
            else
            {
                //Добавление замечания
                string operinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", операция);
                ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Операция '" + operinfo + "' не содержит эскиз.");

                //Создание пустого параграф-текста
                Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
            }

            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//	



        /****************************************************************************************************************************/
        //Операционная карта с эскизами (форма 2)
        /****************************************************************************************************************************/
        public void Операционная_карта_с_эскизами()
        {
            //Получение объекта отчёта
            Операция операция = (Операция)ТекущийОбъект;
            if (операция == null)
                Ошибка("\r\nНевозможно сформировать операционную карту с эскизами: объект '{0}' не является операцией", ТекущийОбъект);

            //Заполнение переменных CAD'а
            Переменная["$graph_33"] = "ОКЭ";
            //ВставитьЭскиз("$Image", ТекущийОбъект.СвязанныйОбъект["Операционный эскиз"]);

            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", операция);
            ВыполнитьМакрос(Макрос_Переменные, "Переменные", операция);

            //Обработка графической части
            Объект эскиз = операция.Эскиз;

            //Инициализация шаблона
            Текст текстЭ = Текст["ТекстЭскиз"];
            ШаблонСтроки шаблонЭ = текстЭ["Эскиз"];
            Строка строкаЭ = текстЭ.Таблица.ДобавитьСтроку(шаблонЭ);

            if (эскиз != null)
            {
                //Вставка эскиза
                строкаЭ["Эскиз"].ВставитьЭскиз(операция.Эскиз);
            }
            else
            {
                //Добавление замечания
                string operinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", операция);
                ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Операция '" + operinfo + "' не содержит эскиз.");
            }

            //Инициализация шаблона
            Текст текст = Текст["Текст1"];

            ШаблонСтроки О_шаблон = текст["Переход"];
            ШаблонСтроки ТП_шаблон = текст["ОснащениеПерехода"];
            ШаблонСтроки Р_шаблон = текст["ОсобыеУказания"];

            //Заполнение информации по переходам
            string букваО = "О";
            Переход[] списокПереходов = операция.Переходы;
            foreach (Переход переход in списокПереходов)
            {
                //Выводить ли переход в карту
                bool актуально = ВыполнитьМакрос(Макрос_Теги, "ЭлементАктуален", переход);
                if (!актуально)
                    continue;

                //Заполнение перехода
                if (!разбиватьТекстПерехода)
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, букваО);
                else
                {
                    int ширина = ширинаДляГоризонтальнойФормыСВременем;
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, ширина, букваО, true);
                }

                букваО = "";    //Следующий переход начнётся без символа "О" (если не будет оснащения или режимов)

                Оснащение[] оснащениеПерехода = переход.Оснащение;
                if (оснащениеПерехода.Length > 0)   //если в перехода есть оснащение, то его нужно заполнить
                {
                    //Заполнение оснащения перехода
                    ВыполнитьМакрос(Макрос_Теги, "ВывестиОснащениеПерехода", переход, текст, ТП_шаблон, 0, 1, "; ");

                    букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
                }

                Режим[] списокПараметровРежима = переход.Режимы;
                if (списокПараметровРежима.Length > 0)  //если в перехода есть режим, то его нужно заполнить
                {
                    //Заполнение режимов обработки
                    Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуР_МехОбр", переход, строкаР, 1);

                    букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
                }
            }

            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//



        /****************************************************************************************************************************/
        //Операционная карта контроля (форма 2)
        /****************************************************************************************************************************/
        public void Операционная_карта_контроля()
        {
            //Получение объекта отчёта
            Операция операция = (Операция)ТекущийОбъект;
            if (операция == null)
                Ошибка("\r\nНевозможно сформировать операционную карту контроля: объект '{0}' не является операцией", ТекущийОбъект);

            //Заполнение переменных CAD'а
            Переменная["$graph_33"] = "ОКК";

            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", операция);
            ВыполнитьМакрос(Макрос_Переменные, "Переменные", операция);

            /* ------- Проверка типа операции ------- */
            string tip = операция.Тип;
            string kod = операция.Код;
            if (kod.Length == 4)
                kod = kod.Substring(0, 2);
            if (!((tip == "Технический контроль") || (kod == "02")))
            {
                string operinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", операция);
                ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Операция '" + operinfo
                                    + "' не относится к типу контрольных операций.");
            }
            /* ----------- конец проверки ----------- */

            //Инициализация шаблона
            Текст текст = Текст["Текст1"];
            ШаблонСтроки Р_шаблон = текст["Параметры"];

            //Заполнение инструкций операции
            string инструкцииДоОперации = ВыполнитьМакрос(Макрос_Теги, "ПолучитьИнструкции", операция, 1);
            string инструкцииПослеОперации = ВыполнитьМакрос(Макрос_Теги, "ПолучитьИнструкции", операция, 2);
            Переменная["$ИОТ"] = (инструкцииДоОперации != "" && инструкцииПослеОперации != "")
                ? инструкцииДоОперации + "; " + инструкцииПослеОперации : инструкцииДоОперации + инструкцииПослеОперации;

            //Заполнение информации по переходам
            Переход[] списокПереходов = операция.Переходы;
            int количествоСтрок = 0;
            foreach (Переход переход in списокПереходов)
            {
                //Выводить ли переход в карту
                bool актуально = ВыполнитьМакрос(Макрос_Теги, "ЭлементАктуален", переход);
                if (!актуально)
                    continue;
                количествоСтрок++;

                Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);

                //Список инструментов, с помощью которых производится контроль
                Оснащение[] оснащениеПерехода = переход.Оснащение;
                string обозначениеТО = "";
                string наименованиеТО = "";
                int kol = 0;
                foreach (var оснащение in оснащениеПерехода)
                {
                    Объект оснащениеСТО = оснащение.СвязанныйОбъект["Оснащение из справочника СТО"];
                    if (оснащениеСТО != null)
                    {
                        обозначениеТО += оснащениеСТО.Параметр["Обозначение"] + "\r\n";
                        наименованиеТО += оснащениеСТО.Параметр["Наименование"] + "\r\n";
                    }
                    else
                        kol++;
                }

                //Удаление последнего (лишнего) перевода на следующую строку
                if (обозначениеТО != "")    //проверка на "наименованиеТО" не нужна, т.к. они идут парой
                {
                    int size = ("\r\n").Length;
                    обозначениеТО = обозначениеТО.Remove(обозначениеТО.Length - size, size);
                    наименованиеТО = наименованиеТО.Remove(наименованиеТО.Length - size, size);
                }

                //Формирование замечаний (если необходимо)
                if (kol > 0)
                {
                    string perehinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", переход);
                    ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "В переходе '" + perehinfo
                                    + "' не указана связь между Оснащением перехода и Оснащением из справочника СТО для "
                                    + kol.ToString() + " из " + (оснащениеПерехода.Length).ToString() + " объекта(ов).");
                }

                //Вывод данных в отчёт
                строкаР["Параметры"].Текст = переход.Текст;
                строкаР["Обозначение ТО"].Текст = обозначениеТО;
                строкаР["Наименование ТО"].Текст = наименованиеТО;
                строкаР["Объём"].Текст = переход.Параметр["Объём контроля"];

                string время = String.Format(format3, переход.То) + "/" + String.Format(format3, переход.Тв);
                if (время != "0/0")
                    строкаР["То"].Текст = время;
            }

            //Добавление пустой строки, если не было сформировано ни одной записи
            if (количествоСтрок < 1)
            {
                Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
            }

            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//



        /****************************************************************************************************************************/
        //Операционная карта (форма 3)
        /****************************************************************************************************************************/
        public void Операционная_карта_форма_3()
        {
            //Получение объекта отчёта
            Операция операция = (Операция)ТекущийОбъект;
            if (операция == null)
                Ошибка("\r\nНевозможно сформировать операционную карту: объект '{0}' не является операцией", ТекущийОбъект);

            //Заполнение переменных CAD'а
            Переменная["$graph_33"] = "ОК";

            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", операция);
            ВыполнитьМакрос(Макрос_Переменные, "Переменные", операция);

            //Инициализация шаблона
            Текст текст = Текст["Текст1"];
            ШаблонСтроки О_шаблон = текст["Переход"];
            ШаблонСтроки ТП_шаблон = текст["ОснащениеПерехода"];
            ШаблонСтроки Р_шаблон = текст["ОсобыеУказания"];

            //Заполнение информации по переходам
            string букваО = "О";
            Переход[] списокПереходов = операция.Переходы;
            int количествоСтрок = 0;
            foreach (Переход переход in списокПереходов)
            {
                //Выводить ли переход в карту
                bool актуально = ВыполнитьМакрос(Макрос_Теги, "ЭлементАктуален", переход);
                if (!актуально)
                    continue;
                количествоСтрок++;

                //Заполнение перехода
                if (!разбиватьТекстПерехода)
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, букваО);
                else
                {
                    int ширина = ширинаДляГоризонтальнойФормыСВременем;
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, ширина, букваО, true);
                }

                букваО = "";    //Следующий переход начнётся без символа "О" (если не будет оснащения или режимов)

                Оснащение[] оснащениеПерехода = переход.Оснащение;
                if (оснащениеПерехода.Length > 0)   //если в перехода есть оснащение, то его нужно заполнить
                {
                    //Заполнение оснащения перехода
                    ВыполнитьМакрос(Макрос_Теги, "ВывестиОснащениеПерехода", переход, текст, ТП_шаблон, 0, 1, "; ");

                    букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
                }

                Режим[] списокПараметровРежима = переход.Режимы;
                if (списокПараметровРежима.Length > 0)  //если в перехода есть режим, то его нужно заполнить
                {
                    //Заполнение режимов обработки
                    Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуР_МехОбр", переход, строкаР, 1);

                    букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
                }

                //Добавляем разделитель между блоками информации
                if (букваО != "")
                {
                    Строка строкаТ = текст.Таблица.ДобавитьСтроку(ТП_шаблон);
                }
            }

            //Добавление пустой строки, если не было сформировано ни одной записи
            if (количествоСтрок < 1)
            {
                Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
            }

            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//



        /****************************************************************************************************************************/
        //Титульный лист (формы 1, 2 и 3)
        /****************************************************************************************************************************/
        public void Титульный_лист()
        {
            //Получение объекта отчёта
            ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;
            if (техпроцесс == null)
                Ошибка("\r\nНевозможно сформировать титульный лист: объект '{0}' не является технологическим процессом", ТекущийОбъект);

            Переменная["$graph_33"] = "ТЛ";
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", техпроцесс);

            //Заполнение переменных основной части
            Переменная["$ТЛ_1"] = "";

            string tip = техпроцесс.Тип;
            tip = tip.ToLower();
            Переменная["$ТЛ_3"] = "КОМПЛЕКТ ДОКУМЕНТОВ" + "\nна " + tip + " \n" + техпроцесс.Обозначение + " " + техпроцесс.Наименование;

            Переменная["$ТЛ_5"] = DateTime.Today.ToString("dd.MM.yyyy");
            Переменная["$ТЛ_6"] = "Положение №1";

            //Вывод замечаний (если есть)
            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//



        /****************************************************************************************************************************/
        //Ведомость оборудования (форма 2)
        //Ведомость оснастки (формы 2 и 3)
        /****************************************************************************************************************************/
        public void Ведомость_оснастки_или_оборудования(string ведомость, bool выводитьОперацию)
        {
            //Получение объекта отчёта
            ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;
            if (техпроцесс == null)
                Ошибка("\r\nНевозможно сформировать ведомость: объект '{0}' не является технологическим процессом", ТекущийОбъект);

            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", техпроцесс);

            //Инициализация шаблона
            Текст текст = Текст["Текст1"];
            ШаблонСтроки В_шаблон = new ШаблонСтроки();
            ШаблонСтроки Т_шаблон = new ШаблонСтроки();
            ШаблонСтроки Д_шаблон = new ШаблонСтроки();

            //Определение типа ведомости
            switch (ведомость)
            {
                case "ВО_ф2":
                    Переменная["$graph_33"] = "ВО";
                    В_шаблон = текст["Операция"];
                    Т_шаблон = текст["Обозначение ТО"];
                    Д_шаблон = текст["Оборудование"];
                    break;
                case "ВО_ф3":
                    Переменная["$graph_33"] = "ВО";
                    Т_шаблон = текст["Обозначение ТО"];
                    выводитьОперацию = false;   //для формы строки для операции не предусмотрено
                    break;
                case "ВОБ_ф2":
                    Переменная["$graph_33"] = "ВОБ";
                    В_шаблон = текст["Операция"];
                    Т_шаблон = текст["Обозначение ТО"];
                    Д_шаблон = текст["Оборудование"];
                    break;
                default:
                    ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Неверно задан тип ведомости!");
                    break;
            }

            //Получаем список операций техпроцесса, которые подлежат выводу в карту
            Операция[] списокОпераций = техпроцесс.Операции.Where(оп =>
            {
                //Выводить ли операцию в карту
                bool актуально = ВыполнитьМакрос(Макрос_Теги, "ЭлементАктуален", оп);
                return актуально;
            }).ToArray();

            //Регулярные данные для техпроцесса
            int count = 0;
            int количествоСтрок = 0;
            foreach (Операция операция in списокОпераций)
            {
                count = 0;
                количествоСтрок++;

                if (выводитьОперацию)
                {
                    //Заполнение операции
                    Строка строкаВ = текст.Таблица.ДобавитьСтроку(В_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуВ", операция, строкаВ);
                }

                //Заполнение оснащения операции
                if ((ведомость == "ВО_ф2") || (ведомость == "ВО_ф3"))
                    count += ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуТ_дляВО", операция, текст, Т_шаблон, выводитьОперацию, 1);

                //Заполнение оборудования операции
                if (ведомость == "ВОБ_ф2")
                    count += ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуД_дляВОБ", операция, текст, Д_шаблон);

                //Добавление строки-разделителя
                if ((count > 0) || выводитьОперацию)
                {
                    //После последней записи разделитель не нужен
                    if (ReferenceEquals(операция, списокОпераций.Last()))
                        continue;

                    //Используем шаблон строки Т, т.к. он есть во всех используемых шаблонах отчётов
                    Строка строкаТ = текст.Таблица.ДобавитьСтроку(Т_шаблон);
                }
                else
                    количествоСтрок--;
            }

            //Добавление пустой строки, если не было сформировано ни одной записи
            if (количествоСтрок < 1)
            {
                Строка строкаР = текст.Таблица.ДобавитьСтроку(Т_шаблон);
            }

            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//

        /*
        private const string КТП = "КТП";
        private const string МОК_ф1 = "МОК_ф1";
        private const string МОК_ф2 = "МОК_ф2";
        private const string МОК_ф3 = "МОК_ф3";
        private const string МК_ф1 = "МК_ф1";
        private const string МК_ф3 = "МК_ф3";
        private const string МОК_ф1_сб = "МОК_ф1_сб";
        private const string МОК_ф3_сб = "МОК_ф3_сб";
        private const string МК_ф1_сб = "МК_ф1_сб";
        private const string МК_ф3_сб = "МК_ф3_сб";
        */

        /****************************************************************************************************************************/
        //Маршрутная карта (формы 1 и 3)
        //Маршрутно-операционная карта (формы 1 2 3)
        //Маршрутная карта (формы 1 и 3) (сборочная)
        //Маршрутно-операционная карта (формы 1 и 3) (сборочная)
        //Карта технологического процесса (форма 1)
        /****************************************************************************************************************************/
        public void Карта(string карта)
        {
            //Получение объекта для отчёта
            ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;
            if (техпроцесс == null)
                Ошибка("\r\nНевозможно сформировать карту: объект '{0}' не является технологическим процессом", ТекущийОбъект);

            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", техпроцесс);
            ВыполнитьМакрос(Макрос_Переменные, "Переменные", техпроцесс);

            //Инициализация шаблона
            Текст текст = Текст["Текст1"];

            ШаблонСтроки МТ_шаблон = текст["МатериалТП"];
            ШаблонСтроки И_шаблон = текст["Инструкции"];
            ШаблонСтроки ИДО_шаблон = И_шаблон;
            ШаблонСтроки А_шаблон = new ШаблонСтроки();
            ШаблонСтроки Б_шаблон = new ШаблонСтроки();
            ШаблонСтроки В_шаблон = new ШаблонСтроки();
            ШаблонСтроки Г_шаблон = new ШаблонСтроки();
            ШаблонСтроки Д_шаблон = new ШаблонСтроки();
            ШаблонСтроки Е_шаблон = new ШаблонСтроки();
            ШаблонСтроки КЛ_шаблон = текст["ОбозначениеДСЕ"];
            ШаблонСтроки М_шаблон = текст["Материал"];
            ШаблонСтроки ТО_шаблон = текст["ОснащениеОперации"];
            ШаблонСтроки О_шаблон = текст["Переход"];
            ШаблонСтроки ТП_шаблон = текст["ОснащениеПерехода"];
            ШаблонСтроки Р_шаблон = new ШаблонСтроки();
            ШаблонСтроки ИПП_шаблон = И_шаблон;
            ШаблонСтроки Рз_шаблон = текст["Разделитель"];

            //Определяем, нужно ли в отчёте выводить данные по сборке
            int sb_index = карта.IndexOf("_сб");
            bool сборочная = sb_index != -1;
            if (сборочная)
                карта = карта.Substring(0, sb_index);

            bool горизонтальнаяФорма = true;
            switch (карта)
            {
                case "КТП":
                case "МОК_ф1":
                case "МОК_ф2":
                case "МК_ф1":
                    А_шаблон = текст["Операция"];
                    Б_шаблон = текст["Оборудование"];
                    break;
                case "МОК_ф3":
                case "МК_ф3":
                    В_шаблон = текст["Операция"];
                    Г_шаблон = текст["ИнструкцииПО"];
                    Д_шаблон = текст["Оборудование"];
                    Е_шаблон = текст["Проф"];
                    горизонтальнаяФорма = false;
                    break;
                default:
                    ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", "Неверно задан тип технологической карты!");
                    break;
            }

            switch (карта)
            {
                case "КТП":
                    Переменная["$graph_33"] = "КТП";
                    Р_шаблон = текст["ОсобыеУказания"];
                    break;
                case "МОК_ф1":
                case "МОК_ф3":
                    Переменная["$graph_33"] = "МОК";
                    break;
                case "МОК_ф2":
                    Переменная["$graph_33"] = "МОК";
                    Р_шаблон = текст["ОсобыеУказания"];
                    break;
                case "МК_ф1":
                case "МК_ф3":
                    Переменная["$graph_33"] = "МК";
                    break;
            }

            if (карта != "МОК_ф2")
            {
                //Заполнение материалов на техпроцесс (второй и последующие, заданные в ТП)
                string букваМ = "М";
                Материал[] материалы = техпроцесс.Материалы;
                for (int i = 1; i < материалы.Length; i++)
                {
                    //Заполняем строку материала
                    Строка строкаМТ = текст.Таблица.ДобавитьСтроку(МТ_шаблон);
                    строкаМТ["букваМ"].Текст = букваМ;
                    строкаМТ["МатериалТП"].Текст = ВыполнитьМакрос(Макрос_Теги, "СформироватьСтрокуМатериалаТП_дляМК", материалы[i]);

                    букваМ = "";
                }

                //Добавляем разделитель между материалами техпроцесса и последующими данными
                if (букваМ == "")
                {
                    Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
                }

                string result = "";
                //Заполнение инструкции на техпроцесс
                Инструкция[] инструкцииТП = техпроцесс.Инструкции;
                foreach (var инструкция in инструкцииТП)
                {
                    string текстИнструкцииТП = инструкция.Текст;
                    if (текстИнструкцииТП.Contains(константаИнструкций))
                    {
                        текстИнструкцииТП = текстИнструкцииТП.Replace(константаИнструкций, ПолучитьВсеИнструкцииПоОперациям(техпроцесс));
                    }
                    result = result + текстИнструкцииТП + "; ";
                }
                if (result != "")
                {
                    result = result.Remove(result.Length - 2, 2);

                    var строки = РазбитьТекст(result, ширинаДляГоризонтальнойФормы);
                    foreach (string строка in строки)
                    {
                        Строка строкаИ = текст.Таблица.ДобавитьСтроку(И_шаблон);
                        строкаИ["Инструкции"].Текст = строка;
                    }

                    //Добавим разделитель между инструкцией к техпроцессу и операциями
                    Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
                    строкаРз["Разделитель"].Текст = "";
                }
            }


            //Регулярные данные для техпроцесса
            Операция[] списокОпераций = техпроцесс.Операции;

            //Проверка наличия сборочных операций для сборочных карт
            if (сборочная && !списокОпераций.Any(оп => оп.Тип.ПорожденОт("Сборочная операция")))
            {
                сборочная = false;
                string tpinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", техпроцесс);
                ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания",
                    "Среди операций технологического процесса '" + tpinfo + "' не найдено ни одной сборочной операции.");
            }

            bool актуально = true;
            foreach (Операция операция in списокОпераций)
            {
                //Выводить ли операцию в карту
                актуально = ВыполнитьМакрос(Макрос_Теги, "ЭлементАктуален", операция);
                if (!актуально)
                    continue;

                //Наличие видов инструкции в операции
                Tuple<bool, bool, bool> наличиеИнструкций = ВыполнитьМакрос(Макрос_Теги, "НаличиеИнструкций", операция);
                bool flagIDO = наличиеИнструкций.Item1;
                bool flagIPO = наличиеИнструкций.Item2;
                bool flagIPP = наличиеИнструкций.Item3;

                if (карта != "МОК_ф2")
                {
                    //Заполнение инструкции до операции
                    if (flagIDO)
                    {
                        Строка строкаИДО = текст.Таблица.ДобавитьСтроку(ИДО_шаблон);
                        ВыполнитьМакрос(Макрос_Теги, "ВывестиИнструкции", операция, строкаИДО, 1);
                    }
                }

                //Заполнение строк А и Б (для соответствующих карт)
                if (карта == "КТП" || карта == "МОК_ф1" || карта == "МОК_ф2" || карта == "МК_ф1")
                {
                    //Заполнение операции
                    Строка строкаА = текст.Таблица.ДобавитьСтроку(А_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуА", операция, строкаА);

                    //Заполнение оборудования и исполнителей
                    Строка строкаБ = текст.Таблица.ДобавитьСтроку(Б_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуБ_дляМК", операция, строкаБ);
                }

                //Заполнение строк В, Г, Д и Е (для соответствующих карт)
                if (карта == "МОК_ф3" || карта == "МК_ф3")
                {
                    //Заполнение операции
                    Строка строкаВ = текст.Таблица.ДобавитьСтроку(В_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуВ", операция, строкаВ);

                    //Заполнение инструкций после операции - строки Г
                    if (flagIPO)
                    {
                        Строка строкаГ = текст.Таблица.ДобавитьСтроку(Г_шаблон);
                        ВыполнитьМакрос(Макрос_Теги, "ВывестиИнструкции", операция, строкаГ, 2);
                    }

                    //Проверка наличия оборудования
                    Оснащение[] оснащениеОперации = операция.Оснащение;
                    bool flagOb = false;
                    foreach (var оснащение in оснащениеОперации)
                    {
                        Объект оснащениеСТО = оснащение.СвязанныйОбъект["Оснащение из справочника СТО"];
                        if (оснащениеСТО != null)
                            if (оснащениеСТО.Тип.ПорожденОт("Оборудование"))
                                flagOb = true;
                    }

                    if (flagOb) //если оборудование есть
                    {
                        //Заполнение оборудования
                        Строка строкаД = текст.Таблица.ДобавитьСтроку(Д_шаблон);
                        ВыполнитьМакрос(Макрос_Теги, "ВывестиОборудование", операция, строкаД);
                    }

                    //Заполнение исполнителей
                    Строка строкаЕ = текст.Таблица.ДобавитьСтроку(Е_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуЕ", операция, строкаЕ);
                }

                if (карта != "МОК_ф2")
                {
                    //Материалы на операцию
                    bool запретВводаМатериалов = техпроцесс.Параметр["9cb66d93-af18-43a3-85e9-06997828faf1"]; //Запретить ввод материала на операциях и переходах
                    if (!запретВводаМатериалов)
                    {
                        Материал[] списокМатериалов = операция.Материалы;
                        foreach (Материал материал in списокМатериалов)
                        {
                            Строка строкаМ = текст.Таблица.ДобавитьСтроку(М_шаблон);
                            ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуМ_дляМК", материал, строкаМ);
                        }
                    }
                }

                //Заполнение оснащения операции
                ВыполнитьМакрос(Макрос_Теги, "ВывестиОснащениеОперации", операция, текст, ТО_шаблон, 0, 1, 1, "; ");

                //Заполнение комплектующих на операцию
                if (сборочная)
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуКЛ", операция, текст, КЛ_шаблон, горизонтальнаяФорма);

                //Заполнение переходов и входящих в них элементов (для соответствующих карт)
                if (карта == "КТП" || карта == "МОК_ф1" || карта == "МОК_ф2" || карта == "МОК_ф3")
                {
                    //Заполнение информации по переходам
                    string букваО = "О";
                    Переход[] списокПереходов = операция.Переходы;
                    foreach (Переход переход in списокПереходов)
                    {
                        //Выводить ли переход в карту
                        актуально = ВыполнитьМакрос(Макрос_Теги, "ЭлементАктуален", переход);
                        if (!актуально)
                            continue;

                        //Заполнение перехода
                        if (!разбиватьТекстПерехода)
                            ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуО", переход, текст, О_шаблон, букваО);
                        else
                        {
                            int ширина = горизонтальнаяФорма ? ширинаДляГоризонтальнойФормы : ширинаДляВертикальнойФормы;
                            ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуО", переход, текст, О_шаблон, ширина, букваО, true);
                        }

                        букваО = "";    //Следующий переход начнётся без символа "О" (если не будет оснащения или режимов)

                        Оснащение[] оснащениеПерехода = переход.Оснащение;
                        if (оснащениеПерехода.Length > 0)   //если в перехода есть оснащение, то его нужно заполнить
                        {
                            //Заполнение оснащения перехода
                            ВыполнитьМакрос(Макрос_Теги, "ВывестиОснащениеПерехода", переход, текст, ТП_шаблон, 0, 1, "; ");

                            букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
                        }

                        //Вывод режимов в карту технологического процесса
                        if (карта == "КТП" || карта == "МОК_ф2")
                        {
                            Режим[] списокПараметровРежима = переход.Режимы;
                            if (списокПараметровРежима.Length > 0)  //если в перехода есть режим, то его нужно заполнить
                            {
                                //Заполнение режимов обработки
                                Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
                                if (карта == "КТП")
                                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуР_МехОбр", переход, строкаР, 1);
                                else if (карта == "МОК_ф2")
                                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуР_МехОбр", переход, строкаР, 1, true);

                                букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
                            }
                        }
                    }
                }

                if (карта != "МОК_ф2")
                {
                    //Заполнение инструкции операции после переходов
                    if (flagIPP)
                    {
                        Строка строкаИПП = текст.Таблица.ДобавитьСтроку(ИПП_шаблон);
                        ВыполнитьМакрос(Макрос_Теги, "ВывестиИнструкции", операция, строкаИПП, 3);
                    }
                }

                //Добавляем разделитель между блоками информации
                Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
                строкаРз["Разделитель"].Текст = "";
            }

            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//    

        public List<string> РазбитьТекст(string текст, int ширина)
        {
            if (String.IsNullOrEmpty(текст))
                return new List<string>(0);

            string[] массивТекста = текст.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);

            List<string> разделённыйТекст = new List<string>();
            foreach (string элемент in массивТекста)
            {
                if (элемент.Length <= ширина)
                    разделённыйТекст.Add(элемент);
                else
                {
                    string temp2 = элемент;
                    int index = temp2.LastIndexOf(' ', ширина);
                    string temp1;
                    while (index != -1)
                    {
                        temp1 = temp2.Substring(0, index);
                        разделённыйТекст.Add(temp1.Trim());

                        temp2 = temp2.Remove(0, index + 1).TrimStart();
                        if (temp2.Length > ширина)
                            index = temp2.LastIndexOf(' ', ширина);
                        else
                            index = -1;
                    }
                    temp1 = temp2;
                    разделённыйТекст.Add(temp1.Trim());
                }
            }
            return разделённыйТекст;
        }

        /****************************************************************************************************************************/
        //Комплектовочная карта (форма 6 и 7)
        /****************************************************************************************************************************/
        public void Комплектовочная_карта(bool горизонтальная)
        {
            //Получение объекта для отчёта
            ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;
            if (техпроцесс == null)
                Ошибка("\r\nНевозможно сформировать комплектовочную карту: объект '{0}' не является технологическим процессом", ТекущийОбъект);

            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
            ВыполнитьМакрос(Макрос_Переменные, "ЗаполнитьОсновныеНадписи", техпроцесс);
            ВыполнитьМакрос(Макрос_Переменные, "Переменные", техпроцесс);

            Переменная["$graph_33"] = "КК";

            //Инициализация шаблона
            Текст текст = Текст["Текст1"];
            ШаблонСтроки В_шаблон = null;
            ШаблонСтроки КЛ_шаблон = текст["ОбозначениеДСЕ"];
            if (!горизонтальная)
            {
                В_шаблон = текст["Операция"];
            }

            //Регулярные данные для техпроцесса
            var списокОпераций = техпроцесс.Операции.Where(оп => оп.Тип.ПорожденОт("Сборочная операция"));

            //Проверка наличия сборочных операций для сборочных карт
            if (списокОпераций.Count() < 1)
            {
                string tpinfo = ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", техпроцесс);
                ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания",
                    "Среди операций технологического процесса '" + tpinfo + "' не найдено ни одной сборочной операции.");

                //Добавляем пустую строку
                текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
            }

            bool актуально;
            bool первая = true;
            foreach (Операция операция in списокОпераций)
            {
                //Выводить ли операцию в карту
                актуально = ВыполнитьМакрос(Макрос_Теги, "ЭлементАктуален", операция);
                if (!актуально)
                    continue;

                //Добавление строки - разделителя
                if (!первая)
                {
                    if (горизонтальная)
                        текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
                    else
                        текст.Таблица.ДобавитьСтроку(В_шаблон);
                }
                else
                    первая = false;

                //Заполнение операции
                Строка строкаКЛ = null;
                if (!горизонтальная) //форма 6
                {
                    строкаКЛ = текст.Таблица.ДобавитьСтроку(В_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуВ", операция, строкаКЛ);
                    строкаКЛ["букваВ"].Текст = "В";
                }
                else                 //форма 7
                {
                    строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуВ_безНаименования", операция, строкаКЛ);
                }

                Объекты компоненты = операция.СвязанныеОбъекты["Комплект на операцию"];
                if (компоненты.Count() < 1)
                {
                    ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания", String.Format("В операции '{0}' не заданы компоненты.", ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", операция)));
                    continue;
                }

                var нематериалы = компоненты.Where(к => к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"] != null //Изделие
                                                   && !к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"].Тип.ПорожденОт("Материал")
                                                  ).ToList();
                var материалы = компоненты.Where(к => к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"] != null //Изделие
                                                   && к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"].Тип.ПорожденОт("Материал")
                                                  ).ToList();

                //Заполнение строк отчёта по деталям и сборочным единицам
                for (int i = 0; i < нематериалы.Count; i++)
                {
                    Объект компонент = нематериалы[i];
                    if (!горизонтальная || i != 0) //не добавляем строку только для первого раза в горизонтальной форме
                        строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);

                    //Простановка служебных символов
                    if (!горизонтальная)
                    {
                        строкаКЛ["букваЛ"].Текст = "Л";
                        строкаКЛ["букваН"].Текст = "Н";
                    }
                    else if (i == 0)
                    {
                        строкаКЛ["букваК"].Текст = "К";
                    }

                    //Заполнение данных по детале, сборочной единице или материалу
                    строкаКЛ["Поз"].Текст = компонент.Параметр["Позиция"];
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуКомпонента", строкаКЛ, компонент);
                }

                //Заполнение строк отчёта по материалам
                for (int i = 0; i < материалы.Count; i++)
                {
                    Объект компонент = материалы[i];
                    if (!горизонтальная || i != 0 || нематериалы.Count > 0) //не добавляем строку только для первого раза в горизонтальной форме
                        строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);

                    //Простановка служебных символов
                    if (i == 0)
                    {
                        if (горизонтальная)
                            строкаКЛ["букваК"].Текст = "М";
                        else
                            строкаКЛ["букваЛ"].Текст = "М";
                    }

                    //Заполнение данных по детале, сборочной единице или материалу
                    строкаКЛ["Поз"].Текст = компонент.Параметр["Позиция"];
                    ВыполнитьМакрос(Макрос_Теги, "ЗаполнитьСтрокуКомпонента", строкаКЛ, компонент);
                }

                //Добавление замечаний
                int количествоКомпонентов = компоненты.Count();
                int количествоБезСвязи = количествоКомпонентов - (нематериалы.Count + материалы.Count);
                if (количествоБезСвязи > 0)
                    ВыполнитьМакрос(Макрос_Теги, "ДобавитьЗамечания",
                         String.Format("В операции '{0}' {1} из {2} компонентов не имеют связи на справочник Номенклатура.",
                                       ВыполнитьМакрос(Макрос_Теги, "СводноеНаименование", операция), количествоБезСвязи, количествоКомпонентов));
            }

            ВыполнитьМакрос(Макрос_Теги, "ВывестиЗамечания");
            ВыполнитьМакрос(Макрос_Теги, "ОчиститьЗамечания");
        }
        //==========================================================================================================================//



        /****************************************************************************************************************************/
        //Получение списка шифра (обозначения) инструкций по охране труда с исполнителями по всем операциям ТП
        /****************************************************************************************************************************/
        private string ПолучитьВсеИнструкцииПоОперациям(ТехнологическийПроцесс техпроцесс)
        {
            string инструкции = String.Empty;
            foreach (Операция операция in техпроцесс.Операции)
            {
                foreach (Инструкция инструкцияОперации in операция.Инструкции)
                {
                    if (ВыполнитьМакрос(Макрос_Теги, "инструкцияОТ", инструкцияОперации))
                    {
                        if (инструкцияОперации.Шифр != String.Empty && !инструкции.Contains(инструкцияОперации.Шифр)) // указан шифр инструкции и его нет в списке
                        {
                            if (инструкции != String.Empty)
                            {
                                инструкции += "; ";
                            }
                            инструкции += инструкцияОперации.Шифр;

                            Исполнитель исполнительОперации = операция.Исполнители.FirstOrDefault(); // первый исполнитель в списке
                            string профессия = исполнительОперации != null && исполнительОперации.Профессия != null ? исполнительОперации.Профессия.ToString() : String.Empty;
                            if (профессия != String.Empty)
                                инструкции += " (" + профессия + ")";

                            break;
                        }
                    }
                }
            }
            return инструкции;
        }
        //==========================================================================================================================//
    }
}

