using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.DOCs.Model.References.Files;

//Библиотека для работы с excel
using Excel = Microsoft.Office.Interop.Excel;

public class Macro : MacroProvider
{
    public Macro(MacroContext context)
        : base(context)
    {
    }
    

    private string pathToReport = @"C:\tflexcash\ГотовыйОтчет.xlsx";

    
    public override void Run()
    {
        // Данный макрос будет производиться на конкретное подразделение, то есть будет вызываться из справочника ресурсы.
        // Макрос будет вызываться на подразделения, так что мне в первую очередь нужно понять, относится ли ТекущийОбъект к человеку, или же он относится к подразделению, в которое могут входить люди
        // Задача не тривиальная, что эти данные можно получить, если обратиться к связи на справочник групп и пользователей и узнать, какой у связанного объекта. Если я правильно понимаю, то ресурсы в
        // полном соответствии с тем, что представлено в справочнике групп и пользователей.

        // Для начала попробуем получить доступ к подразделению
        Объект подразделение = ТекущийОбъект;
        // Сообщение("Информация", подразделение.ToString());

        // Получаем список входящих объектов
        // Сообщение("Информация", РекурсивноеПолучениеДочернихОбъектов(подразделение).Count.ToString());
        /*
        List<Объект> всеРесурсы = РекурсивноеПолучениеДочернихОбъектов(подразделение);
        
        
        
        
        
        
        if (всеРесурсы == null)
        {
            Сообщение("Информация", "Не было найдено дочерних подключений, отчет не будет сформирован");
            return;
        }

        // Отфильтровываем все значения, которые не имеют связи на справочник
        */
        List <Объект>человеческиеРесурсы = new List<Объект>();

        foreach (Объект ресурс in РекурсивноеПолучениеДочернихОбъектов(подразделение))
        {
            if (ресурс.СвязанныйОбъект["Человек"] != null)
            {
                if (ресурс.СвязанныйОбъект["Человек"].Тип.ПорожденОт("Пользователь"))
                {
            	   человеческиеРесурсы.Add(ресурс);
                }
            }
        }
        
        
        // Проверка получившегося результата

        string message = "";
        foreach (Объект ресурс in человеческиеРесурсы)
        {
            message += ресурс.ToString() + "\n";
        }
        Сообщение("Информация", message);
        
        // В коде ниже можно будет провести ограничивание списка проектов, на которые нужно составлять данный отчет
        
        /*
        // Инициализация переменной, которая будет хранить список проектов, для которых будет создаваться отчет
        Объекты проекты = null;
        
        // Для начала нужно будет получить от пользователя объекты, с которыми будет работать отчет. Для этого нужно создать новый диалог ввода
        ДиалогВыбораОбъектов диалог = СоздатьДиалогВыбораОбъектов("Управление проектами");
        диалог.Заголовок = "Выберите проекты для формирования отчета";
        диалог.МножественныйВыбор = true;
        диалог.ВыборФлажками = true;
        // диалог.Фильтр = 
    
        if (диалог.Показать() == true)
        {
            проекты = диалог.ВыбранныеОбъекты;
        }
        else
            return;

        */

        // Создаем списки строк под каждую колонку, которую нужно заполнить
        List<string> видРабот = new List<string>();
        List<string> фио = new List<string>();
        List<string> заказчик = new List<string>();
        List<string> наименованиеРодителя = new List<string>();
        List<string> наименованиеРабот = new List<string>();
        List<string> процентВыполнения = new List<string>();
        List<string> начало = new List<string>();
        List<string> окончание = new List<string>();
        List<string> датаПоследнегоИзменения = new List<string>();

        // Создаем словарь для хранения данных колонок
        Dictionary<string, List<string>> таблицаДанных = new Dictionary<string, List<string>>();
        таблицаДанных.Add("Вид Работ", видРабот);
        таблицаДанных.Add("ФИО", фио);
        таблицаДанных.Add("Заказчик", заказчик);
        таблицаДанных.Add("Наименование Родителя", наименованиеРодителя);
        таблицаДанных.Add("Наименование Работы", наименованиеРабот);
        таблицаДанных.Add("Процент Выполнения", процентВыполнения);
        таблицаДанных.Add("Начало", начало);
        таблицаДанных.Add("Окончание", окончание);
        таблицаДанных.Add("Дата Последнего Изменения", датаПоследнегоИзменения);

        // Создаем словарь, который будет содержать связь колонок с номером ячеек в шаблоне отчета
        Dictionary <string, int> данныеПоКолонкам = new Dictionary <string, int>();
        данныеПоКолонкам.Add("Вид Работ", 1);
        данныеПоКолонкам.Add("ФИО", 2);
        данныеПоКолонкам.Add("Заказчик", 3);
        данныеПоКолонкам.Add("Наименование Родителя", 4);
        данныеПоКолонкам.Add("Наименование Работы", 5);
        данныеПоКолонкам.Add("Процент Выполнения", 7);
        данныеПоКолонкам.Add("Начало", 8);
        данныеПоКолонкам.Add("Окончание", 9);
        данныеПоКолонкам.Add("Дата Последнего Изменения", 6);

        // Код для сбора данных, которые входят в проекты, связанные с данными исполнителями
        foreach (Объект работник in человеческиеРесурсы)
        {
            // Получаем проекты, к которым подключен данный работник
            Объекты используемыеРесурсы = работник.СвязанныеОбъекты["Используемый ресурс"];
            foreach (var сотрудник in используемыеРесурсы)
            {
                Объект работа = сотрудник.СвязанныйОбъект["Проект"];

                // Проверка на тип работы. Если работа относится к типу "проект", то используется она. Если работа относится к любому другому типу, то использоваться должна
                // родительская работа, имеющая тип "Проект".

                Объект временныйОбъект = null;
                
                if (работа.Параметр["Тип"].ToString() == "Проект")
                {
                    временныйОбъект = работа;
                }
                else
                {   
                    временныйОбъект = получениеРодителяПоТипу(работа, "Проект") != null ? получениеРодителяПоТипу(работа, "Проект") : работа;
                }


                // Сообщение("Отладка", временныйОбъект.ToString());

                if (временныйОбъект.Параметр["Пространство планирования"].ToString() != "00000000-0000-0000-0000-000000000000")
                {
                    Объект пространствоПланирования = НайтиОбъект("Пространства планирования", String.Format("[guid] = '{0}'", временныйОбъект.Параметр["Пространство планирования"].ToString()));
                    таблицаДанных["Вид Работ"].Add(пространствоПланирования.Параметр["Наименование"].ToString());
                }
                else таблицаДанных["Вид Работ"].Add("");



                таблицаДанных["ФИО"].Add(сотрудник.ToString());
                таблицаДанных["Заказчик"].Add(работа.Параметр["Описание"].ToString());
                таблицаДанных["Наименование Родителя"].Add(работа.РодительскийОбъект != null ? работа.РодительскийОбъект.Параметр["Наименование"].ToString() : работа.Параметр["Наименование"].ToString());
                таблицаДанных["Наименование Работы"].Add(работа.Параметр["Наименование"].ToString());
                таблицаДанных["Процент Выполнения"].Add(работа.Параметр["Процент выполнения"] * 100);
                таблицаДанных["Начало"].Add(работа.Параметр["Начало"].ToString().ToString().Split(' ')[0]);
                таблицаДанных["Окончание"].Add(работа.Параметр["Окончание"].ToString().Split(' ')[0]);
                таблицаДанных["Дата Последнего Изменения"].Add(работа.Параметр["Дата последнего изменения процента выполнения"].ToString());

                // Сообщение("Проекты, в которых задействованы ресурсы", String.Format("{0}: {1} ({2})", сотрудник.ToString(), работа.ToString(), работа.Параметр["Тип"].ToString()));
            }
        }

        ФормированиеФайлаОтчетаВФорматеExcel(таблицаДанных, данныеПоКолонкам);


        
     
     
    }

    private bool ФормированиеФайлаОтчетаВФорматеExcel(Dictionary <string, List<string>> табличныеДанные, Dictionary <string, int> соответствиеКолонокИндексам)
    {
        // Сообщение("Отладка", "Код запустил метод формирования excel файла");
        string pathToTemplate = "";

        // Получаем доступ к файлу шаблона отчета для получения пути его расположения на локальном компьютере
    	FileObject шаблон = (FileObject)НайтиОбъект("Файлы", "[Наименование] = 'Шаблон отчёта - Ресурсы по проектам.xlsx'");
        
        // Получаем путь к расположению файла шаблона отчета на локальном компьютере
        if (шаблон != null)
        {
            pathToTemplate = шаблон.LocalPath;
        }
        else
        {
            Сообщение("Ошибка","Файл шаблона отчета не был найден");
            return true;
        }

        шаблон.Export(pathToReport, true);
        
        // Производим копирование файла шаблона для его редактирования. Значение true отвечает за перезапись документа в том случае, если файл по пути назвачения уже существовал
        // File.Copy(pathToTemplate, pathToReport, true);
        
        //Убираем атрибут (только на чтение) на копии шаблона, с которым будет происходить работа
        // File.SetAttributes(pathToReport, File.GetAttributes(pathToReport) & ~FileAttributes.ReadOnly);
        
        // Сообщение("Отладка", "Создана копия шаблона для редактирования данных");

        
        // Работа с приложением Excel
        // Указываем имя явно, так как класс Application так же есть в другой библиотеке, которую я тут использую
        Excel.Application excel = new Microsoft.Office.Interop.Excel.Application();

        // Сообщение("Отладка", "Запущено приложение Excel");

        // Делаем приложение видимым
        excel.Visible = true;
        
        // Дальше нужно произвести открытие файла
        excel.Workbooks.Open(pathToReport);

        // Получаем первый лист, с которым будем производить работу
        Excel.Worksheet sheet = (Excel.Worksheet)excel.Worksheets.get_Item(1);

        // Можно присвоить листу свое имя
        sheet.Name = "Отчет для выгрузки";

        // Заполнение ячеек
        foreach (KeyValuePair<string, List<string>> колонка in табличныеДанные)
        {
            for (int i = 2; i <= (колонка.Value.Count + 1); i++)
            {
                sheet.Cells[i, соответствиеКолонокИндексам[колонка.Key]] = колонка.Value[i-2];
            }
        }



        return true;

    }


    private List<Объект> РекурсивноеПолучениеДочернихОбъектов(Объект родитель)
    {
        // Проверка на наличие у родителя дочерних объектов
        Объекты потомки = родитель.ДочерниеОбъекты;
        List<Объект>временныйСписок = new List<Объект>();
        временныйСписок.Add(родитель);
        if (потомки != null)
        {
            foreach(Объект потомок in потомки)
            {   
                временныйСписок.AddRange(РекурсивноеПолучениеДочернихОбъектов(потомок));
            }
            return временныйСписок;
        }
        else
        {
        	return временныйСписок;
        }        	
    }

    private Объект получениеРодителяПоТипу(Объект потомок, string тип)
    {
        // Данная функция будет организована через цикл

        // Пробуем получить родителя объекта
        if (потомок.РодительскийОбъект !=null)
        {
        Объект родительПотомка = потомок.РодительскийОбъект;
            while (родительПотомка.Параметр["Тип"].ToString() != тип)
            {
                родительПотомка = родительПотомка.РодительскийОбъект;
                if (родительПотомка == null)
                    {
                        return null;
                    }                
            }
            return родительПотомка;
        }
        else
        {
            return null;
        }
        
    }

}
