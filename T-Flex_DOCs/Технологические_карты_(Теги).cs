/* Ссылки
TFlex.Model.Technology.dll
TFlex.Reporting.CAD.dll
TFlex.Reporting.Technology.dll
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.Model.Technology.Macros.ObjectModel;
using TFlex.Reporting.CAD.MacroGenerator.ObjectModel;
using TFlex.Reporting.Technology.Macros;


public class Macro : ReportMacroProvider
{
    public Macro(ReportGenerationMacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    }
    
    
    //Переменная, в которую записываются замечания
    private static string замечания;
    
    //Заданный формат вывода времён в карту	
    private string format = "0.##";
    private string format2 = "{0:0.##}";
    
    //Вспомогательные переменные для технологии
    private string figure = "<$Изобр.>";
    
    /****************************************************************************************************************************/
    //Функция получения замечаний, найденных при генерации карт
    /****************************************************************************************************************************/
    public string УзнатьЗамечания ()
    {
        if (замечания != "")
            return "Список замечаний:\n" + замечания;
        return "";
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Функция получения замечаний, найденных при генерации карт
    /****************************************************************************************************************************/
    public void ВывестиЗамечания ()
    {
        if (замечания != "")
            MessageBox.Show(замечания, "Список замечаний", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура очистки замечаний, найденных при генерации карт
    /****************************************************************************************************************************/
    public void ОчиститьЗамечания ()
    {
        замечания = "";
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура добавления замечаний (из других макросов)
    /****************************************************************************************************************************/
    public void ДобавитьЗамечания (string errors)
    {
        замечания += ">> " + errors + Environment.NewLine;
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Функция формирования сводного наименования техпроцесса
    /****************************************************************************************************************************/
    public string СводноеНаименование (ТехнологическийПроцесс рассматриваемыйТехпроцесс)
    {			
        string tpinfo = рассматриваемыйТехпроцесс.Обозначение + " "
                          + рассматриваемыйТехпроцесс.Наименование;
        return tpinfo;
    }
    //==========================================================================================================================//
    
    
    /****************************************************************************************************************************/
    //Функция формирования сводного наименования операции
    /****************************************************************************************************************************/
    public string СводноеНаименование (Операция рассматриваемаяОперация)
    {			
        string operinfo = рассматриваемаяОперация.Номер
                         + рассматриваемаяОперация.Индекс + " "
                          + рассматриваемаяОперация.Наименование;
        return operinfo;
    }
    //==========================================================================================================================//
     
    
    
    /****************************************************************************************************************************/
    //Функция формирования сводного наименования перехода
    /****************************************************************************************************************************/
    public string СводноеНаименование (Переход переход)
    {			
        string perehinfo = переход.Номер
                         + переход.Индекс + " "
                          + переход.Текст;
        return perehinfo;
    }
    //==========================================================================================================================//   
    
    
    
    /****************************************************************************************************************************/
    //Функция, которая проверяет, является ли техпроцесс актуальным (выводить ли его в карту)
    /****************************************************************************************************************************/
    public bool ЭлементАктуален (ТехнологическийПроцесс рассматриваемыйТехпроцесс)
    {			
        string вариант = рассматриваемыйТехпроцесс.Вариант;
        if (вариант == "")
        	return true;
        return false;
    }
    //==========================================================================================================================//   
    
    
    
    /****************************************************************************************************************************/
    //Функция, которая проверяет, является ли операция актуальной (выводить ли её в карту)
    /****************************************************************************************************************************/
    public bool ЭлементАктуален (Операция рассматриваемаяОперация)
    {
    	if (рассматриваемаяОперация.Тип.ПорожденОт("Операция") && !(bool)рассматриваемаяОперация.Параметр["Выдавать операцию в карты"])
    		return false;
        string вариант = рассматриваемаяОперация.Вариант;
        if (вариант == "")
        	return true;
        return false;
    }
    //==========================================================================================================================//   
    
    
    
    /****************************************************************************************************************************/
    //Функция, которая проверяет, является ли переход актуальным (выводить ли его в карту)
    /****************************************************************************************************************************/
    public bool ЭлементАктуален (Переход переход)
    {			
        string вариант = переход.Вариант;
        if (вариант == "")
        	return true;
        return false;
    }
    //==========================================================================================================================//   
    
    
    
    /****************************************************************************************************************************/
    //Процедура дополнения данных
    /****************************************************************************************************************************/
    public void ДополнитьДанные (ref string целеваяСтрока, string текущаяПодстрока, string разделитель, ref bool естьЗамечания)
    {
        if ((текущаяПодстрока != "") && (текущаяПодстрока != "0"))
            целеваяСтрока = целеваяСтрока + текущаяПодстрока + разделитель;
        else
            естьЗамечания = true;
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Функция, которая для операции получает цех, участок и рабочее место. Если их нет, то добавляется любое другое
    //указанное пользователем подразделение
    /****************************************************************************************************************************/
    public Объекты ПолучитьПроизводственныеПодразделения (Операция рассматриваемаяОперация)
    {
        Объекты ЦехУчастокРМ = new Объекты();
        string operinfo = СводноеНаименование(рассматриваемаяОперация);
        
        Объекты списокПроизводственныхПодразделений = рассматриваемаяОперация.ПроизводственныеПодразделения;
        /*Вывод номера рабочего места, участка и цеха в разные ячейки*/
        bool флагРМ = false; 	//рабочее место не найдено
        bool флагУч = false;	//участок не найден
        bool флагЦех = false;	//цех не найден
        bool естьЗамечания = false;	//замечания по входимости подразделений
        
        //В карту будет выведены последние из указанных рабочего места, участка и цеха (если в списке их несколько, чего быть не должно...)
        Объект рабочееМесто = null; 
        Объект участок = null;
        Объект цех = null;
        string tip;
        foreach(var подразделение in списокПроизводственныхПодразделений)
        {
            tip = подразделение.Тип;
            switch (tip)
            {
                case "Рабочее место":
                    рабочееМесто = подразделение;
                    флагРМ = true;
                    break;
                case "Участок":
                    участок = подразделение;
                    флагУч = true;
                    break;
                case "Цех":
                    цех = подразделение;
                    флагЦех = true;
                    break;
            }
        }
        
        //Если участок напрямую не указан, но определено рабочее место
        if (!флагУч && флагРМ)
        {
            Объекты списокПотенциальныхУчастков = рабочееМесто.РодительскиеОбъекты; //список всех подразделений, куда входит РМ
            foreach (var потенциальныйУчасток in списокПотенциальныхУчастков)
                if (потенциальныйУчасток.Тип == "Участок")
                {
                    участок = потенциальныйУчасток;
                    флагУч = true;
                }
        }
        else if (флагРМ)	//проверяем, есть ли указанный участок в списке родительских подразделений рабочего места
        {
            естьЗамечания = true;
            Объекты списокПотенциальныхУчастков = рабочееМесто.РодительскиеОбъекты; //список всех подразделений, куда входит РМ
            foreach (var потенциальныйУчасток in списокПотенциальныхУчастков)
                if (потенциальныйУчасток.Параметр["ID"] == участок.Параметр["ID"])
                    естьЗамечания = false;
            if (естьЗамечания)
            {
                ДобавитьЗамечания("Для операции '" + operinfo
                 + "' указанное рабочее место '" + рабочееМесто.ToString()
                  + "' не принадлежит указанному участку '" + участок.ToString() + "'."); 
            }
        }
        
        //Если цех напрямую не указан
        if (!флагЦех)
        {
            if (флагУч) //есть участок (указан напрямую или уже нашли)
            {
                Объекты списокПотенциальныхЦехов = участок.РодительскиеОбъекты; //список всех подразделений, куда входит участок
                foreach (var потенциальныйЦех in списокПотенциальныхЦехов)
                    if (потенциальныйЦех.Тип == "Цех")
                    {
                        флагЦех = true;			
                        цех = потенциальныйЦех;
                    }
            }
            else if (флагРМ) //рабочее место есть, а участка нет
            {
                Объекты списокПотенциальныхЦехов = рабочееМесто.РодительскиеОбъекты; //список всех подразделений, куда входит рабочее место
                foreach (var потенциальныйЦех in списокПотенциальныхЦехов)
                    if (потенциальныйЦех.Тип == "Цех")
                    {
                        флагЦех = true;			
                        цех = потенциальныйЦех;
                    }
            }
        }
        else	//проверяем, есть ли указанный цех в списке родительских подразделений
        {
            if (флагУч) //есть участок (указан напрямую или уже нашли)
            {
                естьЗамечания = true;
                Объекты списокПотенциальныхЦехов = участок.РодительскиеОбъекты; //список всех подразделений, куда входит участок
                foreach (var потенциальныйЦех in списокПотенциальныхЦехов)
                    if (потенциальныйЦех.Параметр["ID"] == цех.Параметр["ID"])
                        естьЗамечания = false;
                if (естьЗамечания)
                {
                    ДобавитьЗамечания("Для операции '" + operinfo
                     + "' указанный участок '" + участок.ToString()
                       + "' не принадлежит указанному цеху '" + цех.ToString() + "'."); 
                }
            }
            else if (флагРМ) //рабочее место есть, а участка нет
            {
                естьЗамечания = true;
                Объекты списокПотенциальныхЦехов = рабочееМесто.РодительскиеОбъекты; //список всех подразделений, куда входит рабочее место
                foreach (var потенциальныйЦех in списокПотенциальныхЦехов)
                    if (потенциальныйЦех.Параметр["ID"] == цех.Параметр["ID"])
                        естьЗамечания = false;
                if (естьЗамечания)
                {
                    ДобавитьЗамечания("Для операции '" + operinfo
                     + "' указанное рабочее место '" + рабочееМесто.ToString()
                       + "' не принадлежит указанному цеху '" + цех.ToString() + "'."); 
                }
            }
        }
        
        if (цех != null)
            ЦехУчастокРМ.Add(цех);
        if (участок != null)
            ЦехУчастокРМ.Add(участок);
        if (рабочееМесто != null)
            ЦехУчастокРМ.Add(рабочееМесто);
        
        //Если не указан ни цех, ни участок, ни рабочее место, то пробуем найти что-то ещё
        //Возможно присутствует склад, или отдел, или...
        if (цех == null && участок == null && рабочееМесто == null)
        {
        	Объект остальное = списокПроизводственныхПодразделений.FirstOrDefault();
        	if (остальное != null)
        		ЦехУчастокРМ.Add(остальное);
        }
        return ЦехУчастокРМ;
    }
    //==========================================================================================================================//

    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку В
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуВ (Операция рассматриваемаяОперация, Строка строкаВ)
    {
        /* В процедуре заполняются следующие данные ---------
        Тег:					Содержание данных:
        Цех						Цех
        Уч.						Участок
        РМ						Рабочее место
        НО						Номер операции и её индекс
        Операция				Код, наименование операции
        ----------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        строкаВ						строка, в которую записываются данные, поэтому она должна содержать соответствующие теги							
        */
                                        
        ЗаполнитьСтрокуВ_безНаименования (рассматриваемаяОперация, строкаВ);
        
        string temp = рассматриваемаяОперация.Код;
        if (temp != "")
            строкаВ["Операция"].Текст = temp + " " + рассматриваемаяОперация.Наименование;
        else
            строкаВ["Операция"].Текст = рассматриваемаяОперация.Наименование;
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку В, исключая наименование операции
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуВ_безНаименования (Операция рассматриваемаяОперация, Строка строкаВ)
    {
        /* В процедуре заполняются следующие данные ---------
        Тег:					Содержание данных:
        Цех						Цех
        Уч.						Участок
        РМ						Рабочее место
        НО						Номер операции и её индекс
        ----------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        строкаВ						строка, в которую записываются данные, поэтому она должна содержать соответствующие теги							
        */
                                        
        //Производственные подразделения
        Объекты ЦехУчастокРМ = ПолучитьПроизводственныеПодразделения(рассматриваемаяОперация);
        string tip;				 
        foreach (Объект подразделение in ЦехУчастокРМ)
        {
            tip = подразделение.Тип;
            switch (tip)
            {
                case "Цех":
                    строкаВ["Цех"].Текст = подразделение.Параметр["Номер"];
                    break;
                case "Участок":
                    строкаВ["Уч."].Текст = подразделение.Параметр["Номер"];
                    break;
                case "Рабочее место":	
                    строкаВ["РМ"].Текст = подразделение.Параметр["Номер"];
                    break;
            }
        }	
        /* Для случая, когда в карту выводится только код рабочего места (в списке подразделений указываем всего 1 объект)
        if (списокПроизводственныхПодразделений.Count > 0)
        {
            Объект рабочееМесто = списокПроизводственныхПодразделений.First();
            строкаВ["КодРМ"].Текст = рабочееМесто.Параметр["Код"];
        }
        */
        
        строкаВ["НО"].Текст = рассматриваемаяОперация.Номер + рассматриваемаяОперация.Индекс;
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура, которая добавляет к замечаниям информацию об отсутствии инструкций к операции
    //по технике безопасности/охране труда
    /****************************************************************************************************************************/
    public void ПроверитьТехникуБезопасности (Операция рассматриваемаяОперация)
    {
        Инструкция[] списокИнструкций = рассматриваемаяОперация.Инструкции;
        foreach (var инструкция in списокИнструкций)
        {
        	var инструкцияОперации = new ИнструкцияОперации(инструкция);
        	if (инструкцияОперации.ТипИнструкции == 2 || инструкцияОперации.ТипИнструкции == 5)
        		return;
        }
        
        string operinfo = СводноеНаименование(рассматриваемаяОперация);
        ДобавитьЗамечания("Для операции '" + operinfo + "' не найдены инструкции по технике безопасности/охране труда.");
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Возвращает перечень инструкции для операции для указанного места вывода в карту
    /****************************************************************************************************************************/
    public string ПолучитьИнструкции(Операция рассматриваемаяОперация, int ВыводВКарту)
    {
    	/*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        ВыводВКарту					числовое значение, определяющее какие инструкции будут выведены
            0						-не выводить (мало ли надо...)
            1						-выводить до операции (очень важные инструкции, касающиеся техники безопасности) - обычно выводится ТОЛЬКО текст
            2						-выводить после операции
            3						-выводить после переходов
            4						-сделано дополнительно - вывод всех инструкций
        */
    	
        if (ВыводВКарту > 4)
        {
            System.Windows.Forms.MessageBox.Show("Использованное значение параметра вывода инструкции в карту: " + ВыводВКарту.ToString() + " не поддерживается");
            return "";
        }
        
        string result = "";
        Инструкция[] списокИнструкций = рассматриваемаяОперация.Инструкции;
        
        foreach (var инструкция in списокИнструкций)
        {
        	ИнструкцияОперации инструкцияОперации = new ИнструкцияОперации(инструкция);
        	if (инструкцияОперации.ВыводВКарту == ВыводВКарту || ВыводВКарту == 4)
                result += инструкцияОперации.Текст + "; ";
        }
        
        return result != "" ? result.Substring(0, result.Length - 2) : "";
    }

    
    
    /****************************************************************************************************************************/
    //Заполнение инструкции для операции с указанием места вывода в карту
    /****************************************************************************************************************************/
    public void ВывестиИнструкции (Операция рассматриваемаяОперация, Строка строкаИ, int ВыводВКарту)
    {
        /* В процедуре могут быть заполнены следующие теги -------------
        Тег:						Содержание данных:
        ИнструкцииБезВывода			Инструкции, которые не предполагается выводить
        Инструкции    				Инструкции, выводимые до операции
        ИнструкцииПО				Инструкции, выводимые после операции
        Инструкции    				Инструкции, выводимые после переходов
        ИнструкцииВсе				Все инструкции на операцию
        --------------------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        строкаИ						строка, в которую записываются данные, поэтому она должна содержать соответствующие теги
        ВыводВКарту					числовое значение, определяющее какие инструкции будут выведены
            0						-не выводить (мало ли надо...)
            1						-выводить до операции (очень важные инструкции, касающиеся техники безопасности) - обычно выводится ТОЛЬКО текст
            2						-выводить после операции
            3						-выводить после переходов
            4						-сделано дополнительно - вывод всех инструкций
        */
       
        string result = ПолучитьИнструкции(рассматриваемаяОперация, ВыводВКарту);
        if (result != "")
        {
            switch (ВыводВКарту)
            {
                case 0:
                    строкаИ["ИнструкцииБезВывода"].Текст = result;
                    break;
                case 1:
                    строкаИ["Инструкции"].Текст = result;
                    break;
                case 2:
                    строкаИ["ИнструкцииПО"].Текст = result;
                    break;
                case 3:
                    строкаИ["Инструкции"].Текст = result;
                    break;
                case 4:
                    строкаИ["ИнструкцииВсе"].Текст = result;
                    break;
            }
        }
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Наличие видов инструкции в операции
    /****************************************************************************************************************************/
    public Tuple<bool, bool, bool> НаличиеИнструкций (Операция рассматриваемаяОперация)
    {
		Инструкция[] списокИнструкций = рассматриваемаяОперация.Инструкции;
		bool flagIDO = false;
		bool flagIPO = false;
		bool flagIPP = false;
		foreach (var инструкция in списокИнструкций)
		{	
			ИнструкцияОперации инструкцияОперации = new ИнструкцияОперации(инструкция);
			if (инструкцияОперации.ВыводВКарту == 1) // до операции
				flagIDO = true;
			if (инструкцияОперации.ВыводВКарту == 2) // после операции
				flagIPO = true;
			if (инструкцияОперации.ВыводВКарту == 3) // после переходов
				flagIPP = true;
		}
		return new Tuple<bool, bool, bool>(flagIDO, flagIPO, flagIPP);
    }
    //==========================================================================================================================//
    
    
    
    private class ИнструкцияОперации
    {
    	private string _тип;
    	private Инструкция _инструкция;
    	
    	private const string ИзСправочника = "ИнструкцияИзСправочника";
    	private const string ИзОперации = "ИнструкцияДляОперации";
    	
    	public ИнструкцияОперации(Инструкция инструкция)
    	{
    		_инструкция = инструкция;
    		_тип = инструкция.Тип.ПорожденОт("Инструкция") ? ИзСправочника : ИзОперации;
    	}
    	
    	public int ВыводВКарту
    	{
    		get {return ОпределитьВыводВКарту();}
    	}
    	
    	public Инструкция Инструкция
    	{
    		get {return _инструкция;}
    	}
    	
    	public int ТипИнструкции
    	{
    		get {return ОпределитьТипИнструкции();}
    	}
    	
    	public string Текст
    	{
    		get {return ОпределитьВыводимыйТекст();}
    	}
    	
    	private int ОпределитьВыводВКарту()
    	{
    		if (_тип != ИзСправочника)     //инструкция не из справочника "Инструкции"
    			return Инструкция.Параметр["Вывод в карту"];  //а объект списка объектов;
    		
    		int типИнструкции = Инструкция.Параметр["Тип инструкции"];
    		switch (типИнструкции)
    		{
    			case 1:      //Технологическая
    				return 3;   //После переходов
    			case 2:      //Охрана труда
    			case 5:      //Техника безопасности
    				return 2;   //После операции
    			case 3:      //Эксплуатационная
    			case 4:      //Должностная
    			case 6:      //Охрана окружающей среды
    			case 7:      //Противопожарная безопасность
    			case 8:      //Дополнительное описание
    				return 0;   //Не выводить
    		}
    		
    		return 0;
    	}
    	
    	private int ОпределитьТипИнструкции()
    	{
    		if (_тип == ИзСправочника)     //инструкция из справочника "Инструкции"
    			return Инструкция.Параметр["Тип инструкции"];  //вернуть сам тип
    		
    		Объект инструкцияИзСправочника = Инструкция.СвязанныйОбъект["Инструкция из справочника"];
            return инструкцияИзСправочника != null ? (int)инструкцияИзСправочника.Параметр["Тип инструкции"] : -1;
    	}
    	
    	private string ОпределитьВыводимыйТекст()
    	{
    		if (_тип != ИзСправочника)
    			return Инструкция.Параметр["Текст инструкции"];
    		
    		if (ТипИнструкции == 1)
    			return Инструкция.Параметр["Текст инструкции"];
    			
    		return Инструкция.Параметр["[Шифр / обозначение]"];
    	}
    }
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку А
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуА (Операция рассматриваемаяОперация, Строка строкаА)
    {
        /* В процедуре заполняются следующие данные ---------
        Тег:					Содержание данных:
        Цех						Цех
        Уч.						Участок
        РМ						Рабочее место
        НО						Номер операции
        Операция				Код, наименование операции
        ИнструкцииПО			Инструкции, выводимые после операции
        ----------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        строкаА						строка, в которую записываются данные, поэтому она должна содержать соответствующие теги							
        */
        
        ЗаполнитьСтрокуВ (рассматриваемаяОперация, строкаА);
        ВывестиИнструкции (рассматриваемаяОперация, строкаА, 2);
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Заполнение оборудования операции
    /****************************************************************************************************************************/
    public void ВывестиОборудование (Операция рассматриваемаяОперация, Строка строкаОб)
    {
        /* В процедуре заполняются следующие данные ------------------------------------
        Тег:					Содержание данных:
        Оборудование			Код оборудования по классификатору, краткое наименование
                                оборудования и инвентарный номер. Информацию следует указывать  
                                через разделитель ";"
                                Допускается взамен краткого наименования оборудования
                                указывать его модель; инвентарный номер не указывать
        ------------------------------------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        строкаОб					строка, в которую записываются данные, поэтому она должна содержать соответствующие теги							
        */
        
        
        string result = "";
        
        //Замечания по оснащению операции
        //Объекты списокОснащения = рассматриваемаяОперация.СвязанныеОбъекты["Оснащение операции"];
        //Объекты списокОснащенияСТО = рассматриваемаяОперация.СвязанныеОбъекты["[Оснащение операции].[Оснащение из справочника СТО]"];
        Оснащение[] списокОснащения = рассматриваемаяОперация.Оснащение;
        
        ObjectAccessor[] arr = списокОснащения.ToArray<ObjectAccessor>();
        Объекты списокОснащенияСТО = ВыполнитьМакрос(Макрос_Переменные, "ПолучитьОбъектыПоСвязи", arr, "Оснащение из справочника СТО");
                                                     
        int osn = списокОснащения.Length;
        int osnSTO = списокОснащенияСТО.Count;
        if (osnSTO != osn)
        {
            string operinfo = СводноеНаименование(рассматриваемаяОперация);
            ДобавитьЗамечания("Для операции '" + operinfo + "' не указана связь между Оснащением операции и Оснащением из справочника СТО для "
                              + (osn - osnSTO).ToString() + " объекта(ов)" + ".");
        }

        //Список оборудования операции
        foreach(var оснащение in списокОснащенияСТО)
        {
            if (ФильтрОборудования(оснащение))
            {
            	result = result + оснащение.Параметр["Обозначение"].ToString();
                if (оснащение.Параметр["Модель"].ToString() != "")
                    result = result + " " + оснащение.Параметр["Модель"].ToString();
                if (оснащение.Параметр["Наименование"].ToString() != "")
                    result = result + " " + оснащение.Параметр["Наименование"].ToString();
                if (оснащение.Параметр["Инвентарный номер"].ToString() != "")
                    result = result + " " + оснащение.Параметр["Инвентарный номер"].ToString() + "; ";
                else
                    result = result + "; ";
            }
        }
        if (result != "")
            строкаОб["Оборудование"].Текст = result.Substring(0,result.Length - 2);
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку Е
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуЕ (Операция рассматриваемаяОперация, Строка строкаЕ)
    {
        /* В процедуре заполняются следующие данные ---------
        Тег:					Содержание данных:
        СМ						Степень механизации
        Проф					Код профессии по классификатору ОКПДТР
        Разряд					Разряд работы, необходимый для выполнения операции по ОКПДТР
        УТ						Код условий труда по классификатору ОКПДТР и код вида нормы
        КР						Количество исполнителей
        КОИД					Количество одновременно обрабатываемых деталей
        ЕН						Единица нормирования
        ОП						Объём производственной партии
        Кшт						Коэффициент штучного времени
        Тпз						Норма подготовительно-заключительного времени на операцию
        Тшт						Норма штучного времени на операцию
        ----------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        строкаЕ						строка, в которую записываются данные, поэтому она должна содержать соответствующие теги							
        */
        
        string operinfo = СводноеНаименование(рассматриваемаяОперация);
        
        //Исполнители операции		
        Исполнитель[] списокИсполнителей = рассматриваемаяОперация.Исполнители;
        if (списокИсполнителей.Length > 0)
        {
            string см = "";
            string проф = "";
            string разряд = "";
            string условияТруда = "";
            string количествоРаб = "";
            string едНорм = "";
            string коэфШт = "";
            
            string см1 = "";
            string проф1 = "";
            Объект профессия = null;
            string разряд1 = "";
            string условияТруда1 = "";
            string количествоРаб1 = "";
            string едНорм1 = "";
            string коэфШт1 = "";
                        
            int испНомер = 0;
            bool естьЗамечания;	 //есть ли замечания по исполнителю
            
            foreach (var исполнитель in списокИсполнителей)
            {
                испНомер++;
                естьЗамечания = false;
                
                //Получение данных по исполнителю
                см1 = исполнитель.СМ.ToString();
                профессия = исполнитель.Профессия;
                if (профессия != null)
                	проф1 = профессия.Параметр["Код профессии"];
                else
                	проф1 = "";
                разряд1 = исполнитель.Разряд.ToString();
                условияТруда1 = исполнитель.УсловияТруда;
                количествоРаб1 = исполнитель.КолРабочих.ToString();
                едНорм1 = исполнитель.ЕН.ToString();
                коэфШт1 = исполнитель.Кшт.ToString();

                //Запись данных в карту, если это необходимо
                ДополнитьДанные(ref см, см1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref проф, проф1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref разряд, разряд1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref условияТруда, условияТруда1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref количествоРаб, количествоРаб1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref едНорм, едНорм1, "; ", ref естьЗамечания);
                ДополнитьДанные(ref коэфШт, коэфШт1, "; ", ref естьЗамечания);
                
                if (естьЗамечания)
                {
                    ДобавитьЗамечания("К операции '" + operinfo + "' есть замечания по заполненным данным у исполнителя " + испНомер.ToString() + ".");
                }
            }
            //Удаление лишнего разделителя "; "
            if (см != "") 
                строкаЕ["СМ"].Текст = см.Substring(0,см.Length - 2);
            if (проф != "")
                строкаЕ["Проф"].Текст = проф.Substring(0,проф.Length - 2);
            if (разряд != "")
                строкаЕ["Разряд"].Текст = разряд.Substring(0,разряд.Length - 2);
            if (условияТруда != "")
                строкаЕ["УТ"].Текст = условияТруда.Substring(0,условияТруда.Length - 2);
            if (количествоРаб != "")
                строкаЕ["КР"].Текст = количествоРаб.Substring(0,количествоРаб.Length - 2);
            if (едНорм != "")
                строкаЕ["ЕН"].Текст = едНорм.Substring(0,едНорм.Length - 2);
            if (коэфШт != "")
                строкаЕ["Кшт"].Текст = коэфШт.Substring(0,коэфШт.Length - 2);
            
        }
        //string коид = рассматриваемаяОперация.Параметр["Количество одновременно изготавливаемых деталей"].ToString();
        string коид = рассматриваемаяОперация.КОИД.ToString();
        if (коид != "0")
            строкаЕ["КОИД"].Текст = коид;
        if ((коид == "0") || (коид == ""))
            ДобавитьЗамечания("Для операции '" + operinfo + "' в качестве КОИД указано '" + коид + "' значение.");
            
        //строкаЕ["ОП"].Текст = рассматриваемаяОперация.Параметр["????????"];
        //string Тпз = рассматриваемаяОперация.Параметр["Подготовительно-заключительное время"];
        //string Тшт = рассматриваемаяОперация.Параметр["Штучное время"];
        if (рассматриваемаяОперация.Тпз != 0)
        	строкаЕ["Тпз"].Текст = string.Format(format2, рассматриваемаяОперация.Тпз);
        if (рассматриваемаяОперация.Тшт != 0)
        	строкаЕ["Тшт"].Текст = string.Format(format2, рассматриваемаяОперация.Тшт);
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку Б для МК, МОК и других с тем же содержанием
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуБ_дляМК (Операция рассматриваемаяОперация, Строка строкаБ_дляМК)
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        Оборудование			Код оборудования по классификатору, краткое наименование
                                оборудования и инвентарный номер. Информацию следует указывать  
                                через разделитель ";"
                                Допускается взамен краткого наименования оборудования
                                указывать его модель; инвентарный номер не указывать
                                
        СМ						Степень механизации
        Проф					Код профессии по классификатору ОКПДТР
        Разряд					Разряд работы, необходимый для выполнения операции по ОКПДТР
        УТ						Код условий труда по классификатору ОКПДТР и код вида нормы
        КР						Количество исполнителей
        КОИД					Количество одновременно обрабатываемых деталей
        ЕН						Единица нормирования
        ОП						Объём производственной партии
        Кшт						Коэффициент штучного времени
        Тпз						Норма подготовительно-заключительного времени на операцию
        Тшт						Норма штучного времени на операцию
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        рассматриваемаяОперация 	операция, для которой получаем данные - именно её параметры попадут в отчёт
        строкаБ_дляМК				строка, в которую записываются данные, поэтому она должна содержать соответствующие теги							
        */
        
        ВывестиОборудование (рассматриваемаяОперация, строкаБ_дляМК);
        ЗаполнитьСтрокуЕ (рассматриваемаяОперация, строкаБ_дляМК);
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку М для МК, МОК и других с тем же содержанием
    //Подходит как для горизонтальной, так и для вертикальной формы
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуМ_дляМК (Материал рассматриваемыйМатериал, Строка строкаМ_дляМК)
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        Материал				Наименование материала, применяемого при выполнении операции
        ОбозначениеМат			Обозначение материалов по классификатору
        ОПП						Обозначение подразделения откуда/куда поступает
        ЕВ						Единица величины
        ЕН						Единица нормирования
        КИ						- не используется
        Нрасх					Норма расхода материала
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        рассматриваемыйМатериал 	материал, для которого получаем данные - именно его параметры попадут в отчёт
        строкаМ_дляМК				строка, в которую записываются данные, поэтому она должна содержать соответствующие теги							
        */
        строкаМ_дляМК["Материал"].Текст = рассматриваемыйМатериал.Наименование;
        строкаМ_дляМК["ОбозначениеМат"].Текст = рассматриваемыйМатериал.Параметр["[Материал]->[Код / обозначение]"];
        Объект поставщик = рассматриваемыйМатериал.Поставщик;
        if (поставщик != null)
        	строкаМ_дляМК["ОПП"].Текст = поставщик.Параметр["Номер"];
        Объект еиНрасх = рассматриваемыйМатериал.ЕиНормыРасхода;
        if (еиНрасх != null)
        	строкаМ_дляМК["ЕВ"].Текст = еиНрасх.Параметр["Сокращённое наименование"];
        строкаМ_дляМК["ЕН"].Текст = рассматриваемыйМатериал.ЕН;
        //строкаМ_дляМК["КИ"].Текст = не используется
        if (рассматриваемыйМатериал.НормаРасхода != 0)
        	строкаМ_дляМК["Нрасх"].Текст = string.Format(format2, рассматриваемыйМатериал.НормаРасхода);
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Функция, которая формирует сводную строку материала техпроцесса, используемую в МК и МОК
    /****************************************************************************************************************************/
    public string СформироватьСтрокуМатериалаТП_дляМК (Материал материал)
    {
        bool естьЗамечания = false;
        Объект материалИзСправочника = материал.СвязанныйОбъект["Материал"];
        
        //Формирование строки данных
        string name = материал.Наименование;
        if (материалИзСправочника == null)
        	ДобавитьЗамечания("Для техпроцесса не указана связь между материалом техпроцесса '"
                    + материал.Наименование + "' и материалом из справочника материалов."); 
        
        string temp = string.Empty;
        
        //Размеры
        string r1 = материал.ДлинаЗаготовки.ToString();
        string r2 = материал.ШиринаЗаготовки.ToString();
        if ((r1 != "") && (r1 != "0"))
        {
            if ((r2 != "") && (r2 != "0"))
                temp = r2 + "x" + r1;
            else
                temp = r1;
        }
        else
            if ((r2 != "") && (r2 != "0"))
                temp = r2;
        
        temp = temp.Trim();
        if (temp != string.Empty)
        	name += string.Format(" {0}", temp);
        else
        	естьЗамечания = true;
        
        //Масса заготовки
        temp = материал.МассаЗаготовки.ToString();
        if (temp != string.Empty && temp != "0")
        	name += string.Format(" {0}", temp);
        else
        	естьЗамечания = true;
        
        //Норма расхода
        temp = материал.НормаРасхода.ToString();
        Объект еиНрасх = материал.ЕиНормыРасхода;
        if (temp != string.Empty && temp != "0")
        {
        	if (еиНрасх != null)
        	   name += string.Format(" Н.расх. {0} {1}", temp, еиНрасх.Параметр["Сокращённое наименование"]);
        	else
        	{
        		name += string.Format(" Н.расх. {0}", temp);
        		естьЗамечания = true;
        	}
        }
        else
        	естьЗамечания = true;
        
        //КИМ
		temp = материал.КИМ.ToString();
		if (temp != string.Empty && temp != "0")
        	name += string.Format(" КИМ {0}", temp);
        else
        	естьЗамечания = true;
        
        //КОИД
        temp = материал.Параметр["[Количество деталей, изготавливаемых из одной заготовки]"].ToString();
        if (temp != string.Empty && temp != "0")
        	name += string.Format(" КОИД {0}", temp);
        else
        	естьЗамечания = true;
        
        if (естьЗамечания)
        	ДобавитьЗамечания("Есть замечания по заполнению параметров материала '" + материал.Наименование + "'.");
        
        return name;
    }
    //==========================================================================================================================//
    


    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку О (содержание переходов) для МК, МОК и других с тем же содержанием
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуО (Переход переход, Строка строкаО, string букваО = "О")
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        букваО					Служебный символ
        НП						Номер перехода и его индекс
        Переход					Текст перехода
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        переход	 	переход, для которого получаем данные - именно его параметры попадут в отчёт
        строкаО						строка, в которую записываются данные, поэтому она должна содержать соответствующие теги
        букваО						определяет, будет ли отображаться буква "О"; по умолчанию буква ставится				
        */
        строкаО["букваО"].Текст = букваО;
        строкаО["НП"].Текст = переход.Номер + переход.Индекс;
        строкаО["Переход"].Текст = переход.Текст;
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку О (содержание переходов) для МК, МОК и других с тем же содержанием
    //и вставляет иллюстрацию, если она есть
    /****************************************************************************************************************************/
    public Строка ЗаполнитьСтрокуО (Переход переход, Текст текст, ШаблонСтроки О_шаблон, string букваО = "О")
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        букваО					Служебный символ
        НП						Номер перехода и его индекс
        Переход					Текст перехода
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        переход	 	                переход, для которого получаем данные - именно его параметры попадут в отчёт
        текст						параграф-текст в шаблоне отчёта
        О_шаблон                    шаблон строки, в которую должны записываться данные 
        букваО						определяет, будет ли отображаться буква "О"; по умолчанию буква ставится				
        */
       
		string текстПерехода = переход.Текст.Trim();
		int index = текстПерехода.IndexOf(figure);
		string параметр = "Иллюстрация";
		var иллюстрация = переход.Параметр[параметр];
		int высота = переход.Параметр["Высота иллюстрации"];
		Строка строкаТекста = null;
		
		//Если вставлять иллюстрацию не требуется
		if (высота < 1 || index == -1 || иллюстрация == null)
		{
			Строка строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
			ЗаполнитьСтрокуО(переход, строкаО, букваО);
			строкаТекста = строкаО;
		}
		else //нужно вставить иллюстрацию
		{
			Строка строкаО = null;
			Объект переходТП = НайтиОбъект("Технологические процессы", "ID", переход["ID"]);
			string частьТекста;
			string номер = переход.Номер + переход.Индекс;
			
			//Записываем первую часть текста перехода
			if (index > 0)
			{
				строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
				частьТекста = текстПерехода.Remove(index).Trim();
				строкаО["букваО"].Текст = букваО;
                строкаО["НП"].Текст = номер;
                строкаО["Переход"].Текст = частьТекста;
                букваО = "";
                номер = "";
                строкаТекста = строкаО;
            }
			
            //Вставляем иллюстрацию
            строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
            строкаО["букваО"].Текст = букваО;
            строкаО["НП"].Текст = номер;
            строкаО["Переход"].ВставитьЭскиз(переходТП, параметр, высота);
            if (строкаТекста == null) //переход начинается с иллюстрации
            	строкаТекста = строкаО;
            
            //Записываем оставшуюся часть
            частьТекста = текстПерехода.Remove(0, index + figure.Length).Trim();
            if (частьТекста != string.Empty)
            {
                строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
                строкаО["Переход"].Текст = частьТекста;
            }
		}
		return строкаТекста;
    }
    //==========================================================================================================================//

    
    
    /****************************************************************************************************************************/
    //Функция, которая заполняет посредством тегов строку О (содержание переходов) для МК, МОК и других с тем же содержанием
    //и вставляет иллюстрацию, если она есть. Текст перехода разбивается построчно/по абзацам.
    //Возвращает ссылку на первую заполненную текстом строку
    /****************************************************************************************************************************/
    public Строка ЗаполнитьСтрокуО (Переход переход, Текст текст, ШаблонСтроки О_шаблон, int ширина, string букваО = "О", bool построчно = true)
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        букваО					Служебный символ
        НП						Номер перехода и его индекс
        Переход					Текст перехода
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        переход	 	                переход, для которого получаем данные - именно его параметры попадут в отчёт
        текст						параграф-текст в шаблоне отчёта
        О_шаблон                    шаблон строки, в которую должны записываться данные 
        букваО						определяет, будет ли отображаться буква "О"; по умолчанию буква ставится	
        ширина                      ширина строки в целевом отчёте
        построчно                   разбивать текст перехода построчно или по абзацам			
        */
       
		if (ширина < 1)
			return ЗаполнитьСтрокуО (переход, текст, О_шаблон, букваО);
		
        string текстПерехода = переход.Текст.Trim();
		int index = текстПерехода.IndexOf(figure);
		string параметр = "Иллюстрация";
		var иллюстрация = переход.Параметр[параметр];
		int высота = переход.Параметр["Высота иллюстрации"];
		
		List<string> строкиПерехода;  //Текст перехода, разделённый на строки
		int количество;               //Количество таких строк
		
		Строка строкаТекста = null;
		
		//Если вставлять иллюстрацию не требуется
		if (высота < 1 || index == -1 || иллюстрация == null)
		{
			Строка строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
			строкаО["букваО"].Текст = букваО;
            строкаО["НП"].Текст = переход.Номер + переход.Индекс;
            строкаТекста = строкаО;
            
            //Разбиение текста перехода на строки, которые должны уместиться в карту
			строкиПерехода = РазбитьТекст(переход.Текст.Trim(), ширина, построчно);
			количество = строкиПерехода.Count();
			строкаО["Переход"].Текст = количество > 0 ? строкиПерехода[0] : "";
			for (int i = 1; i < количество; i++)
			{
				строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
				строкаО["Переход"].Текст = строкиПерехода[i];
			}
		}
		else //нужно вставить иллюстрацию
		{
			Строка строкаО = null;
			Объект переходТП = НайтиОбъект("Технологические процессы", "ID", переход["ID"]);
			string частьТекста;
			string номер = переход.Номер + переход.Индекс;
			
			//Записываем первую часть текста перехода
			if (index > 0)
			{
				строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
				частьТекста = текстПерехода.Remove(index).Trim();
				строкаО["букваО"].Текст = букваО;
                строкаО["НП"].Текст = номер;
                строкаТекста = строкаО;
                
                строкиПерехода = РазбитьТекст(частьТекста, ширина, построчно);
    			количество = строкиПерехода.Count();
    			строкаО["Переход"].Текст = количество > 0 ? строкиПерехода[0] : "";
    			for (int i = 1; i < количество; i++)
    			{
    				строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
    				строкаО["Переход"].Текст = строкиПерехода[i];
    			}
                букваО = "";
                номер = "";
            }
			
            //Вставляем иллюстрацию
            строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
            строкаО["букваО"].Текст = букваО;
            строкаО["НП"].Текст = номер;
            строкаО["Переход"].ВставитьЭскиз(переходТП, параметр, высота);
            if (строкаТекста == null) //Если переход начинается с иллюстрации
            	строкаТекста = строкаО;
            
            //Записываем оставшуюся часть
            частьТекста = текстПерехода.Remove(0, index + figure.Length).Trim();
            if (частьТекста != string.Empty)
            {
                строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
                строкиПерехода = РазбитьТекст(частьТекста, ширина, построчно);
    			количество = строкиПерехода.Count();
    			строкаО["Переход"].Текст = количество > 0 ? строкиПерехода[0] : "";
    			for (int i = 1; i < количество; i++)
    			{
    				строкаО = текст.Таблица.ДобавитьСтроку(О_шаблон);
    				строкаО["Переход"].Текст = строкиПерехода[i];
    			}
            }
		}
		return строкаТекста;
    }
    //==========================================================================================================================//
    
    
    private List<string> РазбитьТекст (string текст, int ширина, bool построчно = true)
    {
    	if (string.IsNullOrEmpty(текст))
    		return new List<string>(0);
    	
    	string[] массивТекста = текст.Split(new string[]{ Environment.NewLine }, StringSplitOptions.None);
    	if (!построчно)
    		return массивТекста.ToList();
    	
    	List<string> разделённыйТекст = new List<string>();
    	foreach (string элемент in массивТекста)
    	{
    		if (элемент.Length <= ширина)
    			разделённыйТекст.Add(элемент);
    		else
    		{
    			string temp2 = элемент;
    			int index = temp2.LastIndexOf(' ', ширина);
    			string temp1;
    			while (index != -1)
    			{
    				temp1 = temp2.Substring(0, index);
    				разделённыйТекст.Add(temp1.Trim());
    				
    				temp2 = temp2.Remove(0, index + 1).TrimStart();
    				if (temp2.Length > ширина)
        				index = temp2.LastIndexOf(' ', ширина);
    				else
    					index = -1;
    			}
    			temp1 = temp2;
    			разделённыйТекст.Add(temp1.Trim());
    		}
    	}
    	return разделённыйТекст;
    }
    
    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку О (содержание переходов) для МК, МОК и других с тем же содержанием,
    //вставляет иллюстрацию, если она есть, а также заполняет основное и вспомогательное время перехода
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуОиВремя (Переход переход, Строка строкаО, string букваО = "О")
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        букваО					Служебный символ
        НП						Номер перехода и его индекс
        Переход					Текст перехода
        То						Основное время
        Тв						Вспомогательное время
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        переход	 	                переход, для которого получаем данные - именно его параметры попадут в отчёт
        строкаО						строка, в которую записываются данные, поэтому она должна содержать соответствующие теги
        букваО						определяет, будет ли отображаться буква "О"; по умолчанию буква ставится				
        */
        ЗаполнитьСтрокуО(переход, строкаО, букваО);
        
        if (переход.То != 0)
        	строкаО["То"].Текст = string.Format(format2, переход.То);
        if (переход.Тв != 0)
        	строкаО["Тв"].Текст = string.Format(format2, переход.Тв);
    }
    //==========================================================================================================================//

    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку О (содержание переходов) для МК, МОК и других с тем же содержанием
    //и вставляет иллюстрацию, если она есть, а также заполняет основное и вспомогательное время перехода. 
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуОиВремя (Переход переход, Текст текст, ШаблонСтроки О_шаблон, string букваО = "О")
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        букваО					Служебный символ
        НП						Номер перехода и его индекс
        Переход					Текст перехода
        То						Основное время
        Тв						Вспомогательное время
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        переход	 	                переход, для которого получаем данные - именно его параметры попадут в отчёт
        текст						параграф-текст в шаблоне отчёта
        О_шаблон                    шаблон строки, в которую должны записываться данные 
        букваО						определяет, будет ли отображаться буква "О"; по умолчанию буква ставится				
        */
       
        Строка строкаО = ЗаполнитьСтрокуО(переход, текст, О_шаблон, букваО);
        if (строкаО == null)
        	return;
        
        if (переход.То != 0)
        	строкаО["То"].Текст = string.Format(format2, переход.То);
        if (переход.Тв != 0)
        	строкаО["Тв"].Текст = string.Format(format2, переход.Тв);
    }
    //==========================================================================================================================//

    
    /****************************************************************************************************************************/
    //Процедура, которая заполняет посредством тегов строку О (содержание переходов) для МК, МОК и других с тем же содержанием
    //и вставляет иллюстрацию, если она есть, а также заполняет основное и вспомогательное время перехода. 
    //Текст перехода разбивается построчно/по абзацам.
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуОиВремя (Переход переход, Текст текст, ШаблонСтроки О_шаблон, int ширина, string букваО = "О", bool построчно = true)
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        букваО					Служебный символ
        НП						Номер перехода и его индекс
        Переход					Текст перехода
        То						Основное время
        Тв						Вспомогательное время
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        переход	 	                переход, для которого получаем данные - именно его параметры попадут в отчёт
        текст						параграф-текст в шаблоне отчёта
        О_шаблон                    шаблон строки, в которую должны записываться данные 
        букваО						определяет, будет ли отображаться буква "О"; по умолчанию буква ставится	
        ширина                      ширина строки в целевом отчёте
        построчно                   разбивать текст перехода построчно или по абзацам			
        */
       
        Строка строкаО = ЗаполнитьСтрокуО(переход, текст, О_шаблон, ширина, букваО, построчно);
        if (строкаО == null)
        	return;
        
        if (переход.То != 0)
        	строкаО["То"].Текст = string.Format(format2, переход.То);
        if (переход.Тв != 0)
        	строкаО["Тв"].Текст = string.Format(format2, переход.Тв);
    }
    //==========================================================================================================================//

    
    /****************************************************************************************************************************/
    //Формирование оснащения
    /****************************************************************************************************************************/
    public string СодержимоеСтрокиОснащения (Оснащение рассматриваемоеОснащение, int вывестиКоличество = 0)
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        result					Cтрока, в которой будет формироваться выходное значение
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        рассматриваемоеОснащение	оснащение, для которого получаем данные 
        вывестиКоличество			необязательный параметр для вывода количества
                0					- не выводить количество
                1					- выводить количество в круглых скобках				
        */
        
        string result = "";	
        Объект оснащениеСТО = рассматриваемоеОснащение.СвязанныйОбъект["Оснащение из справочника СТО"];
        if (оснащениеСТО != null) //если оснащение берётся из справочника СТО
        {
            switch (вывестиКоличество)
            {
                case 0:
                    result = оснащениеСТО.Параметр["Обозначение"] + " " + оснащениеСТО.Параметр["Наименование"];
                    break;
                case 1:
                    result = оснащениеСТО.Параметр["Обозначение"] + " (" + рассматриваемоеОснащение.Количество + ") " + оснащениеСТО.Параметр["Наименование"];
                    break;
                default:
                    MessageBox.Show("Для передаваемого в функцию параметра о способе вывода количества: " + вывестиКоличество.ToString() + "\nне предусмотрено обработчика");
                    break;
            }
        }
        else //если оснащение не связано со справочником СТО
        {
            switch (вывестиКоличество)
            {
                case 0:
                    result = рассматриваемоеОснащение.Наименование;
                    break;
                case 1:
                    result = рассматриваемоеОснащение.Наименование + " (" + рассматриваемоеОснащение.Количество + ")";
                    break;
                default:
                    MessageBox.Show("Для передаваемого в функцию параметра о способе вывода количества: " + вывестиКоличество.ToString() + "\nне предусмотрено обработчика");
                    break;
            }
        }
        return result;
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Заполнение оснащения перехода
    /****************************************************************************************************************************/
    public void ВывестиОснащениеПерехода (Переход переход, Текст текст, ШаблонСтроки шаблонОсн, int вывестиКоличество = 0, int объединятьОснащение = 1, string разделитель = "; ")
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        ОснащениеПерехода		Данные по оснащению перехода
        букваТ					Служебный символ "Т"
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        переход	 	переход, для которого получаем данные - именно с этого перехода будет собираться оснащение
        текст						параграф-текст шаблона, в который записываются данные
        шаблонОсн					шаблон, по которому будет создаваться строка с оснащением
        вывестиКоличество			необязательный параметр для вывода количества
                0					- не выводить количество (значение по умолчанию)
                1					- выводить количество в круглых скобках	
        объединятьОснащение			необязательный параметр - должно ли объединяться оснащение по переходу или писаться с новой строки
                0					- не объединять
                1					- объединять через разделитель (значение по умолчанию)
        разделитель					через какой символ будет идти объединение (по умолчанию "; ")									
        */
        
        Оснащение[] списокОснащения = переход.Оснащение;
        string result = "";
        
        if (объединятьОснащение == 1)	//если нужно объединять оснащение
        {
            //Формируем объединённый список оснащения
            foreach (Оснащение оснащение in списокОснащения)
            {
                result = result + СодержимоеСтрокиОснащения(оснащение, вывестиКоличество) + разделитель;
            }
            
            if (result != "") //если есть хотя бы одна запись
            {
                result = result.Remove(result.Length - разделитель.Length, разделитель.Length); //удаляем последний разделитель
            
                //Заполняем строку в отчёте
                Строка строкаОсн = текст.Таблица.ДобавитьСтроку(шаблонОсн);
                строкаОсн["букваТ"].Текст = "Т";
                строкаОсн["ОснащениеПерехода"].Текст = result;
            }
        }
        else 	//если не нужно объединять оснащение
        {
            //Для каждого оснащения формируется строка отчёта
            bool flag = false;	//true - не первая строка в оснащении; false - первая
            foreach (Оснащение оснащение in списокОснащения)
            {
                Строка строкаОсн = текст.Таблица.ДобавитьСтроку(шаблонОсн);
                строкаОсн["ОснащениеПерехода"].Текст = СодержимоеСтрокиОснащения(оснащение, вывестиКоличество);
                if (flag) //если это уже не первая строка, то Т ставить не нужно
                {
                    строкаОсн["букваТ"].Текст = "";
                }
                else //если первая, то нужно поставить букву Т
                {
                    flag = true;
                    строкаОсн["букваТ"].Текст = "Т";
                }
            }

        }
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Заполнение оснащения операции 
    //Идёт проверка на то, что оснащение не является оборудованием (дополнительно можно исключить вспомогательный материал и СОЖ)
    /****************************************************************************************************************************/
    public void ВывестиОснащениеОперации (Операция рассматриваемаяОперация, Текст текст, ШаблонСтроки шаблонОсн, int вывестиКоличество = 0, int типФильтрации = 1, int объединятьОснащение = 1, string разделитель = "; ")
    {
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:					Содержание данных:
        ОснащениеОперации		Данные по оснащению операции
        букваТ					Служебный символ "Т"
        ------------------------------------------------------------------------------------*/
                
        /*Входные данные
        рассматриваемаяОперация	 	операция, для которой получаем данные 
        текст						параграф-текст шаблона, в который записываются данные
        шаблонОсн					шаблон, по которому будет создаваться строка с оснащением
        вывестиКоличество			необязательный параметр для вывода количества
                0					- не выводить количество (значение по умолчанию)
                1					- выводить количество в круглых скобках	
        типФильтрации				какие данные будем использовать в отчёте - необходима связь с СТО
                0					- все (без фильтрации)
                1					- исключая оборудование (значение по умолчанию)
                2					- исключая оборудование и СОЖ
                3					- исключая оборудование, СОЖ и вспомогательные материалы	
        объединятьОснащение			необязательный параметр - должно ли объединяться оснащение по переходу или писаться с новой строки
                0					- не объединять
                1					- объединять через разделитель (значение по умолчанию)
        разделитель					через какой символ будет идти объединение (по умолчанию "; ")									
        */
        
        Оснащение[] списокОснащения = рассматриваемаяОперация.Оснащение;
        string result = "";
        
        if (объединятьОснащение == 1)	//если нужно объединять оснащение
        {
            //Формируем объединённый список оснащения
            foreach (Оснащение оснащение in списокОснащения)
            {
                Объект оснащениеСТО = оснащение.СвязанныйОбъект["Оснащение из справочника СТО"];
                if (оснащениеСТО != null)
                {
                    if (!ФильтрОснащения(оснащениеСТО, типФильтрации))
                    	continue;
                }
                
                //Если текущее оснащение прошло фильтрацию, или фильтрация невозможна из-за отсутствия связи с СТО, то формируем запись
                result = result + СодержимоеСтрокиОснащения(оснащение, вывестиКоличество) + разделитель;
            }
            
            if (result != "") //если есть хотя бы одна запись
            {
                result = result.Remove(result.Length - разделитель.Length, разделитель.Length); //удаляем последний разделитель
            
                //Заполняем строку в отчёте
                Строка строкаОсн = текст.Таблица.ДобавитьСтроку(шаблонОсн);
                строкаОсн["букваТ"].Текст = "Т";
                строкаОсн["ОснащениеОперации"].Текст = result;
            }

        }
        else 	//объединение не нужно
        {
            //Для каждого оснащения формируется строка отчёта
            bool flag = false;	//true - не первая строка в оснащении; false - первая
            foreach (Оснащение оснащение in списокОснащения)
            {
                Объект оснащениеСТО = оснащение.СвязанныйОбъект["Оснащение из справочника СТО"];
                if (оснащениеСТО != null)
                {
                    if (!ФильтрОснащения(оснащениеСТО, типФильтрации))
                    	continue;
                }
                
                //Если текущее оснащение прошло фильтрацию, или фильтрация невозможна из-за отсутствия связи с СТО, то формируем запись
                Строка строкаОсн = текст.Таблица.ДобавитьСтроку(шаблонОсн);
                строкаОсн["ОснащениеПерехода"].Текст = СодержимоеСтрокиОснащения(оснащение, вывестиКоличество);
                
                if (flag) //если это уже не первая строка, то Т ставить не нужно
                {
                    строкаОсн["букваТ"].Текст = "";
                }
                else //если первая, то нужно поставить букву Т
                {
                    flag = true;
                    строкаОсн["букваТ"].Текст = "Т";
                }
            }
        }
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Заполнение строки Р для случая механической обработки (резанием)
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуР_МехОбр (Переход переход, Строка строкаР, int выводЕИ = 1)
    {				
        /* В процедуре заполняются следующие данные ----------------------------------------
        Тег:				Содержание данных:
        V			Скорость резания	
        S			Подача	
        N			Частота вращения шпинделя	
        t			Глубина резания
        i			Количество проходов	
        //P			Припуск на обработку		- не используется
        L			Рабочий ход инструмента	
        //L1			Врезание инструмента	- не используется
        //L2			Перебег инструмента		- не используется
        ПИ			Номер позиции инструментальной наладки (ЧПУ)
        D_B			Размер обрабатываемого диаметра (ширины) детали	
        ------------------------------------------------------------------------------------*/
        
        /*Входные данные
        переход		переход, для которого получаем данные 
        строкаР						строка отчёта, в который будем записывать полученные данные		
        выводЕИ						выводить ли единицу измерения
            1						- да (по умолчанию)
            другое					- нет
        */
                        
        string наименование = "";	//наименование параметра
        string значение = "";		//значение параметра, преобразованное в строку
        string ед_изм = "";			//единица измерения
        
        string result = "";		//особые указания (или сообщение)
        string perehinfo = СводноеНаименование(переход);
        
        Режим[] списокПараметровРежима = переход.Режимы;
        foreach (Режим параметр in списокПараметровРежима)
        {
            наименование = параметр.Наименование;
            значение = параметр.Значение;
            if (значение != "")
            {
                if (выводЕИ == 1)	//проверяем, нужно ли выводить единицу измерения
                {
                    //ед_изм = параметр.ЕИ;
                    ед_изм = (параметр.Параметр["[ЕИ режима обработки]->[Сокращённое наименование]"]).ToString();
                    if (ед_изм != "")
                        ед_изм = " " + ед_изм;	//если единица измерения указана, то добавляем перед ней пробел
                }
                switch (наименование)
                {
                    case "V":
                    case "v":
                        строкаР["V"].Текст = значение + ед_изм;
                        break;
                    case "S":
                    case "s":
                        строкаР["S"].Текст = значение + ед_изм;
                        break;
                    case "N":
                    case "n":
                        строкаР["N"].Текст = значение + ед_изм;
                        break;
                    case "t":
                        строкаР["t"].Текст = значение + ед_изм;
                        break;
                    case "i":
                        строкаР["i"].Текст = значение + ед_изм;
                        break;
                    case "L":
                        строкаР["L"].Текст = значение + ед_изм;
                        break;
                    case "ПИ":
                        строкаР["ПИ"].Текст = значение + ед_изм;
                        break;
                    case "D_B":
                        строкаР["D_B"].Текст = значение + ед_изм;
                        break;
                    default:
                        result = result + наименование + " = " + значение + ед_изм + "; ";
                        break;
                }
            }
            else
            {
                ДобавитьЗамечания("Для параметра '" + наименование + "' перехода '" + perehinfo + "' не указано значение.");
            }
        }
        
        if (result != "")
        {
            строкаР["ОсобыеУказания"].Текст = result.Remove(result.Length - 2, 2);
            //MessageBox.Show("Не предусмотрены места в отчёте для следующих параметров:\n" + result);
        }	
        
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Заполнение строки Т для ведомости оснащения
    /****************************************************************************************************************************/
    public int ЗаполнитьСтрокуТ_дляВО (Операция рассматриваемаяОперация, Текст текст, ШаблонСтроки шаблонОсн, bool выводитьОперацию = false, 
                                        int типФильтрации = 1)
    {
    	/* В процедуре заполняются следующие данные ----------------------------------------
        Тег:				Содержание данных:
        Т					Служебный символ "Т"
        НО					Номер операции (включая индекс)
        Обозначение ТО		Обозначение оснащения (из СТО)
        Наименование ТО		Наименование оснащения (из СТО)
        Кол.				Количество оснащения, используемого в данной операции
        ------------------------------------------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация		операция, для которой получаем данные 
        текст						параграф-текст шаблона, в который записываются данные
        шаблонОсн					шаблон, по которому будет создаваться строка с оснащением
        выводитьОперацию			выводятся ли в карту данные об операции (нет по умолчанию)
        типФильтрации				какие данные будем использовать в отчёте - необходима связь с СТО
                0					- все (без фильтрации)
                1					- исключая оборудование (значение по умолчанию)
                2					- исключая оборудование и СОЖ
                3					- исключая оборудование, СОЖ и вспомогательные материалы
        
        Выходные данные:
        количествоСтрок				нужно для определения количества сформированных записей
        */
		int количествоСтрок = 0;
    	string operinfo = СводноеНаименование(рассматриваемаяОперация);
    	
    	List<Оснащение> списокОснащения = new List<Оснащение>();
    	списокОснащения.AddRange(рассматриваемаяОперация.Оснащение);
    	foreach (Переход переход in рассматриваемаяОперация.Переходы)
    		списокОснащения.AddRange(переход.Оснащение);
    	
    	string номерОперации = "";
    	if (!выводитьОперацию)
    		номерОперации = рассматриваемаяОперация.Номер + рассматриваемаяОперация.Индекс;
    	
        int kol = 0;
        
        List<ОснащениеОперации> всёОснащение = new List<ОснащениеОперации>();
        foreach (Оснащение оснащение in списокОснащения)
        {
            Объект оснащениеСТО = оснащение.СвязанныйОбъект["Оснащение из справочника СТО"];
            ОснащениеОперации оснащениеОперации = всёОснащение.FirstOrDefault(o => o.ОснащениеСТО["Guid"] == оснащениеСТО["Guid"]);
            
            //Если оснащение операции ещё не добавлено в список
            if (оснащениеОперации == null)
            {
            	оснащениеОперации = new ОснащениеОперации(оснащениеСТО, оснащение.Количество);
                if (оснащениеОперации.Вид != ВидОснащения.Нет)
                {
                    if (!ФильтрОснащения(оснащениеСТО, типФильтрации))
                    	continue;
                }
                else
                {
                	kol++;
                	continue;
                }
                всёОснащение.Add(оснащениеОперации);
            }
            else
            	оснащениеОперации.Количество += оснащение.Количество;
        }
        
        //Для каждого оснащения формируется строка отчёта
        bool flag = false;	//true - не первая строка в оснащении; false - первая
        
        //Приспособления
    	var упорядоченноеСТО = всёОснащение.Where(o => o.Вид == ВидОснащения.Приспособление);
        ЗаписатьОснащениеВОтчёт(упорядоченноеСТО, текст, шаблонОсн, ref flag, ref количествоСтрок, номерОперации);
        //Режущий инструмент
        упорядоченноеСТО = всёОснащение.Where(o => o.Вид == ВидОснащения.РежущийИнструмент);
        ЗаписатьОснащениеВОтчёт(упорядоченноеСТО, текст, шаблонОсн, ref flag, ref количествоСтрок, номерОперации);
        //Меритель
        упорядоченноеСТО = всёОснащение.Where(o => o.Вид == ВидОснащения.СредстваИзмерения);
        ЗаписатьОснащениеВОтчёт(упорядоченноеСТО, текст, шаблонОсн, ref flag, ref количествоСтрок, номерОперации);
        //Вспомогательный материал
        упорядоченноеСТО = всёОснащение.Where(o => o.Вид == ВидОснащения.ВспомогательныйМатериал);
        ЗаписатьОснащениеВОтчёт(упорядоченноеСТО, текст, шаблонОсн, ref flag, ref количествоСтрок, номерОперации);
        //СОЖ
        упорядоченноеСТО = всёОснащение.Where(o => o.Вид == ВидОснащения.СОЖ);
        ЗаписатьОснащениеВОтчёт(упорядоченноеСТО, текст, шаблонОсн, ref flag, ref количествоСтрок, номерОперации);
        //Средства защиты
        упорядоченноеСТО = всёОснащение.Where(o => o.Вид == ВидОснащения.СредстваЗащиты);
        ЗаписатьОснащениеВОтчёт(упорядоченноеСТО, текст, шаблонОсн, ref flag, ref количествоСтрок, номерОперации);
        //Всё остальное
        упорядоченноеСТО = всёОснащение.Where(o => o.Вид != ВидОснащения.Приспособление 
                                                && o.Вид != ВидОснащения.РежущийИнструмент 
                                                && o.Вид != ВидОснащения.СредстваИзмерения 
                                                && o.Вид != ВидОснащения.ВспомогательныйМатериал 
                                                && o.Вид != ВидОснащения.СОЖ 
                                                && o.Вид != ВидОснащения.СредстваЗащиты 
                                             );
        ЗаписатьОснащениеВОтчёт(упорядоченноеСТО, текст, шаблонОсн, ref flag, ref количествоСтрок, номерОперации);
        
        if (kol > 0)
        {
            ДобавитьЗамечания("Для операции '" + operinfo + "' не указана связь между Оснащением операции и Оснащением из справочника СТО для "
        		+ kol.ToString() + " из " + (списокОснащения.Count).ToString() + " объекта(ов).");
        }
        return количествоСтрок;
    }
    //==========================================================================================================================//
    
    
    private class ОснащениеОперации
    {
    	public Объект ОснащениеСТО;
    	public double Количество;
    	public ВидОснащения Вид;
    	
    	public ОснащениеОперации(Объект оснащениеСТО, double количество)
    	{
    		this.ОснащениеСТО = оснащениеСТО;
    		this.Количество = количество;
    		this.Вид = ОпределитьВидОснащения(оснащениеСТО);
    	}    	    	
    }
    
    private static ВидОснащения ОпределитьВидОснащения(Объект оснащениеСТО)
	{
		if (оснащениеСТО == null)
			return ВидОснащения.Нет;
		
		//Оборудование
		if (оснащениеСТО.Тип.ПорожденОт("a0468938-0e70-414d-b6f3-db40244d1d30") || оснащениеСТО.Тип.ПорожденОт("53164cd5-1af9-478a-8325-32046e9f5042"))
			return ВидОснащения.Оборудование;
		//Комплект
		else if (оснащениеСТО.Тип.ПорожденОт("63369c60-e1c9-4ef3-9960-a5cca399f646"))
			return ВидОснащения.Комплект;
		//Оснащение 14
		else if (оснащениеСТО.Тип.ПорожденОт("bb4a1b1a-9ec6-431e-ae09-fb8f52120c9e"))
		{
			//Оснащение из каталога
			Объект оснащениеИзКаталога = оснащениеСТО.СвязанныйОбъект["1d11f626-ee27-4759-9c63-8e948daea49a"];
			
			if (оснащениеИзКаталога == null)
				return ВидОснащения.Нет;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Режущий инструмент"))
				return ВидОснащения.РежущийИнструмент;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Слесарный и слесарно-сборочный инструмент"))
				return ВидОснащения.СлесарныйИнструмент;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Вспомогательный материал"))
				return ВидОснащения.ВспомогательныйМатериал;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Средства измерения"))
				return ВидОснащения.СредстваИзмерения;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Смазочно-охлаждающая жидкость"))
				return ВидОснащения.СОЖ;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Приспособления"))
				return ВидОснащения.Приспособление;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Вспомогательный инструмент"))
				return ВидОснащения.ВспомогательныйИнструмент;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Средства защиты"))
				return ВидОснащения.СредстваЗащиты;
			else if (оснащениеИзКаталога.Тип.ПорожденОт("Вспомогательная оснастка"))
				return ВидОснащения.ВспомогательнаяОснастка;
		}
		//Оснащение 2012 и ранее
		else if (оснащениеСТО.Тип.ПорожденОт("96f5e5b9-e2ab-4979-954e-6db616199fa4"))
		{
			if (оснащениеСТО.Тип.ПорожденОт("Приспособление"))
				return ВидОснащения.Приспособление;
			else if (оснащениеСТО.Тип.ПорожденОт("Смазывающие и охлаждающие жидкости (СОЖ)"))
				return ВидОснащения.СОЖ;
			else if (оснащениеСТО.Тип.ПорожденОт("Вспомогательный инструмент"))
				return ВидОснащения.ВспомогательныйИнструмент;
			else if (оснащениеСТО.Тип.ПорожденОт("Металлорежущий инструмент"))
				return ВидОснащения.РежущийИнструмент;
			else if (оснащениеСТО.Тип.ПорожденОт("Контрольно-измерительный инструмент"))
				return ВидОснащения.СредстваИзмерения;
			else if (оснащениеСТО.Тип.ПорожденОт("Сборочный инструмент"))
				return ВидОснащения.СлесарныйИнструмент;
			/*else if (оснащениеСТО.Тип.ПорожденОт("Сборочные комплектующие"))
				return ВидОснащения.Нет;
			else if (оснащениеСТО.Тип.ПорожденОт("Литейная оснастка"))
				return ВидОснащения.Нет;*/
			else if (оснащениеСТО.Тип.ПорожденОт("Вспомогательный материал"))
				return ВидОснащения.ВспомогательныйМатериал;
			else if (оснащениеСТО.Тип.ПорожденОт("Средство защиты"))
				return ВидОснащения.СредстваЗащиты;
			else if (оснащениеСТО.Тип.ПорожденОт("Слесарно-монтажный инструмент"))
				return ВидОснащения.СлесарныйИнструмент;
			/*else if (оснащениеСТО.Тип.ПорожденОт("Пневмоинструмент"))
				return ВидОснащения.Нет;
			else if (оснащениеСТО.Тип.ПорожденОт("Электроинструмент"))
				return ВидОснащения.Нет;
			else if (оснащениеСТО.Тип.ПорожденОт("Сварочный инструмент"))
				return ВидОснащения.Нет;*/
		}
		
		return ВидОснащения.Другое;
	}
    
    private enum ВидОснащения
    {
    	Нет,
    	Оборудование,
    	Приспособление,
    	РежущийИнструмент,
    	СредстваИзмерения,
    	ВспомогательныйМатериал,
    	СОЖ,
    	ВспомогательныйИнструмент,
    	СредстваЗащиты,
    	СлесарныйИнструмент,
    	ВспомогательнаяОснастка,
    	Комплект,
    	Другое
    }
    
    private bool ФильтрОснащения(Объект оснащениеСТО, int типФильтрации)
    {
    	/*Входные данные ---------------------------------------------------------------------------
        видОснащения    			вид оснащения, для которого нужно проверить соответствие фильтру
        типФильтрации				какие данные будем использовать в отчёте
                0					- все (без фильтрации)
                1					- исключая оборудование (значение по умолчанию)
                2					- исключая оборудование и СОЖ
                3					- исключая оборудование, СОЖ и вспомогательные материалы
        -------------------------------------------------------------------------------------------*/
    	
        if (типФильтрации < 0 || типФильтрации > 3)
        {
            MessageBox.Show("Использовано недопустимое значение:" + типФильтрации.ToString() 
        	                + " для фильтрации объектов\nОно будет заменено на значение по умолчанию");
            типФильтрации = 1;
        }
        
        ВидОснащения видОснащения = ОпределитьВидОснащения(оснащениеСТО);
        if (видОснащения != ВидОснащения.Комплект)
        {
            switch (типФильтрации)
            {
            	case 1:
                    if (видОснащения == ВидОснащения.Оборудование)
                        return false;
                    break;
                case 2:
                    if (видОснащения == ВидОснащения.Оборудование || видОснащения == ВидОснащения.СОЖ)
                        return false;
                    break;
                case 3:
                    if (видОснащения == ВидОснащения.Оборудование || видОснащения == ВидОснащения.СОЖ || видОснащения == ВидОснащения.ВспомогательныйМатериал)
                        return false;
                    break;
            }
        }
        else
        {
        	Объекты элементыКомплекта = оснащениеСТО.СвязанныеОбъекты["5277f4c4-68b5-43b1-8164-76f2648cbb0b"]; //Средства технологического оснащения
        	
        	//Проверяем содержимое комплекта на соответствие условию фильтрации
        	foreach (Объект элементКомплекта in элементыКомплекта)
        		if (!ФильтрОснащения(элементКомплекта, типФильтрации))
        			return false;
        }
        
        return true;
    }
    
    private bool ФильтрОборудования(Объект оснащениеСТО)
    {
    	ВидОснащения видОснащения = ОпределитьВидОснащения(оснащениеСТО);
    	if (видОснащения == ВидОснащения.Оборудование)
    		return true;
    	else if (видОснащения == ВидОснащения.Комплект)
    	{
    		Объекты элементыКомплекта = оснащениеСТО.СвязанныеОбъекты["5277f4c4-68b5-43b1-8164-76f2648cbb0b"]; //Средства технологического оснащения
    		
        	//Проверяем содержимое комплекта на соответствие условию фильтрации
        	foreach (Объект элементКомплекта in элементыКомплекта)
        		if (ФильтрОборудования(элементКомплекта)) //если хотя бы один их элементов является оборудованием, то комплект нам подходит
        			return true;
    	}
    	return false;
    }
    
    private void ЗаписатьОснащениеВОтчёт(IEnumerable<ОснащениеОперации> упорядоченноеСТО,
                                         Текст текст, ШаблонСтроки шаблонОсн,
                                         ref bool flag, ref int количествоСтрок, string номерОперации)
    {
    	if (упорядоченноеСТО != null && упорядоченноеСТО.Count() > 1)
    		упорядоченноеСТО = упорядоченноеСТО.OrderBy(o => (string)o.ОснащениеСТО.Параметр["Обозначение"]);
    	foreach (ОснащениеОперации оснащениеОперации in упорядоченноеСТО)
    	{
    		Строка строкаОсн = текст.Таблица.ДобавитьСтроку(шаблонОсн);
            количествоСтрок++;
            строкаОсн["Обозначение ТО"].Текст = оснащениеОперации.ОснащениеСТО.Параметр["Обозначение"];
            строкаОсн["Наименование ТО"].Текст = оснащениеОперации.ОснащениеСТО.Параметр["Наименование"];
            строкаОсн["Кол."].Текст = оснащениеОперации.Количество;
            
            if (flag) //если это уже не первая строка, то Т ставить не нужно
            {
                строкаОсн["Т"].Текст = "";
            }
            else //если первая, то нужно поставить букву Т
            {
                flag = true;
                строкаОсн["Т"].Текст = "Т";
                строкаОсн["НО"].Текст = номерОперации;
            }
    	}
    }

    /****************************************************************************************************************************/
    //Заполнение строки Д для ведомости оборудования
    /****************************************************************************************************************************/
    public int ЗаполнитьСтрокуД_дляВОБ (Операция рассматриваемаяОперация, Текст текст, ШаблонСтроки шаблонОб)
    {
    	/* В процедуре заполняются следующие данные ----------------------------------------
        Тег:				Содержание данных:
        Д					Служебный символ "Д"
        НПП					Номер по порядку
        Оборудование		Сводные данные по оборудованию (из СТО)
        ------------------------------------------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация		операция, для которой получаем данные 
        текст						параграф-текст шаблона, в который записываются данные
        шаблонОб					шаблон, по которому будет создаваться строка с оборудованием
        
        Выходные данные:
        количествоСтрок	= нпп		нужно для определения количества сформированных записей
        */
		
        Оснащение[] списокОснащения = рассматриваемаяОперация.Оснащение;
        
        ObjectAccessor[] arr = списокОснащения.ToArray<ObjectAccessor>();
        Объекты списокОснащенияСТО = ВыполнитьМакрос(Макрос_Переменные, "ПолучитьОбъектыПоСвязи", arr, "Оснащение из справочника СТО");
        
        //Замечания по оснащению операции
        int osn = списокОснащения.Length;
        int osnSTO = списокОснащенияСТО.Count;
        if (osnSTO != osn)
        {
            string operinfo = СводноеНаименование(рассматриваемаяОперация);
            ДобавитьЗамечания("Для операции '" + operinfo + "' не указана связь между Оснащением операции и Оснащением из справочника СТО для "
            	+ (osn - osnSTO).ToString() + " из " + osn.ToString() + " объекта(ов).");
        }
		
        int нпп = 0;
        string result;
        //Список оборудования операции
        foreach(var оснащение in списокОснащенияСТО)
        {
        	if (ФильтрОборудования(оснащение))
            {
                нпп++;
                result = оснащение.Параметр["Обозначение"].ToString();
                if (оснащение.Параметр["Модель"].ToString() != "")
                    result = result + " " + оснащение.Параметр["Модель"].ToString();
                if (оснащение.Параметр["Наименование"].ToString() != "")
                    result = result + " " + оснащение.Параметр["Наименование"].ToString();
                if (оснащение.Параметр["Инвентарный номер"].ToString() != "")
                    result = result + " " + оснащение.Параметр["Инвентарный номер"].ToString();
                
                Строка строкаОб = текст.Таблица.ДобавитьСтроку(шаблонОб);
                if (нпп == 1)
                	строкаОб["Д"].Текст = "Д";
                
                строкаОб["НПП"].Текст = нпп.ToString();
                строкаОб["Оборудование"].Текст = result;
            }
        }
        return нпп;
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Функция, которая формирует цеховой маршрут по техпроцессу
    /****************************************************************************************************************************/
    public string ПолучитьМаршрут (ТехнологическийПроцесс техпроцесс, string разделитель = ", ")
    {
    	//Получение списка операций техпроцесса
    	Операция[] списокОпераций = техпроцесс.Операции;
    	
    	//Вспомогательные переменные
    	int предыдущийЦех = 0;
    	int текущийЦех = 0;
    	string номерЦеха = "";
    	string маршрут = "";
    	string tpinfo = СводноеНаименование(техпроцесс);
    	
    	foreach (Операция операция in списокОпераций)
    	{
    		//Поиск цеха в списке подразделений
    		Объект цех = null;
    		Объект остальное = null;
        	Объекты ЦехУчастокРМ = ПолучитьПроизводственныеПодразделения(операция);
	        foreach (Объект подразделение in ЦехУчастокРМ)
	        {
	            if (подразделение.Тип == "Цех")
	            	цех = подразделение;
	            if (подразделение.Тип != "Цех" && подразделение.Тип != "Участок" && подразделение.Тип != "Рабочее место")
	            	остальное = подразделение;
	        }
	        
	        //Получение номера цеха
	        if (цех != null)
	        {
	        	текущийЦех = цех.Параметр["ID"];
	        	номерЦеха = цех.Параметр["Номер"];
	        	if (номерЦеха == "")
	        	{
	        		номерЦеха = "  ";
	        		string operinfo = СводноеНаименование(операция);
	        		ДобавитьЗамечания("Не указан номер цеха для операции '" + operinfo + "' (техпроцесс '" + tpinfo + "').");
	        	}
	        }
	        else
	        {
	        	if (остальное != null)
	        	{
	        		текущийЦех = остальное.Параметр["ID"];
	        		номерЦеха = остальное.Параметр["Сокращённое название"];
	        		if (номерЦеха == "")
		        	{
		        		номерЦеха = "  ";
		        		string operinfo = СводноеНаименование(операция);
		        		ДобавитьЗамечания("Не указано сокращённое название подразделения для операции '" + operinfo + "' (техпроцесс '" + tpinfo + "').");
		        	}
	        	}
	        	else
	        	{
		        	string operinfo = СводноеНаименование(операция);
		        	ДобавитьЗамечания("Для операции '" + operinfo + "' (техпроцесс '" + tpinfo + "') не указано производственное подразделение.");
		        	номерЦеха = "  ";
	        	}
	        }
	        
	        //Добавление цеха в маршрут, если он не совпадает с предыдущим
	        if (текущийЦех != предыдущийЦех)
	        {
	        	предыдущийЦех = текущийЦех;
	        	маршрут += номерЦеха + разделитель;
	        }
        }
    	
    	//Удаление последнего разделителя
    	if (маршрут != "")
    	{
    		if (маршрут.Length > разделитель.Length)
    			маршрут = маршрут.Substring(0, маршрут.Length - разделитель.Length);
    		else
    			маршрут = "";
    	}
    	//Удаление значения по умолчанию
    	if (маршрут == "  ")
    		маршрут = "";
    	
    	return маршрут;
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Заполнение строки К/М или Л/М и Н/М для маршрутной и маршрутно-операционной карты сборки
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуКЛ (Операция рассматриваемаяОперация, Текст текст, ШаблонСтроки КЛ_шаблон, bool горизонтальная)
    {
    	/* В процедуре заполняются следующие данные ----------------------------------------
        Тег:				Содержание данных:
        букваК              Служебный символ "К" или "М" для горизонтальной формы
        букваЛ              Служебный символ "Л" или "М" для вертикальной формы
        букваН              Служебный символ "Н" или "М" для вертикальной формы
        НаименованиеДСЕ     Наименование детали, сборочной единицы или материала
        ОбозначениеДСЕ      Обозначение детали, сборочной единицы или материала
        ОПП                 Обозначение подразделения (откуда/куда) поступают комплектуюущие или материалы
        КИ                  Количество деталей, сборочных единиц или материала, применяемых/получаемых при сборке/разборке
        ЕВ                  Код единицы величины/единица измерения
        ЕН                  Единица нормирования
        Нрасх               Норма расхода
        ------------------------------------------------------------------------------------*/
        
        /*Входные данные
        рассматриваемаяОперация		операция, для которой получаем данные 
        текст						параграф-текст шаблона, в который записываются данные
        КЛ_шаблон					шаблон, по которому будет создаваться строка с комплектующими
        горизонтальная              флаг для опеределения, является ли форма горизонтальной 
                                    (заполняется букваК) или вертикальной (букваЛ и букваН)
        */
		
        if (!рассматриваемаяОперация.Тип.ПорожденОт("Сборочная операция"))
        	return;
        
        Объекты компоненты = рассматриваемаяОперация.СвязанныеОбъекты["Комплект на операцию"];
        if (компоненты.Count() < 1)
        	return;
        
        var нематериалы = компоненты.Where(к => к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"] != null //Изделие
                                           && !к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"].Тип.ПорожденОт("Материал")
                                          ).ToList();
        var материалы = компоненты.Where(к => к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"] != null //Изделие
                                           && к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"].Тип.ПорожденОт("Материал")
                                          ).ToList();
        
        //Заполнение строк отчёта по деталям и сборочным единицам
        for (int i = 0; i < нематериалы.Count; i++)
        {
        	Объект компонент = нематериалы[i];
        	Строка строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
        	
        	//Простановка служебных символов
        	if (!горизонтальная)
        	{
        		строкаКЛ["букваЛ"].Текст = "Л";
                строкаКЛ["букваН"].Текст = "Н";
        	}
        	else if (i == 0)
        	{
        		строкаКЛ["букваК"].Текст = "К";
        	}
        	
        	//Заполнение данных по детале, сборочной единице или материалу
        	ЗаполнитьСтрокуКомпонента(строкаКЛ, компонент);
        }
        
        //Заполнение строк отчёта по материалам
        for (int i = 0; i < материалы.Count; i++)
        {
        	Объект компонент = материалы[i];
        	Строка строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
        	
        	//Простановка служебных символов
        	if (i == 0)
        	{
        		if (горизонтальная)
        			строкаКЛ["букваК"].Текст = "М";
        		else
        			строкаКЛ["букваЛ"].Текст = "М";
        	}
        	
        	//Заполнение данных по детале, сборочной единице или материалу
        	ЗаполнитьСтрокуКомпонента(строкаКЛ, компонент);
        }
        
        //Добавление замечаний
        int количествоКомпонентов = компоненты.Count();
        int количествоБезСвязи = количествоКомпонентов - (нематериалы.Count + материалы.Count);
        if (количествоБезСвязи > 0)
        	ДобавитьЗамечания(string.Format("В операции '{0}' {1} из {2} компонентов не имеют связи на справочник Номенклатура.", 
        	                                СводноеНаименование(рассматриваемаяОперация), количествоБезСвязи, количествоКомпонентов));
        	
    }
    //==========================================================================================================================//
    
    
    
    /****************************************************************************************************************************/
    //Заполнение тегов отдельной строки для компонентов сборочной операции 
    /****************************************************************************************************************************/
    public void ЗаполнитьСтрокуКомпонента(Строка строкаКЛ, Объект компонент)
    {
    	/* В процедуре заполняются следующие данные ----------------------------------------
        Тег:				Содержание данных:
        НаименованиеДСЕ     Наименование детали, сборочной единицы или материала
        ОбозначениеДСЕ      Обозначение детали, сборочной единицы или материала
        ОПП                 Обозначение подразделения (откуда/куда) поступают комплектуюущие или материалы
        КИ                  Количество деталей, сборочных единиц или материала, применяемых/получаемых при сборке/разборке
        ЕВ                  Код единицы величины/единица измерения
        ЕН                  Единица нормирования
        Нрасх               Норма расхода
        ------------------------------------------------------------------------------------*/
    	/*Входные данные
        строкаКЛ					строка, в которой надо
        горизонтальная              флаг для опеределения, является ли форма горизонтальной 
                                    (заполняется букваК) или вертикальной (букваЛ и букваН)
        */
    	
    	строкаКЛ["НаименованиеДСЕ"].Текст = компонент.Параметр["Наименование"];
    	строкаКЛ["ОбозначениеДСЕ"].Текст = компонент.Параметр["Обозначение"];
    	//строкаКЛ["ОПП"].Текст = компонент.Параметр[""];;
    	строкаКЛ["ЕВ"].Текст = компонент.Параметр["Единица измерения"];
    	//строкаКЛ["ЕН"].Текст = компонент.Параметр[""];
    	строкаКЛ["КИ"].Текст = компонент.Параметр["Количество"];
    	//строкаКЛ["Нрасх"].Текст = компонент.Параметр[""];
    }
    //==========================================================================================================================//
    
    /****************************************************************************************************************************/
    //Проверка инструкции на тип "Техника безопасности" или "Охрана труда"
    /****************************************************************************************************************************/
    public bool инструкцияОТ(Инструкция инструкция)
    {
      ИнструкцияОперации инструкцияОперации = new ИнструкцияОперации(инструкция);
      return инструкцияОперации.ТипИнструкции == 2 || инструкцияОперации.ТипИнструкции == 5;
    }
    //==========================================================================================================================//
}



