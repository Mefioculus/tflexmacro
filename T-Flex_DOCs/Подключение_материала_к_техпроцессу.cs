using System;
using System.Linq;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.DOCs.Model.References;
using TFlex.DOCs.Model.References.Documents;
using TFlex.DOCs.Model.References.Nomenclature;
using TFlex.Model.Technology.References.TechnologyElements;
using TFlex.Technology;
using TFlex.Technology.References;

namespace TechnologyMacros
{
    public class AddMaterialToTP : MacroProvider
    {
        #region Параметры материала ТП

        Объект _материалБазыДанных = null;  // Объект справочника Материалы
        private double Quantity = 0;   // Количество деталей из одной заготовки
        private double NRM = 0;  // Норма расхода
        private double KIM = 0; // КИМ

        private string наименованиеЕИ = "кг";
        private int EN = 1;
        private double mass = 0;
        private double kto = 0;
        private double L = 0;
        private double B = 0;
        private double H = 0;
        private double D = 0;
        private double dd = 0;

        #endregion

        public AddMaterialToTP(MacroContext context)
            : base(context)
        {
        }

        public override void Run()
        {
        }

        public ButtonValidator GetButtonValidator()
        {
            bool visible = DynamicMacro.ExecutionPlace == ExecutionPlace.WinFormsClient;
            return new ButtonValidator()
            {
                Enable = true,
                Visible = visible
            };
        }
               
        public void ПодключитьМатериалИзЗаготовки()
        {
            Объект ТП = ТекущийОбъект;   //техпроцесс
            if (ТП.Тип != "Технологический процесс")
                return; // назначаем параметры материала по связи только для единичного ТП. Типовые и групповые ТП, а также операции и переходы игнорируем

            Объект детальИлиЗаготовка = null;

            foreach (Объект дсе in ТП.СвязанныеОбъекты["Изготавливаемые ДСЕ"])
            {
                if (дсе.Тип == "Деталь" || дсе.Тип == "Заготовка")
                {
                    детальИлиЗаготовка = дсе;
                    if (String.IsNullOrEmpty(дсе["Название варианта"]))
                        break;
                }
            }

            if (детальИлиЗаготовка == null)
            {
                Сообщение("Отсутствует обрабатываемая деталь", "Данный техпроцесс не содержит сведений об обрабатываемой детали. Укажите обрабатываемую деталь в техпроцессе и повторите назначение материала.");
                return;
            }

            // Ищем тип Выбор заготовки с "пустым" вариантом 
            Объект выборЗаготовки = детальИлиЗаготовка.СвязанныеОбъекты["Техпроцессы"].FirstOrDefault(процесс => процесс.Тип == "Выбор заготовки" && String.IsNullOrEmpty(процесс["Вариант"]));
            if (выборЗаготовки != null)
            {
                ПодключитьМатериалЗаготовкиКТехпроцессу((ReferenceObject)выборЗаготовки);
            }
            else
            {
                Объект материалНоменклатуры = null;

                foreach (Объект дочернийОбъектДЗ in детальИлиЗаготовка.ДочерниеОбъекты)
                {
                    if (дочернийОбъектДЗ.Тип == "Материал")
                    {
                        материалНоменклатуры = дочернийОбъектДЗ;
                        _материалБазыДанных = материалНоменклатуры.СвязанныйОбъект["Связанный объект"];
                        if (String.IsNullOrEmpty(дочернийОбъектДЗ["Название варианта"]))
                            break;
                    }
                    else if (дочернийОбъектДЗ.Тип == "Заготовка")
                    {
                        foreach (Объект дочернийМатериалЗаготовки in дочернийОбъектДЗ.ДочерниеОбъекты)
                        {
                            if (дочернийМатериалЗаготовки.Тип == "Материал")
                            {
                                материалНоменклатуры = дочернийМатериалЗаготовки;
                                _материалБазыДанных = дочернийМатериалЗаготовки.СвязанныйОбъект["Связанный объект"];
                                if (String.IsNullOrEmpty(дочернийМатериалЗаготовки["Наименование варианта"]))
                                    break;
                            }
                        }
                    }

                    if (String.IsNullOrEmpty(дочернийОбъектДЗ["Название варианта"]))
                        break;
                }

                if (материалНоменклатуры == null)
                {
                    Сообщение("Материал не найден", "Отсутствуют объекты типов '{0}', '{1}', '{2}'.", "Выбор заготовки", "Материал", "Заготовка");
                    return;
                }
                if (_материалБазыДанных == null)
                {
                    Сообщение("Материал не найден", "Отсутствует связанный материал из справочника '{0}'.", "Материалы");
                    return;
                }

                Quantity = материалНоменклатуры["[Подключения].[Количество]"];
                наименованиеЕИ = материалНоменклатуры["[Подключения].[Единица измерения]"];
                EN = материалНоменклатуры["[Подключения].[Единица нормирования]"];
                mass = материалНоменклатуры["[Подключения].[Масса заготовки]"];
                NRM = материалНоменклатуры["[Подключения].[Норма расхода материала]"];
                KIM = материалНоменклатуры["[Подключения].[Коэффициент использования материала]"];
                kto = материалНоменклатуры["[Подключения].[Коэффициент технологического отхода]"];
                L = материалНоменклатуры["[Подключения].[Длина заготовки]"];
                B = материалНоменклатуры["[Подключения].[Ширина заготовки]"];
                H = материалНоменклатуры["[Подключения].[f94d5478-a137-4d8d-a4d0-9767ecdbda23]"];
                D = материалНоменклатуры["[Подключения].[Диаметр заготовки (внешний)]"];
                dd = материалНоменклатуры["[Подключения].[Диаметр заготовки (внутренний)]"];

                ТП.Изменить();

                Объект материал = ТП.СоздатьОбъектСписка("Материалы", "Материал ТП");
                ЗаполнитьПараметрыМатериала(материал);
                материал.Сохранить();

                ТП.Сохранить();
            }
        }

        public void ПодключитьМатериалИзНоменклатуры()
        {
            var TP = (ReferenceObject)CurrentObject as StructuredTechnologicalProcess;   //техпроцесс
            if (TP == null || TP.Class.Guid != Technology2012Classes.StructuredTechnologicalProcessType)
                return; // назначаем параметры материала по связи только для единичного ТП. Типовые и групповые ТП, а также операции и переходы игнорируем

            var linkedDSE = TP.ProducedDSEGroup.Objects.OfType<MaterialObject>()
                            .FirstOrDefault(dse => dse.Class.IsDetail && String.IsNullOrEmpty(dse.VariantName.ToString())) as MaterialObject;

            if (linkedDSE == null)
                Error("Техпроцесс '{0}' не содержит сведений об обрабатываемой детали. Укажите обрабатываемую деталь в техпроцессе и повторите назначение материала.", TP);

            var document = linkedDSE.LinkedObject as ProductDocumentObject;
            if (document == null)
                return;

            var material = document.BasicMaterial;
            if (material == null)
                Error("У '{0}' отсутствует основной материал", linkedDSE);

            bool needSave = false;
            if (!TP.Changing)
            {
                TP.BeginChanges();
                needSave = true;
            }

            var tpMaterial = TP.Materials.CreateReferenceObject(TP.Materials.Classes.GetProcessMaterialClass()) as TechnologicalProcessMaterial;
            tpMaterial.TPLinksMaterial.SetLinkedObject(material);
            tpMaterial.Name.Value = material.Name;
            tpMaterial.EndChanges();

            if (needSave)
                TP.EndChanges();
        }

        public void ПодключитьМатериалЗаготовкиКТехпроцессу(ReferenceObject pieceSelection)
        {
            if (pieceSelection == null)
                return;

            Объект ТП = ТекущийОбъект;   //техпроцесс
            if (ТП.Тип != "Технологический процесс")
                return; // назначаем параметры материала по связи только для единичного ТП. Типовые и групповые ТП, а также операции и переходы игнорируем

            Объект выборЗаготовки = Объект.CreateInstance(pieceSelection, Context);

            Объект заготовкаНоменклатуры = выборЗаготовки.СвязанныйОбъект["Объект заготовки"];
            // берем материал (Объект справочника Материалы) из заготовки
            _материалБазыДанных = заготовкаНоменклатуры != null ? заготовкаНоменклатуры.СвязанныйОбъект["Материал заготовки"] : null;
            if (_материалБазыДанных == null)
            {
                // или из выбора заготовки
                _материалБазыДанных = выборЗаготовки.СвязанныйОбъект["Исходный материал"];
            }

            if (_материалБазыДанных == null)
            {
                Сообщение("Материал не найден", "Отсутствует связанный материал из справочника '{0}'.", "Материалы");
                return;
            }

            ТП.Изменить();

            Объект материал = ТП.СоздатьОбъектСписка("Материалы", "Материал ТП");

            if (заготовкаНоменклатуры != null)
            {
                mass = заготовкаНоменклатуры["Масса"];

                // параметры заготовки можно взять напрямую
                foreach (Объект параметрЗаготовки in заготовкаНоменклатуры.СвязанныеОбъекты["Параметры заготовки"])
                {
                    string наименованиеПараметраЗаготовки = параметрЗаготовки["Наименование"];
                    switch (наименованиеПараметраЗаготовки)
                    {
                        case "Масса":
                            if (mass == 0)
                                mass = параметрЗаготовки["Значение"];
                            break;
                        case "L":
                            if ((bool)параметрЗаготовки["Основной"])
                                L = параметрЗаготовки["Значение"];
                            break;
                        case "B":
                            if ((bool)параметрЗаготовки["Основной"])
                                B = параметрЗаготовки["Значение"];
                            break;
                        case "H":
                            if ((bool)параметрЗаготовки["Основной"])
                                H = параметрЗаготовки["Значение"];
                            break;
                        case "d":
                            if ((bool)параметрЗаготовки["Основной"])
                                D = параметрЗаготовки["Значение"];
                            break;
                        case "dd":
                            if ((bool)параметрЗаготовки["Основной"])
                                dd = параметрЗаготовки["Значение"];
                            break;
                        default:
                            break;
                    }

                    if ((bool)параметрЗаготовки["Основной"])
                    {
                        Объект параметрМатериала = материал.СоздатьОбъектСписка("Параметры материала заготовки", "Параметр материала заготовки");
                        параметрМатериала["Наименование"] = параметрЗаготовки["Наименование"];
                        параметрМатериала["Значение"] = параметрЗаготовки["Значение"];
                        параметрМатериала.Сохранить();
                    }
                }
            }

            foreach (Объект параметр in выборЗаготовки.СвязанныеОбъекты["Технологические параметры"])
            {
                string наименованиеПараметра = параметр["Наименование"];

                if (параметр.Тип == "Технологический параметр")
                {
                    switch (наименованиеПараметра)
                    {
                        case "Quantity":
                            Quantity = параметр["Значение"];
                            break;
                        case "NRM":
                            NRM = параметр["Значение"];
                            break;
                        case "KIM":
                            KIM = параметр["Значение"];
                            break;
                    }
                }
                else if (параметр.Тип == "Параметр заготовки")
                {
                    switch (наименованиеПараметра)
                    {
                        case "Масса":
                            if (mass == 0)
                                mass = параметр["Значение"];
                            break;
                        case "L":
                            if (L == 0 && (bool)параметр["Основной"])
                                L = параметр["Значение"];
                            break;
                        case "B":
                            if (B == 0 && (bool)параметр["Основной"])
                                B = параметр["Значение"];
                            break;
                        case "H":
                            if (H == 0 && (bool)параметр["Основной"])
                                H = параметр["Значение"];
                            break;
                        case "d":
                            if (D == 0 && (bool)параметр["Основной"])
                                D = параметр["Значение"];
                            break;
                        case "dd":
                            if (dd == 0 && (bool)параметр["Основной"])
                                dd = параметр["Значение"];
                            break;
                        default:
                            break;
                    }

                    if ((bool)параметр["Основной"])
                    {
                        Объект параметрМатериала = материал.СвязанныеОбъекты["Параметры материала заготовки"].FirstOrDefault(текущийПараметр => текущийПараметр["Наименование"] == наименованиеПараметра);
                        if (параметрМатериала == null)
                        {
                            параметрМатериала = материал.СоздатьОбъектСписка("Параметры материала заготовки", "Параметр материала заготовки");
                            параметрМатериала["Наименование"] = параметр["Наименование"];
                            параметрМатериала["Значение"] = параметр["Значение"];
                            параметрМатериала.Сохранить();
                        }
                        else
                        {
                            string значение = параметр["Значение"];
                            if (!String.IsNullOrEmpty(значение))
                            {
                                double числовоеЗначение;
                                if (double.TryParse(значение, out числовоеЗначение))
                                {
                                    if (числовоеЗначение > 0 && параметрМатериала["Значение"] != числовоеЗначение)
                                    {
                                        параметрМатериала.Изменить();
                                        параметрМатериала["Значение"] = числовоеЗначение;
                                        параметрМатериала.Сохранить();
                                    }
                                }
                                else
                                {
                                    if (параметрМатериала["Значение"] != значение)
                                    {
                                        параметрМатериала.Изменить();
                                        параметрМатериала["Значение"] = значение;
                                        параметрМатериала.Сохранить();
                                    }

                                }
                            }
                        }
                    }
                }
            }

            ЗаполнитьПараметрыМатериала(материал);

            материал.Сохранить();

            ТП.Сохранить();
        }

        private void ЗаполнитьПараметрыМатериала(Объект материал)
        {
            материал.СвязанныйОбъект["Материал"] = _материалБазыДанных;
            материал["Сводное наименование материала"] = _материалБазыДанных.ToString();

            if (String.IsNullOrEmpty(наименованиеЕИ))
                наименованиеЕИ = "кг";
            Объект ЕИ = НайтиОбъект("Единицы измерения", "Сокращённое наименование", наименованиеЕИ);

            материал.СвязанныйОбъект["ЕИ для нормы расхода"] = ЕИ;
            материал["Единицы нормирования"] = EN;
            материал["Масса заготовки на деталь"] = mass;
            материал["Количество деталей, изготавливаемых из одной заготовки"] = Quantity;

            // %%TODO
            //if (NRM == 0)
            //    NRM = Quantity;

            материал["Норма расхода"] = NRM;
            материал["Коэффициент использования материала"] = KIM;
            материал["Длина заготовки на деталь"] = L;
            материал["Ширина заготовки на деталь"] = B == 0 ? D : B;
        }
    }
}

