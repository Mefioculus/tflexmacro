using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
//------------------------------------
using System.Text.RegularExpressions;

public class Macro : MacroProvider
{
    public Macro(MacroContext context)
        : base(context)
    {
    }
    public override void Run()
    {
    }

    /// <summary>
    /// MDM. АРМ. Взять объект ячейку
    /// </summary>
    private static string ГуидМакросаПоПолучениюОбъектов = "ea0d8d3c-395b-48d5-9d42-dab98371522c";

    private Объекты ПолучитьЗаписи()
    {
        return ВыполнитьМакрос(ГуидМакросаПоПолучениюОбъектов, "ПолучитьВыбраныеОбъекты", "Записи");
    }

    private string ПолучитьКолонку()
    {
        return ВыполнитьМакрос(ГуидМакросаПоПолучениюОбъектов, "ПолучитьКолонку", "Записи");
    }

    public void Событие_НайтиЗаменить()
    {
        Объекты записи = ВыбранныеОбъекты;
        НайтиЗаменить(записи, "Комментарий");
    }
    public void АРМ_НайтиЗаменить()
    {
        Объекты записи = ПолучитьЗаписи();
        string имя = ПолучитьКолонку();
        НайтиЗаменить(записи, имя);
    }
    public void АРМ_Депробел()
    {
        Объекты записи = ПолучитьЗаписи();
        string имя = ПолучитьКолонку();
        ЛишниеПробелы(записи, имя);
    }
    public void АРМ_Строковые()
    {
        Объекты записи = ПолучитьЗаписи();
        string имя = ПолучитьКолонку();
        Строковые(записи, имя);
    }

    private void НайтиЗаменить(Объекты записи, string имя)
    {
        if (записи.Count == 0)
            Ошибка("Нет выбранных записей");

        //Объекты записи = ВыполнитьМакрос("АРМ.Взять объект ячейку", "ПолучитьВыбраныеОбъекты", "Записи");
        //string имя = ВыполнитьМакрос("АРМ.Взять объект ячейку", "ПолучитьКолонку", "Записи");
        string строка = "";
        string найти = "";
        string заменить = "";
        Объект донор = записи.FirstOrDefault();

        ДиалогВвода диалог = СоздатьДиалогВвода("Найти и заменить");
        диалог.ДобавитьСтроковое("Найти", донор[имя]);
        диалог.ДобавитьСтроковое("Заменить", "Заменить");

        диалог.ЗакрытиеДиалога += (bool нажатаКнопкаОк, ref bool закрытьДиалог) =>
        {
            if (!нажатаКнопкаОк)
                закрытьДиалог = Вопрос("Вы уверены, что хотите закрыть диалог?");
        };

        if (диалог.Показать())
        {
            заменить = диалог["Заменить"];
            найти = диалог["Найти"];
            //Сообщение("Найти и заменить", найти + " -> " + заменить);
            foreach (Объект запись in записи)
            {
                //Сообщение("заголовок", "текст", аргументы);
                строка = запись[имя];
                строка = Regex.Replace(строка, найти, заменить);
                if (строка != запись[имя])
                {
                    запись.Изменить();
                    запись[имя] = строка;
                    запись.Сохранить();
                }
            }
        }
        else
        {
            Сообщение("Пример диалога ввода", "Отмена!");
            return;
        }
    }
    private void Строковые(Объекты записи, string имя)
    {
        string строка = "";
        foreach (Объект запись in записи)
        {
            строка = запись[имя].ToString().ToLower();
            строка = строка.Substring(0, 1).ToUpper() + строка.Substring(1);
            if (строка != запись[имя])
            {
                запись.Изменить();
                запись[имя] = строка;
                запись.Сохранить();
            }
        }
    }
    private void ЛишниеПробелы(Объекты записи, string имя)
    {
        string строка = "";
        foreach (Объект запись in записи)
        {
            строка = Депробел(запись[имя]);
            if (строка != запись[имя])
            {
                запись.Изменить();
                запись[имя] = строка;
                запись.Сохранить();
            }
        }
    }
    private string Депробел(string s)
    {
        var i = 0; var k = s.Length - 1;
        while ((i < k) && (s[i] == ' ')) i++;
        while ((i < k) && (s[k] == ' ')) k--;
        if (i == k) return "";
        var issp = false;
        var t = new char[k - i + 1];
        var acnt = 0;
        for (int u = i; u <= k; u++)
        {
            var ch = s[u];
            if (ch != ' ') { t[acnt++] = ch; issp = false; }
            else if (!issp) { t[acnt++] = ch; issp = true; }
        }
        Array.Resize(ref t, acnt);
        return new string(t);
    }

    public void ПрописныеВзаглавные()
    {
        Объекты записи = ПолучитьЗаписи();
        string сводное = string.Empty;
        //string имяКолонки = ПолучитьКолонку();
        foreach (Объект запись in записи)
        {
            if (string.IsNullOrEmpty(запись["Сводное наименование"]))
                continue;
            сводное = запись["Сводное наименование"].ToString().ToUpper();
            if (сводное != запись["Сводное наименование"].ToString())
            {
                запись.Изменить();
                запись["Сводное наименование"] = сводное;
                запись.Сохранить();
            }
        }
    }

    public void ЗаглавныеВпрописные()
    {
        Объекты записи = ПолучитьЗаписи();
        string сводное = string.Empty;
        //string имяКолонки = ПолучитьКолонку();
        foreach (Объект запись in записи)
        {
            if (string.IsNullOrEmpty(запись["Сводное наименование"]))
                continue;
            сводное = запись["Сводное наименование"].ToString().ToLower();
            if (сводное != запись["Сводное наименование"].ToString())
            {
                запись.Изменить();
                запись["Сводное наименование"] = сводное;
                запись.Сохранить();
            }
        }
    }
}
