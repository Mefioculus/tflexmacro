using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;

public class Macro : MacroProvider
{
    public Macro(MacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    
    }
    
    public void ВыгрузкаКонструкторскихИзменений()
    {
    	List<Объект> объектыДляВыгрузки = new List<Объект>();
    	объектыДляВыгрузки.Add(ТекущийОбъект);
    	объектыДляВыгрузки.AddRange(ТекущийОбъект.ВсеДочерниеОбъекты);
    	
    	List<Объект> аналоги = new List<Объект>();
    	List<Объект> аналогиПлаты = new List<Объект>();
    	
    	foreach (var ДСЕ in объектыДляВыгрузки)
    	{
    		string справочникАналоги = "KAT_IZV OUT";
    		string типАналоги = "KAT_IZV OUT";
    		var связанныйОбъект = ДСЕ.СвязанныйОбъект["Связанный объект"];
    		if (связанныйОбъект != null)
    		{
    			if (связанныйОбъект.Справочник.Имя == "Электронные компоненты")
    			{
    				справочникАналоги = "KAT_IZVP OUT";
    				типАналоги = "KAT_IZVP OUT";
    			}
    		}
    		
    		var изменения = ДСЕ.СвязанныеОбъекты["Изменения"];
    		foreach (var изменение in изменения)
    		{
    			var извещение = изменение.СвязанныйОбъект["Извещение об изменении"];
    			var аналог = СоздатьОбъект(справочникАналоги, типАналоги);
    			аналог["NAIM"] = ДСЕ["Наименование"];
    			аналог["SH_IZM"] = ДСЕ["Обозначение"];
    		    аналог["N_IZV"] = изменение["№ изменения"];
    		    if (справочникАналоги == "KAT_IZVP OUT")
    		    	аналог["LITERA"] = изменение["Литера"];
    		    //аналог["IZD"] = ;
    			
    			if (извещение != null)
    			{
    				аналог["K_PIZM"] = извещение["Код изменения"];
    				аналог["DATA_IZ"] = извещение["Дата выпуска"];
    		        аналог["DATA_VV"] = извещение["Срок изменения"];
    				аналог["VNEDR"] = извещение["Указание о внедрении"];
    		        аналог["ZADEL"] = извещение["Указание о заделе"];
    		        аналог["SHIFR"] = извещение["Выпущено на"];
    			}
    			
    			аналог.Сохранить();
    		
    			if (справочникАналоги == "KAT_IZV OUT")
    				аналоги.Add(аналог);
    			else
    				аналогиПлаты.Add(аналог);
    		}
    	}
    	
    	if (аналоги.Any())
    		ОбменДанными.ЭкспортироватьОбъекты(
    			"Изменения KAT_IZV OUT",
    			аналоги,
    			false);
    	if (аналогиПлаты.Any())
    		ОбменДанными.ЭкспортироватьОбъекты(
    			"Изменения KAT_IZVP OUT",
    			аналоги,
    			false);
    }
    
    public void ВыгрузкаТехнологическихИзменений()
    {
    	//System.Diagnostics.Debugger.Launch();
    	//System.Diagnostics.Debugger.Break();
    	
    	List<Объект> объектыДляВыгрузки = new List<Объект>();
    	объектыДляВыгрузки.Add(ТекущийОбъект);
    	объектыДляВыгрузки.AddRange(ТекущийОбъект.ВсеДочерниеОбъекты);
    	
    	List<Объект> аналоги = new List<Объект>();
    	string справочникАналоги = "KAT_IZVT OUT";
    	string типАналоги = "KAT_IZVT OUT";
    	
    	foreach (var ДСЕ in объектыДляВыгрузки)
    	{
    		var документ = ДСЕ.СвязанныйОбъект["Связанный объект"];
    		if (документ == null)
    			continue;
    		
    		var связанныеДокументы = документ.СвязанныеОбъекты["~[Связанные документы]"];
    		foreach (var технологическийДокумент in связанныеДокументы)
    		{
    			Объекты извещения = технологическийДокумент.СвязанныеОбъекты["Извещения"];
    			foreach (var извещение in извещения)
    			{
    				var изменения = извещение.СвязанныеОбъекты["Изменения"];
					foreach (var изменение in изменения.Where(t => t.Тип.Имя == "Технологическое изменение"))
					{
						var аналог = СоздатьОбъект(справочникАналоги, типАналоги);
						аналог["DATA_IZ"] = извещение["Дата выпуска"];
						аналог["NAIM"] = ДСЕ["Наименование"];
						аналог["SH_IZM"] = ДСЕ["Обозначение"];
						аналог["SHIFR"] = извещение["Выпущено на"];
						аналог["VNEDR"] = извещение["Указание о внедрении"];
			            аналог["K_PIZM"] = извещение["Код изменения"];
	                    аналог["ZADEL"] = извещение["Указание о заделе"];
	                    аналог["N_IZV"] = изменение["№ изменения"];
	                    аналог["SODER"] = изменение["Содержание изменения"];
	                    
	                    //аналог["IZD"] = ;
	                    //аналог["DOP_PRIM"] = ;
						
						аналог.Сохранить();
		                аналоги.Add(аналог);
					}
    			}
    		}
    	}
    	
    	if (аналоги.Any())
    		ОбменДанными.ЭкспортироватьОбъекты(
    			"Изменения KAT_IZVT OUT",
    			аналоги,
    			false);
    }
    
    public void ВыгрузкаВхождений()
    {
    	//System.Diagnostics.Debugger.Launch();
    	//System.Diagnostics.Debugger.Break();
    	
    	List<Объект> аналоги = new List<Объект>();
    	string справочникАналоги = "KAT_VHOD OUT";
    	string типАналоги = "KAT_VHOD OUT";
    	
    	var документ = ТекущийОбъект.СвязанныйОбъект["Связанный объект"];
    	var связанныеДокументы = документ.СвязанныеОбъекты["~[Связанные документы]"];
    	if (!связанныеДокументы.Any())
    		return;
    	
    	var связанныеДокументыМаршруты = связанныеДокументы.Where(t => (int)t["[Дополнительные параметры].[Вид документа]"] == 1);
    	foreach (var связанныйДокумент in связанныеДокументыМаршруты)
    	{
    		var входящиеИзделия = связанныйДокумент.СвязанныеОбъекты["Входящие изделия"];
    		foreach (var входящееИзделие in входящиеИзделия)
    		{
    			bool flagGPP = входящееИзделие["Есть ГПП"];
    			if (!flagGPP)
    				continue;
    			
    			string наименованиеЭСИ = "";
    			string обозначениеЭСИ = "";
    			var ЭСИВходящегоИзделия = входящееИзделие.СвязанныйОбъект["ЭСИ"];
    			if (ЭСИВходящегоИзделия != null)
    			{
    				наименованиеЭСИ = ЭСИВходящегоИзделия["Наименование"];
    				обозначениеЭСИ = ЭСИВходящегоИзделия["Обозначение"];
    			}
    			
    			var аналог = СоздатьОбъект(справочникАналоги, типАналоги);
    			аналог["IZD_ST"] = ТекущийОбъект["Обозначение"].ToString().Replace(".", "");
    			аналог["SHIFR"] = обозначениеЭСИ;
    			аналог["NAIM"] = наименованиеЭСИ;
    			аналог["IZD"] = наименованиеЭСИ;
    			аналог["PRIM"] = ТекущийОбъект["[Подключения].[Количество]"];
    			
    			аналог.Сохранить();
    			аналоги.Add(аналог);
    		}
    	}
    	
    	if (аналоги.Any())
    		ОбменДанными.ЭкспортироватьОбъекты(
    			"Входимость KAT_VHOD OUT",
    			аналоги,
    			false);
    }
}

