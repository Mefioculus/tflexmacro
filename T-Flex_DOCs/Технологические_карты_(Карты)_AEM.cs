/* Ссылки
TFlex.Model.Technology.dll
TFlex.Reporting.CAD.dll
TFlex.Reporting.Technology.dll */

using System;
using System.Collections.Generic;
using System.Linq;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.Model.Technology.Macros.ObjectModel;
using TFlex.Reporting.CAD.MacroGenerator.ObjectModel;
using TFlex.Reporting.Technology.Macros;
using System.Text;
using System.Drawing;
using TFlex.DOCs.Model.References.Files;
using TFlex.DOCs.Model.References;


public class Macro : ReportMacroProvider
{
    public Macro(ReportGenerationMacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    }

    /*----------------------------------------------------- Доступные отчёты ----------------------------------------------------
    //ВыполнитьМакрос("Технологические карты (Карты)", "");
    ВыполнитьМакрос("Технологические карты (Карты)", "Карта_эскизов");
    ВыполнитьМакрос("Технологические карты (Карты)", "Операционная_карта_с_эскизами");
    ВыполнитьМакрос("Технологические карты (Карты)", "Операционная_карта_контроля");
    ВыполнитьМакрос("Технологические карты (Карты)", "Операционная_карта_форма_3");
    ВыполнитьМакрос("Технологические карты (Карты)", "Титульный_лист");
    ВыполнитьМакрос("Технологические карты (Карты)", "Ведомость_оснастки_или_оборудования", ведомость, выводитьОперацию);
        ведомость:            ВО_ф2, ВО_ф3, ВОБ_ф2        - доступные ведомости для формирования
        выводитьОперацию:    true/false                    - нужно ли выводить операцию перед оснасткой/оборудованием
    ВыполнитьМакрос("Технологические карты (Карты)", "Карта", карта);
        карта:                КТП, МОК_ф1, МОК_ф3, МК_ф1, МК_ф3            - доступные карты для формирования
                            МОК_ф1_сб, МОК_ф3_сб, МК_ф1_сб, МК_ф3_сб     - аналоги для техпроцессов со сборочными операциями
    ВыполнитьМакрос("Технологические карты (Карты)", "Комплектовочная_карта", горизонтальная);
        горизонтальная:     true/false                  - форма 6 (false) или форма 7 (true)
    ----------------------------------------------------------------------------------------------------------------------------*/

    private const string format3 = "{0:0.##}";
    private const bool разбиватьТекстПерехода = false;        //Необходимо ли разбивать текст перехода в таблице отчёта
    private const int ширинаДляГоризонтальнойФормы = 125;    //Ширина ячейки таблицы (в символах) для текста перехода в карте
    private const int ширинаДляГоризонтальнойФормыСВременем = 105;    //Ширина ячейки таблицы (в символах) для текста перехода в карте, где указывается время
    private const int ширинаДляВертикальнойФормы = 65;

    private const string константаИнструкций = "<$Инструкции>"; // для вывода инструкций операций в тексте инструкции ТП

    /****************************************************************************************************************************/
    //Карты эскизов (формы 6, 7 и 8)
    /****************************************************************************************************************************/
    public void Карта_эскизов()
    {
        //Получение объекта отчёта
        Операция операция = (Операция)ТекущийОбъект;

        //Заполнение переменных CAD'а
        Переменная["$graph_33"] = "КЭ";

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", операция);

        //Инициализация шаблона
        Текст текст = Текст["Текст1"];
        ШаблонСтроки Стр_шаблон = текст["Страница"];

        //Обработка графической части
        Объект эскиз = операция.Эскиз;
        if (эскиз != null)
        {
            //*В зависимости от типа файла необходимо выполнять разные действия. 
            //- Эскиз CAD может вставляться как многостраничный, так и масштабированный в ячейку. 
            //- Изображение (jpg, bmp, png...) вставляется только в ячейку.*/
            if (эскиз.Тип.ПорожденОт("Документ системы T-FLEX CAD"))
            {
                //Получение количества страниц эскиза
                int количествоСтраниц = Эскиз.ПолучитьКоличествоСтраниц(эскиз);
                if (количествоСтраниц > 1)
                {
                    //Создание необходимого количества страниц для отображения многостраничного эскиза
                    for (int i = 1; i <= количествоСтраниц; i++)
                    {
                        Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                        страницаОтчёта["Страница"].ВставитьЭскиз(эскиз, i);
                    }

                    //Вставка внешнего многостраничного эскиза в отчёт
                    //ВставитьЭскиз("$Image", эскиз);

                    //Вставка вложенного многостраничного эскиза
                    //см. выше: страницаОтчёта["Страница"].ВставитьЭскиз(эскиз, i);
                    //ВставитьВложенныйЭскиз(эскиз);
                }
                else
                {
                    //Вставка эскиза CAD в ячейку (масштабирование)
                    Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                    страницаОтчёта["Страница"].ВставитьЭскиз(эскиз);
                }
            }
            else
            {
                //Вставка изображения в ячейку
                Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                страницаОтчёта["Страница"].ВставитьЭскиз(эскиз);
            }
        }
        else
        {
            //Добавление замечания
            string operinfo = ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", операция);
            ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", "Операция '" + operinfo + "' не содержит эскиз.");

            //Создание пустого параграф-текста
            Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
        }

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
    }
    //==========================================================================================================================//    
   
    
    
    

    
    
 public void Карта_эскизовTP()
    {
        
        var ТП = ТекущийОбъект;
        
        
        
        var цехопереходы = ТП.ДочерниеОбъекты;
        foreach (var цп in цехопереходы)
        {
            var операции = цп.ДочерниеОбъекты;
            foreach (Операция операция in операции)
            {
        
    
                        Переменная["$graph_33"] = "КЭ";
                
                        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
                        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", операция,true);
                
                        //Инициализация шаблона
                        Текст текст = Текст["Текст1"];
                        Текст текст2 = Текст["Текст2"];
          
                          
                        ШаблонСтроки Стр_шаблон = текст["Страница"];
                        ШаблонСтроки Text2 = текст2["Num"];
     System.Diagnostics.Debugger.Launch();
      System.Diagnostics.Debugger.Break();
                          
                        Объект эскиз = операция.Эскиз;
                        
                        if (эскиз != null)
                        {
                            //*В зависимости от типа файла необходимо выполнять разные действия. 
                            //- Эскиз CAD может вставляться как многостраничный, так и масштабированный в ячейку. 
                            //- Изображение (jpg, bmp, png...) вставляется только в ячейку.*/
                            if (эскиз.Тип.ПорожденОт("Документ системы T-FLEX CAD"))
                            {
                                //Получение количества страниц эскиза
                                int количествоСтраниц = Эскиз.ПолучитьКоличествоСтраниц(эскиз);
                                System.Windows.Forms.MessageBox.Show(количествоСтраниц.ToString());
                                        if (количествоСтраниц > 1)
                                        {
                                            //Создание необходимого количества страниц для отображения многостраничного эскиза
                                            for (int i = 1; i <= количествоСтраниц; i++)
                                            {
                                                Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                                                страницаОтчёта["Страница"].ВставитьЭскиз(эскиз, i);
                                            }
                        
                                            //Вставка внешнего многостраничного эскиза в отчёт
                                            //ВставитьЭскиз("$Image", эскиз);
                        
                                            //Вставка вложенного многостраничного эскиза
                                            //см. выше: страницаОтчёта["Страница"].ВставитьЭскиз(эскиз, i);
                                            //ВставитьВложенныйЭскиз(эскиз);
                                        }
                                        else
                                        {
                                            //Вставка эскиза CAD в ячейку (масштабирование)
                                            Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                                           
                                            
                                            страницаОтчёта["Страница"].ВставитьЭскиз(эскиз);
                                        }
                            }
                            else
                            {
                                //Вставка изображения в ячейку
                             //   Строка строкаT = текст.Таблица.ДобавитьСтроку(Test);
                            ///////////////////////
                            
                           // string str
                           
                           // Чертеж детали
                                var объект=операция.СвязанныйОбъект["Чертеж детали"];
//                            //    операция["Относительный путь"]
                                System.Windows.Forms.MessageBox.Show(объект.ToString());
                                string path= GetFileLocalPathFromFileReference(объект["Относительный путь"].ToString());
                                System.Windows.Forms.MessageBox.Show(path);                            
                                ///////////////////////
                                
                                Image newImage = Image.FromFile("C:\\Temp\\020.tif");
           // Image newImage = Image.
            System.Windows.Forms.MessageBox.Show(String.Format("Test {0}",newImage.Width));
                                
                ////////////////////////////////                                
                                int количествоСтраниц2 = Эскиз.ПолучитьКоличествоСтраниц(эскиз);
                                System.Windows.Forms.MessageBox.Show(количествоСтраниц2.ToString());
                                Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);

                                Строка Опр4 = текст2.Таблица.ДобавитьСтроку(Text2);
                                Опр4["Num"].Текст = операция.Номер + операция.Индекс;
                                //операция.Номер + операция.Индекс;
//                                    операция.Номер + операция.Индекс;

                                страницаОтчёта["Страница"].ВставитьЭскиз(эскиз);
                                
                                
                          
                            }
                        }
                        else
                        {
                            //Добавление замечания
                            string operinfo = ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", операция);
                            ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", "Операция '" + operinfo + "' не содержит эскиз.");
                
                            //Создание пустого параграф-текста
                          //  Строка страницаОтчёта = текст.Таблица.ДобавитьСтроку(Стр_шаблон);
                        }
                    //                        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
                        
                }
            

       }

    }
    //==========================================================================================================================//    
     private string GetFileLocalPathFromFileReference(string relativeFilePath)
        {
            var fileReference = new FileReference(Context.Connection);

            var fileObject = fileReference.FindByRelativePath(relativeFilePath) as FileObject;

           // if (fileObject == null)
            //    throw new MacroException(string.Format(
           //         "Не найден объект в справочнике файлы по заданному относительному пути '{0}'", relativeFilePath));

            fileObject.GetHeadRevision();

        //    if (!File.Exists(fileObject.LocalPath))
        //        throw new MacroException(string.Format(
         //           "Не удалось загрузить файл '{0}' из справочника файлы", fileObject.Name));

            return fileObject.LocalPath;
        }

    /****************************************************************************************************************************/
    //Операционная карта с эскизами (форма 2)
    /****************************************************************************************************************************/
    public void Операционная_карта_с_эскизами()
    {
        //Получение объекта отчёта
        Операция операция = (Операция)ТекущийОбъект;

        //Заполнение переменных CAD'а
        Переменная["$graph_33"] = "ОКЭ";
        //ВставитьЭскиз("$Image", ТекущийОбъект.СвязанныйОбъект["Операционный эскиз"]);

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", операция);
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "Переменные", операция);

        //Обработка графической части
        Объект эскиз = операция.Эскиз;

        //Инициализация шаблона
        Текст текстЭ = Текст["ТекстЭскиз"];
        ШаблонСтроки шаблонЭ = текстЭ["Эскиз"];
        Строка строкаЭ = текстЭ.Таблица.ДобавитьСтроку(шаблонЭ);

        if (эскиз != null)
        {
            //Вставка эскиза
            строкаЭ["Эскиз"].ВставитьЭскиз(операция.Эскиз);
        }
        else
        {
            //Добавление замечания
            string operinfo = ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", операция);
            ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", "Операция '" + operinfo + "' не содержит эскиз.");
        }

        //Инициализация шаблона
        Текст текст = Текст["Текст1"];

        ШаблонСтроки О_шаблон = текст["Переход"];
        ШаблонСтроки ТП_шаблон = текст["ОснащениеПерехода"];
        ШаблонСтроки Р_шаблон = текст["ОсобыеУказания"];

        //Заполнение информации по переходам
        string букваО = "О";
        Переход[] списокПереходов = операция.Переходы;
        foreach (Переход переход in списокПереходов)
        {
            //Выводить ли переход в карту
            bool актуально = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЭлементАктуален", переход);
            if (!актуально)
                continue;

            //Заполнение перехода
            if (!разбиватьТекстПерехода)
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, букваО);
            else
            {
                int ширина = ширинаДляГоризонтальнойФормыСВременем;
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, ширина, букваО, true);
            }

            букваО = "";    //Следующий переход начнётся без символа "О" (если не будет оснащения или режимов)

            Оснащение[] оснащениеПерехода = переход.Оснащение;
            if (оснащениеПерехода.Length > 0)   //если в перехода есть оснащение, то его нужно заполнить
            {
                //Заполнение оснащения перехода
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиОснащениеПерехода", переход, текст, ТП_шаблон, 0, 1, "; ");

                букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
            }

            Режим[] списокПараметровРежима = переход.Режимы;
            if (списокПараметровРежима.Length > 0)  //если в перехода есть режим, то его нужно заполнить
            {
                //Заполнение режимов обработки
                Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуР_МехОбр", переход, строкаР, 1);

                букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
            }
        }

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Операционная карта контроля (форма 2)
    /****************************************************************************************************************************/
    public void Операционная_карта_контроля()
    {
        //Получение объекта отчёта
        Операция операция = (Операция)ТекущийОбъект;

        //Заполнение переменных CAD'а
        Переменная["$graph_33"] = "ОКК";

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", операция);
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "Переменные", операция);

        /* ------- Проверка типа операции ------- */
        string tip = операция.Тип;
        string kod = операция.Код;
        if (kod.Length == 4)
            kod = kod.Substring(0, 2);
        if (!((tip == "Технический контроль") || (kod == "02")))
        {
            string operinfo = ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", операция);
            ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", "Операция '" + operinfo
                                + "' не относится к типу контрольных операций.");
        }
        /* ----------- конец проверки ----------- */

        //Инициализация шаблона
        Текст текст = Текст["Текст1"];
        ШаблонСтроки Р_шаблон = текст["Параметры"];

        //Заполнение инструкций операции
        string инструкцииДоОперации = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ПолучитьИнструкции", операция, 1);
        string инструкцииПослеОперации = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ПолучитьИнструкции", операция, 2);
        Переменная["$ИОТ"] = (инструкцииДоОперации != "" && инструкцииПослеОперации != "")
            ? инструкцииДоОперации + "; " + инструкцииПослеОперации : инструкцииДоОперации + инструкцииПослеОперации;

        //Заполнение информации по переходам
        Переход[] списокПереходов = операция.Переходы;
        int количествоСтрок = 0;
        foreach (Переход переход in списокПереходов)
        {
            //Выводить ли переход в карту
            bool актуально = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЭлементАктуален", переход);
            if (!актуально)
                continue;
            количествоСтрок++;

            Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);

            //Список инструментов, с помощью которых производится контроль
            Оснащение[] оснащениеПерехода = переход.Оснащение;
            string обозначениеТО = "";
            string наименованиеТО = "";
            int kol = 0;
            foreach (var оснащение in оснащениеПерехода)
            {
                Объект оснащениеСТО = оснащение.СвязанныйОбъект["Оснащение из справочника СТО"];
                if (оснащениеСТО != null)
                {
                    обозначениеТО += оснащениеСТО.Параметр["Обозначение"] + "\r\n";
                    наименованиеТО += оснащениеСТО.Параметр["Наименование"] + "\r\n";
                }
                else
                    kol++;
            }

            //Удаление последнего (лишнего) перевода на следующую строку
            if (обозначениеТО != "")    //проверка на "наименованиеТО" не нужна, т.к. они идут парой
            {
                int size = ("\r\n").Length;
                обозначениеТО = обозначениеТО.Remove(обозначениеТО.Length - size, size);
                наименованиеТО = наименованиеТО.Remove(наименованиеТО.Length - size, size);
            }

            //Формирование замечаний (если необходимо)
            if (kol > 0)
            {
                string perehinfo = ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", переход);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", "В переходе '" + perehinfo
                                + "' не указана связь между Оснащением перехода и Оснащением из справочника СТО для "
                                + kol.ToString() + " из " + (оснащениеПерехода.Length).ToString() + " объекта(ов).");
            }

            //Вывод данных в отчёт
            строкаР["Параметры"].Текст = переход.Текст;
            строкаР["Обозначение ТО"].Текст = обозначениеТО;
            строкаР["Наименование ТО"].Текст = наименованиеТО;
            строкаР["Объём"].Текст = переход.Параметр["Объём контроля"];

            string время = String.Format(format3, переход.То) + "/" + String.Format(format3, переход.Тв);
            if (время != "0/0")
                строкаР["То"].Текст = время;
        }

        //Добавление пустой строки, если не было сформировано ни одной записи
        if (количествоСтрок < 1)
        {
            Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
        }

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Операционная карта (форма 3)
    /****************************************************************************************************************************/
    public void Операционная_карта_форма_3()
    {
        //Получение объекта отчёта
        Операция операция = (Операция)ТекущийОбъект;

        //Заполнение переменных CAD'а
        Переменная["$graph_33"] = "ОК";

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", операция);
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "Переменные", операция);

        //Инициализация шаблона
        Текст текст = Текст["Текст1"];
        ШаблонСтроки О_шаблон = текст["Переход"];
        ШаблонСтроки ТП_шаблон = текст["ОснащениеПерехода"];
        ШаблонСтроки Р_шаблон = текст["ОсобыеУказания"];

        //Заполнение информации по переходам
        string букваО = "О";
        Переход[] списокПереходов = операция.Переходы;
        int количествоСтрок = 0;
        foreach (Переход переход in списокПереходов)
        {
            //Выводить ли переход в карту
            bool актуально = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЭлементАктуален", переход);
            if (!актуально)
                continue;
            количествоСтрок++;

            //Заполнение перехода
            if (!разбиватьТекстПерехода)
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, букваО);
            else
            {
                int ширина = ширинаДляГоризонтальнойФормыСВременем;
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуОиВремя", переход, текст, О_шаблон, ширина, букваО, true);
            }

            букваО = "";    //Следующий переход начнётся без символа "О" (если не будет оснащения или режимов)

            Оснащение[] оснащениеПерехода = переход.Оснащение;
            if (оснащениеПерехода.Length > 0)   //если в перехода есть оснащение, то его нужно заполнить
            {
                //Заполнение оснащения перехода
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиОснащениеПерехода", переход, текст, ТП_шаблон, 0, 1, "; ");

                букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
            }

            Режим[] списокПараметровРежима = переход.Режимы;
            if (списокПараметровРежима.Length > 0)  //если в перехода есть режим, то его нужно заполнить
            {
                //Заполнение режимов обработки
                Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуР_МехОбр", переход, строкаР, 1);

                букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
            }

            //Добавляем разделитель между блоками информации
            if (букваО != "")
            {
                Строка строкаТ = текст.Таблица.ДобавитьСтроку(ТП_шаблон);
            }
        }

        //Добавление пустой строки, если не было сформировано ни одной записи
        if (количествоСтрок < 1)
        {
            Строка строкаР = текст.Таблица.ДобавитьСтроку(Р_шаблон);
        }

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Титульный лист (формы 1, 2 и 3)
    /****************************************************************************************************************************/
    public void Титульный_лист()
    {

        //Получение объекта отчёта
        var техпроцесс = ТекущийОбъект;

        Переменная["$graph_33"] = "ТЛ";
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", техпроцесс,true);

    //    ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", техпроцесс,false);

        //Заполнение переменных основной части
        Переменная["$ТЛ_1"] = "";

        string tip = техпроцесс.Тип;
        tip = tip.ToLower();
        Переменная["$ТЛ_3"] = "ТЕХНОЛОГИЧЕСКИЙ ПРОЦЕСС" + "\nна " +   техпроцесс["Обозначение"] + " " + техпроцесс["Наименование"];
            //"ТЕХНОЛОГИЧЕСКИЙ ПРОЦЕСС" + "\nна " + tip + " \n" + техпроцесс["Обозначение"] + " " + техпроцесс["Наименование"];

        Переменная["$ТЛ_5"] = DateTime.Today.ToString("dd.MM.yyyy");
        Переменная["$ТЛ_6"] = "Положение №1";

        //Вывод замечаний (если есть)
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Ведомость оборудования (форма 2)
    //Ведомость оснастки (формы 2 и 3)
    /****************************************************************************************************************************/
    public void Ведомость_оснастки_или_оборудования(string ведомость, bool выводитьОперацию)
    {
        //Получение объекта отчёта
        ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", техпроцесс);

        //Инициализация шаблона
        Текст текст = Текст["Текст1"];
        ШаблонСтроки В_шаблон = new ШаблонСтроки();
        ШаблонСтроки Т_шаблон = new ШаблонСтроки();
        ШаблонСтроки Д_шаблон = new ШаблонСтроки();

        //Определение типа ведомости
        switch (ведомость)
        {
            case "ВО_ф2":
                Переменная["$graph_33"] = "ВО";
                В_шаблон = текст["Операция"];
                Т_шаблон = текст["Обозначение ТО"];
                Д_шаблон = текст["Оборудование"];
                break;
            case "ВО_ф3":
                Переменная["$graph_33"] = "ВО";
                Т_шаблон = текст["Обозначение ТО"];
                выводитьОперацию = false;   //для формы строки для операции не предусмотрено
                break;
            case "ВОБ_ф2":
                Переменная["$graph_33"] = "ВОБ";
                В_шаблон = текст["Операция"];
                Т_шаблон = текст["Обозначение ТО"];
                Д_шаблон = текст["Оборудование"];
                break;
            default:
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", "Неверно задан тип ведомости!");
                break;
        }

        //Получаем список операций техпроцесса, которые подлежат выводу в карту
        Операция[] списокОпераций = техпроцесс.Операции.Where(оп =>
        {
            //Выводить ли операцию в карту
            bool актуально = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЭлементАктуален", оп);
            return актуально;
        }).ToArray();

        //Регулярные данные для техпроцесса
        int count = 0;
        int количествоСтрок = 0;
        foreach (Операция операция in списокОпераций)
        {
            count = 0;
            количествоСтрок++;

            if (выводитьОперацию)
            {
                //Заполнение операции
                Строка строкаВ = текст.Таблица.ДобавитьСтроку(В_шаблон);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуВ", операция, строкаВ);
            }

            //Заполнение оснащения операции
            if ((ведомость == "ВО_ф2") || (ведомость == "ВО_ф3"))
                count += ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуТ_дляВО", операция, текст, Т_шаблон, выводитьОперацию, 1);

            //Заполнение оборудования операции
            if (ведомость == "ВОБ_ф2")
                count += ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуД_дляВОБ", операция, текст, Д_шаблон);

            //Добавление строки-разделителя
            if ((count > 0) || выводитьОперацию)
            {
                //После последней записи разделитель не нужен
                if (ReferenceEquals(операция, списокОпераций.Last()))
                    continue;

                //Используем шаблон строки Т, т.к. он есть во всех используемых шаблонах отчётов
                Строка строкаТ = текст.Таблица.ДобавитьСтроку(Т_шаблон);
            }
            else
                количествоСтрок--;
        }

        //Добавление пустой строки, если не было сформировано ни одной записи
        if (количествоСтрок < 1)
        {
            Строка строкаР = текст.Таблица.ДобавитьСтроку(Т_шаблон);
        }

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
    }
    //==========================================================================================================================//

    /*
    private const string КТП = "КТП";
    private const string МОК_ф1 = "МОК_ф1";
    private const string МОК_ф3 = "МОК_ф3";
    private const string МК_ф1 = "МК_ф1";
    private const string МК_ф3 = "МК_ф3";
    private const string МОК_ф1_сб = "МОК_ф1_сб";
    private const string МОК_ф3_сб = "МОК_ф3_сб";
    private const string МК_ф1_сб = "МК_ф1_сб";
    private const string МК_ф3_сб = "МК_ф3_сб";
    */

    /****************************************************************************************************************************/
    //Маршрутная карта (формы 1 и 3)
    //Маршрутно-операционная карта (формы 1 и 3)
    //Маршрутная карта (формы 1 и 3) (сборочная)
    //Маршрутно-операционная карта (формы 1 и 3) (сборочная)
    //Карта технологического процесса (форма 1)
    /****************************************************************************************************************************/
    public void Карта(string карта, bool sign=false)
    {
        
    
        
        //Получение объекта для отчёта
        ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;
        var ТП = ТекущийОбъект;
   
      if (sign)
     ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", ТП, true);
      else
     ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", ТП,false);    
        
     ВыполнитьМакрос("Технологические карты (Переменные) AEM", "Переменные", ТП);
        

        //Инициализация шаблона
        Текст текст = Текст["Текст1"];
        ШаблонСтроки МТ_шаблон = текст["МатериалТП"];
        ШаблонСтроки И_шаблон = текст["Инструкции"];
        ШаблонСтроки ИДО_шаблон = И_шаблон;
        ШаблонСтроки А_шаблон = new ШаблонСтроки();
        ШаблонСтроки Б_шаблон = new ШаблонСтроки();
        ШаблонСтроки В_шаблон = new ШаблонСтроки();
        ШаблонСтроки Г_шаблон = new ШаблонСтроки();
        ШаблонСтроки Д_шаблон = new ШаблонСтроки();
        ШаблонСтроки Е_шаблон = new ШаблонСтроки();
        ШаблонСтроки КЛ_шаблон = текст["ОбозначениеДСЕ"];
        ШаблонСтроки М_шаблон = текст["Материал"];
        ШаблонСтроки ТО_шаблон = текст["ОснащениеОперации"];
        ШаблонСтроки О_шаблон = текст["Переход"];
        ШаблонСтроки ТП_шаблон = текст["ОснащениеПерехода"];
        ШаблонСтроки Р_шаблон = new ШаблонСтроки();
        ШаблонСтроки ИПП_шаблон = И_шаблон;
        ШаблонСтроки Рз_шаблон = текст["Разделитель"];
     
        

        //Определяем, нужно ли в отчёте выводить данные по сборке
        int sb_index = карта.IndexOf("_сб");
        bool сборочная = sb_index != -1;
        if (сборочная)
            карта = карта.Substring(0, sb_index);

        bool горизонтальнаяФорма = true;
        switch (карта)
        {
            case "КТП":
            case "МОК_ф1":
            case "МК_ф1":
                А_шаблон = текст["Операция"];
                Б_шаблон = текст["Оборудование"];
                break;
            case "МОК_ф3":
            case "МК_ф3":
                В_шаблон = текст["Операция"];
                Г_шаблон = текст["ИнструкцииПО"];
                Д_шаблон = текст["Оборудование"];
                Е_шаблон = текст["Проф"];
                горизонтальнаяФорма = false;
                break;
            default:
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", "Неверно задан тип технологической карты!");
                break;
        }

        switch (карта)
        {
            case "КТП":
                Переменная["$graph_33"] = "КТП";
                Р_шаблон = текст["ОсобыеУказания"];
                break;
            case "МОК_ф1":
            case "МОК_ф3":
                Переменная["$graph_33"] = "МОК";
                break;
            case "МК_ф1":
            case "МК_ф3":
                Переменная["$graph_33"] = "МК";
                break;
        }


        string result = "";
        bool актуально = true;
        
        ///////////////////////////////
            //Втавка пустых строк
            {
       
            Строка строкаРз= текст.Таблица.ДобавитьСтроку(Рз_шаблон);
            строкаРз["Разделитель"].Текст = String.Concat(Enumerable.Repeat("\n", 13));
            строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
            строкаРз["Разделитель"].Текст = "";
        
           }
        //////////////////////////////   
        
        //Заполнение материалов на техпроцесс (второй и последующие, заданные в ТП)
        string букваМ = "М";
        var материалы = ТП.СвязанныеОбъекты["8f505469-c1b4-4caf-a7c1-3bc7ea8c2bbe"];
     //   System.Windows.Forms.MessageBox.Show(материалы.Count.ToString());
        if (материалы.Count > 0)
        {
            if (материалы.Where(t => !t["Основной"]).Count() > 0)
            {
                string res = "";
                foreach (var материал in материалы.Where(t => !t["Основной"]))
                {
                    res += материал["Наименование"].ToString() + "; ";
                    
                    Объект еиНрасх = материал.СвязанныйОбъект["ЕИ количества"];
                    if (еиНрасх != null)
                        res += "ЕВ = " + еиНрасх["Сокращённое наименование"].ToString() + "; ";
                    else
                        res += "ЕВ = кг; ";
                    
                    res += ТП["Масса"].ToString() != "" ? "МД = " + ТП["Масса"].ToString() + "; " : "";
                    res += материал["Норма расхода"].ToString() != "" ? "Н.расх. = " + материал["Норма расхода"].ToString() + "; " : "";
                    res += материал["КИМ"].ToString() != "" ? "КИМ = " + материал["КИМ"].ToString() + "; " : "";
                    res += материал["Тип заготовки"].ToString() != "" ? "Код загот. " + материал["Тип заготовки"].ToString() + "; " : "";
                    res += материал["Размеры"].ToString() != "" ? "Профиль и размеры " + материал["Размеры"].ToString() + "; " : "";
                    res += материал["КОИД"].ToString() != "" ? "КД = " + материал["КОИД"].ToString() + "; " : "";
                    res += материал["Масса заготовки"].ToString() != "" ? "МЗ = " + материал["Масса заготовки"].ToString() : "";
                    
                    Строка строкаМТ = текст.Таблица.ДобавитьСтроку(МТ_шаблон);
                    строкаМТ["букваМ"].Текст = букваМ;
                    строкаМТ["МатериалТП"].Текст = res;
                   
               //     System.Windows.Forms.MessageBox.Show(res);

                    res = "";
                    букваМ = "";
                }
            }
        }

        //Добавляем разделитель между материалами техпроцесса и последующими данными
        if (букваМ == "")
        {
            Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
        }
        
        var ТехУсловия = ТП.СвязанныеОбъекты["0fbe5caf-9da2-444e-b9aa-1c8cced55208"];
        foreach (var ТУ in ТехУсловия)
        {
            Строка строкаИ = текст.Таблица.ДобавитьСтроку(И_шаблон);
            строкаИ["Инструкции"].Текст = ТУ["Текст условия"].ToString();
        }
        if (ТехУсловия.Count > 0)
        {
            Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
            строкаРз["Разделитель"].Текст = "";
        }
        
        var цехопереходы = ТП.ДочерниеОбъекты;
       
        foreach (var цп in цехопереходы)
        {
            var операции = цп.ДочерниеОбъекты;
            int countOp=0;
            foreach (var опер in операции.Where(t => t["Вариант"].ToString() == ""))
            {
                //Заполнение операции
                Строка строкаА = текст.Таблица.ДобавитьСтроку(А_шаблон);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуА", опер, строкаА);
                
                var документы = опер.СвязанныеОбъекты["Документы"];
                string docs = "";
                foreach (var док in документы)
                    docs += док["Обозначение"].ToString() + "; ";
                if(!String.IsNullOrEmpty(docs))
                    docs = docs.Substring(0, docs.Length - 2);
                                
                строкаА["ИнструкцииПО"].Текст = docs;
                
                //Заполнение оборудования и исполнителей
              //  System.Windows.Forms.MessageBox.Show("Б_шаблон");
                Строка строкаБ = текст.Таблица.ДобавитьСтроку(Б_шаблон);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуБ_дляМК", опер, строкаБ);
                
                //Материалы на операцию
                var списокМатериалов = опер.СвязанныеОбъекты["90242708-0a8a-4897-939e-505d09e559bf"];
                foreach (var материал in списокМатериалов)
                {
                    Строка строкаМ = текст.Таблица.ДобавитьСтроку(М_шаблон);
                    ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуМ_дляМК", материал, строкаМ);
                }
                
                //Заполнение оснащения операции
             //   ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиОснащениеОперации", опер, текст, ТО_шаблон, 0, 1, 1, "; ");
                
                //Заполнение переходов и входящих в них элементов
                //Заполнение информации по переходам
                string букваО = "О";
                Переход[] списокПереходов = ((Операция)опер).Переходы;
                foreach (Переход переход in списокПереходов)
                {
                    //Выводить ли переход в карту
                    актуально = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЭлементАктуален", переход);
                    if (!актуально)
                        continue;

                    //Заполнение перехода
                    if (!разбиватьТекстПерехода)
                        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуО", переход, текст, О_шаблон, букваО);
                    else
                    {
                        int ширина = горизонтальнаяФорма ? ширинаДляГоризонтальнойФормы : ширинаДляВертикальнойФормы;
                        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуО", переход, текст, О_шаблон, ширина, букваО, true);
                    }

                    букваО = "";    //Следующий переход начнётся без символа "О" (если не будет оснащения или режимов)

                    Оснащение[] оснащениеПерехода = переход.Оснащение;
                    if (оснащениеПерехода.Length > 0)   //если в перехода есть оснащение, то его нужно заполнить
                    {
                        //Заполнение оснащения перехода
                        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиОснащениеПерехода", переход, текст, ТП_шаблон, 0, 1, "; ");

                        букваО = "О";   //а у следующего перехода должна стоять служебный символ "О"
                    }
                }
                
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиОснащениеОперации", опер, текст, ТО_шаблон, 0, 1, 1, "; ");
                countOp+=1;
                if (!(countOp==операции.Count() && цп["№"]==цехопереходы.Count()))
                    {
                    //System.Windows.Forms.MessageBox.Show(countOp.ToString()+" "+операции.Count().ToString()+" "+цп["№"]);
Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
if (опер["Комментарий к операции"].ToString().Length>0)
    {
строкаРз["Разделитель"].Текст = опер["Комментарий к операции"]+"\r\n";
    }
    else
строкаРз["Разделитель"].Текст = "";

                    }
               //     Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
               
            //    Строка строкаРз = текст.Таблица.ДобавитьСтроку(Рз_шаблон);
            //    строкаРз["Разделитель"].Текст = "";
            }
        }
        
       // System.Diagnostics.Debugger.Break();
      //  System.Windows.Forms.MessageBox.Show("RAZRAB"+Переменная["$Razrab_FIO"]);
    }
    //==========================================================================================================================//    

    public List<string> РазбитьТекст(string текст, int ширина)
    {
        if (String.IsNullOrEmpty(текст))
            return new List<string>(0);

        string[] массивТекста = текст.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);

        List<string> разделённыйТекст = new List<string>();
        foreach (string элемент in массивТекста)
        {
            if (элемент.Length <= ширина)
                разделённыйТекст.Add(элемент);
            else
            {
                string temp2 = элемент;
                int index = temp2.LastIndexOf(' ', ширина);
                string temp1;
                while (index != -1)
                {
                    temp1 = temp2.Substring(0, index);
                    разделённыйТекст.Add(temp1.Trim());

                    temp2 = temp2.Remove(0, index + 1).TrimStart();
                    if (temp2.Length > ширина)
                        index = temp2.LastIndexOf(' ', ширина);
                    else
                        index = -1;
                }
                temp1 = temp2;
                разделённыйТекст.Add(temp1.Trim());
            }
        }
        return разделённыйТекст;
    }

    /****************************************************************************************************************************/
    //Комплектовочная карта (форма 6 и 7)
    /****************************************************************************************************************************/
    public void Комплектовочная_карта(bool горизонтальная)
    {
        //Получение объекта для отчёта
        ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "ЗаполнитьОсновныеНадписи", техпроцесс);
        ВыполнитьМакрос("Технологические карты (Переменные) AEM", "Переменные", техпроцесс);

        Переменная["$graph_33"] = "КК";

        //Инициализация шаблона
        Текст текст = Текст["Текст1"];
        ШаблонСтроки В_шаблон = null;
        ШаблонСтроки КЛ_шаблон = текст["ОбозначениеДСЕ"];
        if (!горизонтальная)
        {
            В_шаблон = текст["Операция"];
        }

        //Регулярные данные для техпроцесса
        var списокОпераций = техпроцесс.Операции.Where(оп => оп.Тип.ПорожденОт("Сборочная операция"));

        //Проверка наличия сборочных операций для сборочных карт
        if (списокОпераций.Count() < 1)
        {
            string tpinfo = ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", техпроцесс);
            ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания",
                "Среди операций технологического процесса '" + tpinfo + "' не найдено ни одной сборочной операции.");

            //Добавляем пустую строку
            текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
        }

        bool актуально;
        bool первая = true;
        foreach (Операция операция in списокОпераций)
        {
            //Выводить ли операцию в карту
            актуально = ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЭлементАктуален", операция);
            if (!актуально)
                continue;

            //Добавление строки - разделителя
            if (!первая)
            {
                if (горизонтальная)
                    текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
                else
                    текст.Таблица.ДобавитьСтроку(В_шаблон);
            }
            else
                первая = false;

            //Заполнение операции
            Строка строкаКЛ = null;
            if (!горизонтальная) //форма 6
            {
                строкаКЛ = текст.Таблица.ДобавитьСтроку(В_шаблон);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуВ", операция, строкаКЛ);
                строкаКЛ["букваВ"].Текст = "В";
            }
            else                 //форма 7
            {
                строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуВ_безНаименования", операция, строкаКЛ);
            }

            Объекты компоненты = операция.СвязанныеОбъекты["Комплект на операцию"];
            if (компоненты.Count() < 1)
            {
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания", String.Format("В операции '{0}' не заданы компоненты.", ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", операция)));
                continue;
            }

            var нематериалы = компоненты.Where(к => к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"] != null //Изделие
                                               && !к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"].Тип.ПорожденОт("Материал")
                                              ).ToList();
            var материалы = компоненты.Where(к => к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"] != null //Изделие
                                               && к.СвязанныйОбъект["9f508c29-bc4d-4d8e-a2cf-897d8a778edc"].Тип.ПорожденОт("Материал")
                                              ).ToList();

            //Заполнение строк отчёта по деталям и сборочным единицам
            for (int i = 0; i < нематериалы.Count; i++)
            {
                Объект компонент = нематериалы[i];
                if (!горизонтальная || i != 0) //не добавляем строку только для первого раза в горизонтальной форме
                    строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);

                //Простановка служебных символов
                if (!горизонтальная)
                {
                    строкаКЛ["букваЛ"].Текст = "Л";
                    строкаКЛ["букваН"].Текст = "Н";
                }
                else if (i == 0)
                {
                    строкаКЛ["букваК"].Текст = "К";
                }

                //Заполнение данных по детале, сборочной единице или материалу
                строкаКЛ["Поз"].Текст = компонент.Параметр["Позиция"];
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуКомпонента", строкаКЛ, компонент);
            }

            //Заполнение строк отчёта по материалам
            for (int i = 0; i < материалы.Count; i++)
            {
                Объект компонент = материалы[i];
                if (!горизонтальная || i != 0 || нематериалы.Count > 0) //не добавляем строку только для первого раза в горизонтальной форме
                    строкаКЛ = текст.Таблица.ДобавитьСтроку(КЛ_шаблон);

                //Простановка служебных символов
                if (i == 0)
                {
                    if (горизонтальная)
                        строкаКЛ["букваК"].Текст = "М";
                    else
                        строкаКЛ["букваЛ"].Текст = "М";
                }

                //Заполнение данных по детале, сборочной единице или материалу
                строкаКЛ["Поз"].Текст = компонент.Параметр["Позиция"];
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ЗаполнитьСтрокуКомпонента", строкаКЛ, компонент);
            }

            //Добавление замечаний
            int количествоКомпонентов = компоненты.Count();
            int количествоБезСвязи = количествоКомпонентов - (нематериалы.Count + материалы.Count);
            if (количествоБезСвязи > 0)
                ВыполнитьМакрос("Технологические карты (Теги) AEM", "ДобавитьЗамечания",
                     String.Format("В операции '{0}' {1} из {2} компонентов не имеют связи на справочник Номенклатура.",
                                   ВыполнитьМакрос("Технологические карты (Теги) AEM", "СводноеНаименование", операция), количествоБезСвязи, количествоКомпонентов));
        }

        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ВывестиЗамечания");
        ВыполнитьМакрос("Технологические карты (Теги) AEM", "ОчиститьЗамечания");
    }
    //==========================================================================================================================//



    /****************************************************************************************************************************/
    //Получение списка шифра (обозначения) инструкций по охране труда с исполнителями по всем операциям ТП
    /****************************************************************************************************************************/
    private string получитьВсеИнструкцииПоОперациям(ТехнологическийПроцесс техпроцесс)
    {
        string инструкции = String.Empty;
        foreach (Операция операция in техпроцесс.Операции)
        {
            foreach (Инструкция инструкцияОперации in операция.Инструкции)
            {
                if (ВыполнитьМакрос("Технологические карты (Теги) AEM", "инструкцияОТ", инструкцияОперации))
                {
                    if (инструкцияОперации.Шифр != String.Empty && !инструкции.Contains(инструкцияОперации.Шифр)) // указан шифр инструкции и его нет в списке
                    {
                        if (инструкции != String.Empty)
                        {
                            инструкции += "; ";
                        }
                        инструкции += инструкцияОперации.Шифр;

                        Исполнитель исполнительОперации = операция.Исполнители.FirstOrDefault(); // первый исполнитель в списке
                        string профессия = исполнительОперации != null && исполнительОперации.Профессия != null ? исполнительОперации.Профессия.ToString() : String.Empty;
                        if (профессия != String.Empty)
                            инструкции += " (" + профессия + ")";

                        break;
                    }
                }
            }
        }
        return инструкции;
    }
    
    
    public void Комплектовочная_ведомость()
    {   
        
        //Получение объекта для отчёта
        ТехнологическийПроцесс техпроцесс = (ТехнологическийПроцесс)ТекущийОбъект;

      

        
        string res="TEKST"; 
        var текст = Текст["Текст1"];
        var шаблонОпер = текст["Комплект"];
   
        
        
         Строка строкаА = текст.Таблица.ДобавитьСтроку(шаблонОпер);
  


     
     
           var ТП= ТекущийОбъект;
    
           Объекты цехозаходы= ТП.ДочерниеОбъекты;
     
          StringBuilder strbild= new StringBuilder();
            


            foreach (var item in цехозаходы)
                {
                  var операции= item.ДочерниеОбъекты;
                   foreach (var опер in операции)
                           {
                               var комплектующие = опер.СвязанныеОбъекты["90242708-0a8a-4897-939e-505d09e559bf"];
                            if (комплектующие!=null) 
                                {
                                   foreach (var компл in комплектующие)
                                          {
                                              if (компл.СвязанныйОбъект["ЕИ количества"]!=null)
                                           strbild.AppendLine(опер["Номер"].ToString()+" "+опер.ToString()+" "+компл["Наименование"].ToString()+" " +компл.СвязанныйОбъект["ЕИ количества"]["Сокращённое наименование"].ToString());

                                           строкаА["Nop"].Текст=опер["Номер"].ToString();                          
                                           строкаА["ОКП"].Текст="";
                                           строкаА["Комплект"].Текст=компл["Наименование"].ToString();
                                           строкаА["Обозначение"].Текст=компл["Обозначение"].ToString();
                                           строкаА["ИИ"].Текст="";
                                           строкаА["Vol"].Текст=компл["Количество"].ToString();
                                           if (компл.СвязанныйОбъект["ЕИ количества"]!=null)
                                           строкаА["Едиз"].Текст=компл.СвязанныйОбъект["ЕИ количества"]["Сокращённое наименование"].ToString();
                                           строкаА["Кодподр"].Текст="";
                                           строкаА=текст.Таблица.ДобавитьСтроку(шаблонОпер);
                                       }
                                }
                           }
                }
                

            
             System.Windows.Forms.MessageBox.Show(String.Format("{0}",strbild.ToString()));
            
     
     

     
     
     
     
    }
    //==========================================================================================================================//
}
